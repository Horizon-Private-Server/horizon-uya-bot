struct tm;
struct _glue;
struct _Bigint;
struct _atexit;
struct __sbuf;
struct __sFILE;
struct _reent;
struct _sceGifPackNop;
struct StashFetch;
struct BSphere;
struct vec4a;
struct vec4f;
struct vec4;
struct vec4x;
struct vec4y;
struct vec4z;
struct vec4w;
struct mtx4;
struct mtx3;
struct quat;
struct creditScript;
struct MEMSLOTS;
struct Subtitle;
struct SceneMonitor;
struct SceneDef;
struct ArmorLoadDef;
struct MobyReactAnim;
struct MoveAnimData;
struct MobyAnimInfo;
struct MobySeq;
struct MobyClass;
struct Manipulator;
struct MobyAnimLayer;
struct MobyAnimLayerCommon;
struct MobyInstance;
struct _HeroSave;
struct GameBootOptions;
struct dbg_command;
struct blockhdr;
struct ThreadParam;
struct _sif_rpc_data;
struct _sif_client_data;
struct _sif_serve_data;
struct _sif_queue_data;
struct _sceDmaTag;
struct SndMessageData;
struct SndCommandBuffer;
struct SndCommandReturnDef;
struct VAGStreamCommand;
struct SndSystemStatus;
struct DuckerDef;
union bank_tag;
union snd_tag;
struct SndPlayParams;
struct PVSBN_struct;
struct fileblock;
struct binblock;
struct chunkblock;
struct sceneblock;
struct _reverb;
struct _mms;
struct levelwad;
struct levelaudiowad;
struct levelscenewad;
struct mpegwad;
struct hudwad;
struct bonuswad;
struct spacewad;
struct armordata;
struct armorwad;
struct audiowad;
struct onlinewad;
struct levelinfo;
struct miscwad;
struct wadinfo;
union __dmath;
struct tGS_PMODE;
struct tGS_SMODE2;
struct tGS_DISPFB2;
struct tGS_DISPLAY2;
struct tGS_BGCOLOR;
struct sceGifTag;
struct _sceGifPackFog;
struct sceGsBitbltbuf;
struct sceGsColclamp;
struct sceGsDthe;
struct sceGsFinish;
struct sceGsFrame;
struct sceGsPrmodecont;
struct sceGsScissor;
struct sceGsTest;
struct sceGsTrxdir;
struct sceGsTrxpos;
struct sceGsTrxreg;
struct sceGsXyoffset;
struct sceGsZbuf;
struct sceGsDispEnv;
struct sceGsDrawEnv1;
struct sceGsStoreImage;
struct sceGsGParam;
struct sce_stat;
struct sce_dirent;
struct StashInfo;
struct _checksum_block;
struct _checksum_info;
struct vec3;
enum gameMode_t;
struct GSMEM;
struct LEVELLOAD;
struct SCRN;
struct MonitorData;
struct SpaceDef;
struct GadgetBankDef;
struct QuadDef;
struct IMobyData_t;
struct ChunkCollData;
struct Path;
struct MobyVar;
struct TargetVars;
struct BounceVars;
struct FlyVars;
struct ObjectiveLogic;
struct ObjectiveVars;
struct FontMetric;
struct FontKerning;
struct FontFileHeader;
enum FontNames;
struct sceCdCLOCK;
struct GameSettings;
struct LobbyControllerSetup;
struct timeDeathMatch;
struct fragDeathMatch;
struct siegeMatch;
struct gameModeStruct;
struct generalStatStruct;
struct siegeMatchStatStruct;
struct deadMatchStatStruct;
struct cameraMode;
struct profileStruct;
enum NWLobbyInitToType;
struct tRecentPlayerInfo;
struct tTeamStats;
struct tGameOverData;
enum MissionLoadState;
struct MISSIONLOAD;
struct w_2legAnim;
struct w_legData;
struct w_2legData;
struct Cuboid;
struct CameraHeroData;
struct IOPVagStreamMonitor;
struct datablock;
struct _gadget;
struct gadgetwad;
struct SoundInstance;
struct _sound_data;
struct _sound_globals;
enum eLevelID;
struct GadgetPrice;
struct GadgetFPSData;
struct GadgetLevels;
struct GadgetDef;
struct GadgetLevelDef;
struct GadgetMegaLevelInfo;
enum eModBasicType;
enum eModPostFXType;
enum eModWeaponType;
struct ModBasicEntry;
struct ModPostFXEntry;
struct ModWeaponEntry;
enum e_MOD_Levels;
struct ModPrices;
struct GadgetUpgMods;
struct ModBasicDef;
struct ModPostFXDef;
struct ModWeaponDef;
struct PAD;
struct RSA_KEY;
enum NetConnectionType;
enum NetAddressType;
struct NetAddress;
struct NetAddressList;
struct NetConnectionInfo;
enum NetOwnershipStatus;
enum NetObjectOwnershipType;
struct NetJoinInParams;
struct NetTypeFloatVector3;
enum MGCL_TRUST_LEVEL;
struct MediusServerAuthenticationRequest;
struct MediusServerConnectGamesRequest;
struct tNW_PlayerPadInputMessage;
struct tNW_PlayerWarpMessage;
struct tNW_GadgetEventMessage;
struct GadgetEvent;
struct GadgetEntry;
struct GadgetBox;
struct tNW_PlayerData;
struct tNW_PlayerPadInputMessageListElem;
struct tNW_Player;
struct tGadgetConstants;
struct HelpDatum;
struct MissionQueueCell;
struct MF_MissionSave;
struct MF_LevelSave;
struct memcard_saveinfo;
struct memcard_data;
struct memcard_globals;
struct _BotSave;
struct music_Loc;
struct music_Track;
struct music_Playing;
struct music_Globals;
struct fsAABuff;
struct SpaceHeader;
struct _Flags;
struct astrmManager;
struct gadgetCacheSlot;
struct gadgetCacheMgr;
enum IOPMODULEFUNCTIONSET;
struct IOPMODULELOAD;
struct IOPMODULELOADQUEUE;
struct ST_PlayerData;
struct ST_EnemyKillInfo;
struct LoadLogEntry;
enum LoadType;
struct InitParams;
struct _Host;
struct _cddvd;
struct _host;
struct DeviceArgs;
struct _file;
struct _mission_bank;
struct LoadArgs;
struct FsDesc;
struct NetTypeObject;
struct Polar;
struct sceMcIconSys;
struct sceMcStDateTime;
struct sceMcTblGetDir;
struct COLL_DAM_OUT;
struct COLL_DAM_IN;
struct mobyfuncs;
struct SpawnPoolInterface_t;
struct MoveVars_V2;
struct FlashVars;
struct SuckVars;
struct BogeyVars;
struct FpsCamVars;
struct FontWindow;
struct PartInstance;
struct Part024;
struct t_FrustumPlanes;
struct CameraFov;
struct CameraControlActivation;
struct PolarSm;
struct CameraControlMods_0;
struct UpdateCam;
struct CameraStatics;
struct CamBlenderPosQuat;
struct CamBlenderPolarQuat;
struct CamBlenderData;
struct CamBlender;
struct CameraWidget;
struct CameraShake;
struct CameraExternal;
struct GAMECAMERA;
enum HERO_STATE_ENUM;
enum HERO_TYPE_ENUM;
struct Gadget;
struct tNW_PlayerStateMessage;
struct tNW_GetHitMessage;
struct Gid;
struct Guber;
struct HeroMove;
struct HeroTimers;
struct HeroColl;
struct HeroGround;
struct HeroTrack;
struct HeroAnim;
struct HeroJoints;
struct HeroAnimLayers;
struct HeroTweaker;
struct HeroFps;
struct HeroWeaponPosRec;
struct HeroWalkToPos;
struct HeroSpecialIdleDef;
struct HeroSurf;
struct HeroSwim;
struct HeroGrind;
struct HeroShadow;
struct HeroEyes;
struct HeroNPJumpThrustStage;
struct HeroJumpNonParab;
struct HeroJump;
struct HeroLockOn;
struct HeroFireDir;
struct HeroZip;
struct HeroThrust;
struct HeroTurn;
struct HeroWalk;
struct HeroAttack;
struct HeroAttackDef;
struct HeroMobys;
struct HeroCharge;
struct HeroHotspots;
struct HeroWind;
struct HeroDust;
struct HeroFall;
struct HeroLedge;
struct HeroTractorBeam;
struct HeroGrapple;
struct HeroPullShot;
struct HeroDynamo;
struct HeroSwing;
struct HeroQuickSand;
struct HeroHeadIdle;
struct HeroTailIdle;
struct HeroQueuedSound;
struct HeroCommand;
struct HeroPlayerConstants;
struct MotionBlur;
struct Hero;
struct SoundDef;
struct FrontEndMenuNode;
struct BootMemoryMap;
struct update112;
struct update122;
struct TrackVars;
enum MediusAccountStatus;
enum MediusCallbackStatus;
struct MediusAccountGetProfileResponse;
struct ChunkVars;
struct PointLight;
struct update639;
struct M639_paramInit;
struct npcStep;
struct ArmorVars;
struct update775;
struct Weapon_ThirdPerson;
struct Weapon_Interface_t;
struct actuatorWave;
struct update4244;
struct Tweaker;
struct MoveVars;
struct CameraControlCollision;
struct Gadget_HackerRayTargetInterface_t;
struct tDR_Profile;
struct tDR_PositionHistory;
struct tDR_Vars;
struct pad_frame;
enum FX_QuadSTSetup_e;
struct update4246;
struct Vehicle;
struct VehicleBase;
struct VehicleInterface_t;
enum FX_TEXTURE_ENUM;
struct tNW_ShotSpawnMessage;
enum FX_BlendModes_e;
struct MoveVarsAnimCache;
enum FXU_CubicLineStyles_e;
struct FXU_CubicLineStatic_t;
struct FXU_CubicLineEndPoint_t;
struct StickVars;
struct update4249;
struct SpiderTankControllerInterface_t;
struct SpiderTankMainInterface_t;
struct initStruct9532;
struct update8340;
struct Part023;
enum FXU_Drawn_e;
struct update5025;
struct update9475;
enum e_StrandEndPoints;
struct initStruct8076;
struct update8374;
struct st_t;
struct cameraShared;
struct CamCollGridPrim;
struct CameraControlPosition_0;
struct CameraControlRotation_0;
struct CameraControlTarget_0;
struct CameraControlOffset_0;
struct CameraControlUser_0;
struct CameraControlCollision_0;
enum NetThresholdMethod;
struct NetTypeBroadcastSchedule;
struct NetTypeField;
struct NetTypeStructure;
struct Sphere;
struct M9738_Interface_t;
struct PadStream;
struct LocalHero;
struct EnemyTypeTag;
struct CameraControlLook_4;
struct camera4;
struct CameraControlTarget;
struct CameraControlPosition;
struct CameraControlRotation;
struct CameraControlMobyDriven;
struct camera5;
struct update4234;
struct update8439;
struct sceDevVu0Cnd;
struct npcstring;
struct npcVars;
struct ReactVars;
struct TransportVars;
struct EffectorVars;
struct RoleVars;
struct CommandVars;
struct NavigationVars;
struct SubVars;
struct GrindPath;
struct update8227;
struct update8244;
struct M8244_Interface_t;
struct update6736;
enum M6736_Type;
struct update7326;
enum FXU_CyclicalFadeTypes_e;
struct FXU_CubicLineSet_t;
struct FXUtilsInterface;
struct update8263;
struct update8299;
struct EnvMonitorData;
struct Part074_fixed;
struct update167;
struct LinePart;
struct update6244;
struct update4236;
struct tNW_ShotHitMessage;
struct CML_OUT;
struct update9771;
struct update4231;
struct M4231_ShotStats;
struct update4261;
struct M3303_RISING_SPARKLE_EMITTER;
struct M3303_RISING_SPARKLE_PARTICLE;
struct M3303_BOLT_EXP;
struct update3303;
struct M9454_RISING_SPARKLE_EMITTER;
struct M9454_RISING_SPARKLE_PARTICLE;
struct update9454;
struct update9456;
struct update9450;
struct DeathEffectData;
struct update6295;
struct update3709;
struct M9532_PillarInfo;
struct update9532;
struct CameraControlFOV_19;
struct update4247;
struct update9396;
struct update9479;
struct Stream;
struct StreamInterface;
struct Channel4f;
struct iBehavior;
struct BindingNode;
struct TimeLine;
enum eDataSourceTypes;
struct DataSource;
struct iObject;
struct Channel2f;
struct Channel1f;
struct ChannelARGB;
struct ArrayList<int>;
enum ePlayDirection;
enum ePlayControl;
struct Canvas;
struct iFrame;
struct WidgetRectangle;
struct Event;
struct EventArray;
struct EventResponseTOC;
struct EventQue;
enum eEngineState;
struct GuiState;
struct NetEvent;
struct GuberEvent;
struct master6908;
struct update6908;
struct M6908_Interface_t;
struct WPN_ProjectileCollisionParams;
struct update7257;
struct update9458;
struct update9747;
enum FXU_LerpStyle_e;
struct FXU_ContrailDataPoint_t;
struct FXU_ContrailStyle_t;
struct FXU_ContrailInstance_t;
struct update9923;
struct update428;
struct fxPillarInfo;
struct update8076;
struct update6298;
struct M8454_WhipParameters;
struct update8454;
struct Part045;
struct ST_SkillPointMobyInterface;
struct update4265;
struct update6249;
enum CommandTypes;
struct IssuedCommand;
struct FXU_DistortionShellStyle_t;
struct update9738;
struct update9867;
struct Status;
struct CreateParams;
struct PlayParams;
struct astrmCallback;
enum Device;
struct _CdDvd;
struct FileDesc;
struct RequestDesc;
struct sceGsLoadImage;
struct PifHeader;
struct PifParser;
struct ImportCamera;
struct CamCollGridEntry;
struct CameraTweaks;
union CamCtrl;
struct CAMERA;
struct LENSFLARE;
struct SUB_RETICULE;
struct RETICULE;
struct Cylinder;
struct Pill;
struct camera3;
struct _sif_receive_data;
struct _checksum;
struct checksum_cd;
struct HelpMsg;
struct LetterSub;
struct CreditData;
struct CreditSequence;
struct CreditSequenceContainer;
struct SpriteDef;
struct ViewContext;
struct FrustumDef;
struct GifLoad;
struct EffectTex;
struct ScreenVBEffect;
struct ScreenInsertEffect;
struct VisibilityCheck;
struct MobyAuxDraw;
struct TieInstance;
struct ShrubInstance;
struct RegisteredDrawRoutine_t;
struct vec2;
enum FX_TexClamp_e;
enum FX_FogMode_e;
enum FX_StripClipped_e;
struct FXRegistrySystemInterface;
struct _2legAnim;
struct legData;
struct _2legData;
struct FXRegistrySystemInternal;
struct FXU_ExplosionStreamerParams_t;
enum FXS_PartRockColors_e;
enum FXS_Fire_Styles_e;
struct FXSpawningInterface;
struct M2491_Interface_t;
struct M7721_Interface_t;
struct M8207_Interface_t;
struct M8216_Interface_t;
struct M8376_Interface_t;
struct M8215_Interface_t;
struct M10080_Interface_t;
struct M10094_Interface_t;
struct FXU_RingChainEle_t;
struct FX_HDB_Laser_t;
struct FX_HDB_DrawInfo_t;
struct FX_LightningInstance;
struct FX_LightningClass;
struct ConeData;
struct update3652;
struct update5548;
struct FX_HDB_PieceInfo_t;
struct GSQuad_Cluster;
struct GSQuad_Header;
struct LavaStream;
struct FlockVars;
struct FlockMobyConstants;
struct fontLetter;
enum FontAlignment;
struct tNW_DownloadedTweaks;
struct freeze_t;
enum eFreezeDrawModes;
struct CameraTrainingInterface;
struct GenTexture;
struct GenObject;
enum screenMode_t;
struct COLLOUTPUT;
struct HERO_COLL_GROUP;
struct HERO_COLL_GRID;
struct AreaMapUnit;
struct npcMode;
struct Area;
struct AreaList;
struct QueueNode;
struct MovieQueue;
struct tTriMode;
struct WeaponMemoryInfo;
struct Lse;
struct MediusUniverseVariableInformationResponse;
struct MissionData;
struct LevelControllerInterface;
struct _Monitor_t;
struct _MissionMonitor_t;
struct MediusGenericChatFilter;
struct Bot_Communication;
struct IM_LoadBalancer;
struct IM_PointList;
struct IM_SectorCover;
struct IM_Sector;
struct DynamicMobyGroup;
struct GC_EnemyAttackInformation;
struct GC_GroupAttackInformation;
struct GC_Preferences;
struct GC_DangerRatingParameters;
struct GC_Role;
struct GC_SingleSpawnData;
struct GC_SpawnReference;
struct GC_Triggers;
struct GC_Wave;
struct GC_GroupController;
struct GC_ReclamationRef;
struct Group_Spawn_Capability_t;
struct Group_Externally_Spawned_Interface_t;
struct Group_External_Spawner_Interface_t;
struct ObstructionInterface;
struct GC_RoleBiasData;
struct GC_ScorerData;
enum STREAM_State_e;
struct HelpDef;
struct Help_QueueItem;
struct Help_QueueData;
struct Help_EventItemInfo;
struct Help_EventInfo;
struct hud_header_t;
struct icon_t;
struct frame_t;
struct frameTex_t;
struct framePal_t;
struct hudGlobals;
struct IM_AdvertisingFeature;
struct IM_InfluenceShape;
struct IM_OccupancyCBData;
struct IM_AdvertisingAssistant;
struct TiePacket;
struct TieLod;
struct TieClass;
struct EEVagStreamMonitor;
struct ezNetCtlStatus;
struct sceSifDmaData;
struct irxwad;
struct IOPMODULEFUNCTIONTABLE;
struct DirLight;
struct DL_Data;
struct PL_Data;
struct leveldatawad;
struct missiondatawad;
struct ObjectiveInterface;
struct PlanetTransportInterface;
struct TieInstData;
struct ShrubInstData;
struct sky_cluster;
struct sky_shell;
struct LevelHeader;
struct LevelChunkDef;
struct NpcActorHeader;
struct MobySoundRemapHeader;
struct update8355;
struct loadgadget;
enum mcstate_t;
enum MCSTATE_Response;
enum MCSTATE_Cmd;
struct mc_data;
struct dpoint_t;
struct _mctag_t;
struct _mapIcon_t;
struct map_t;
union QWdata;
struct UI3D_bone;
struct UI3D_header;
struct UI3D_object;
struct UnlockData;
struct PostMissionSceneDef;
struct MF_MissionRewardData;
struct MF_MissionDepreciationData;
struct MF_MissionRewards;
struct SpawnPointData;
struct SpawnPointList;
struct StartSpawnPoint;
struct MidMissionMobySave;
struct TriggerInterface;
struct update3950;
struct CutsceneInterface;
struct MobyLoadStack;
struct t_LightBlender;
struct t_LightCuboid;
struct M9732_Interface_t;
struct Moby2dCon;
struct JointCacheEntry;
struct PoseCacheEntry;
struct SnowCube;
struct SnowData;
struct TractorVars;
enum FlashTypes;
struct KickVars;
struct MobyWalk;
struct HuntVars;
struct DestroyInterface;
struct jumpVars;
struct HeadTurnVars;
struct LookVars;
struct MeanderVars;
struct ConstructTweaker;
struct ConstructElem;
struct TieMirrorVars;
struct NavArea;
struct pitchVariation;
struct DamagePrim;
enum HERO_SEE;
struct HeroStats;
struct FlameThrower;
struct AttachVars;
struct XPBundle;
struct ContextCommand;
struct CommandData;
enum BotAbilityEnum;
struct BotAbility;
struct update1503;
struct update7136;
struct update7383;
struct M7383_Interface_t;
struct update9321;
struct update8309;
struct M2784_AmmoSpawnInterface_t;
struct update8419;
struct update8363;
struct BoltInfo;
struct MobyAutoTargetScoreListElem;
struct SoundTrigger;
struct NavData;
struct NavWayPnt;
struct NavEffector;
struct NavBound;
struct NavOccluder;
struct navarea;
struct DistDatum;
enum rmc_t;
struct PushedMode;
struct VehicleSpawnPadInterface_t;
struct M9897_Interface_t;
enum STREAM_Type_e;
struct navg_edge;
struct navg_path;
struct navg_clusterPath;
struct navg_neighbor;
struct navg_node;
struct navg_cluster;
struct navg_pathList;
struct navg_clusterPathList;
struct navg_sector;
struct navg_partition;
struct navg_newPathElement;
struct navg_newPathElement2;
struct navg_system;
struct PartTex;
struct Part000;
struct Part002;
struct Part003;
struct Part004;
struct Part005;
struct Part006Deltas;
struct Part006;
struct Part007;
struct Part008;
struct Part009;
struct Part010;
struct Part011;
struct Part012;
struct Part013;
struct Part014;
struct Part015;
struct Part016;
struct Part018;
struct Part020;
struct Part021;
struct Part022;
struct Part025;
struct Part026;
struct Part027;
struct Part028;
struct Part030;
struct Part031;
struct Part032;
struct Part034;
struct Part035;
struct Part036;
struct Part037;
struct Part038;
struct Part039;
struct Part040;
struct Part041;
struct Part042;
struct Part043;
struct Part044;
struct Part046;
struct Part048;
struct Part049;
struct Part050;
struct Part052;
struct Part053;
struct Part054;
struct Part055;
struct Part057;
struct Part058;
struct Part059;
struct Part060;
struct Part061;
struct Part062;
struct Part064;
struct Part065;
struct Part066;
struct Part067;
struct Part068;
struct Part069;
struct Part072;
struct Part074;
struct Part075;
struct Part078;
struct Part087;
struct Part090;
struct Part091;
struct Part071;
struct Part079;
struct Part081;
struct Part082;
struct Part083;
struct Part084;
struct Part085;
struct Part086_fixed;
struct Part086;
struct Part089;
struct Part092;
struct Part094;
struct Part096;
struct Part097;
struct Part098;
struct Part099;
struct Part100;
struct Part101_Fixed;
struct Part101;
struct Part102;
struct Part104;
struct Part105;
struct Part106;
struct Part107;
struct Part108;
struct Part109;
struct Part110;
struct Part112;
struct Part114;
struct Part115Init;
struct Part115;
struct Part116;
struct Part126;
struct Part127;
struct Part128;
struct Part118;
struct Part119;
struct Part121;
struct Part122;
struct Part123;
struct Part124;
struct Part125;
struct update211;
struct update78;
struct QDS_ParticleSwarm;
struct QDS_Particle;
struct QDS_LinePart;
struct Part029_Style;
struct Part080;
struct MapNameDataCell;
struct HudState_State;
struct DataSourceWidget3d;
union SizeOfBiggestChannel;
enum NetStreamMediaAudioType;
struct NetStreamMediaAudioPlayData;
enum NetCharacterEncodingType;
enum NetLanguageType;
struct NetTypeSystemMessageData;
struct MediusSystemMessageEntry;
struct HudWidgetTex;
struct HudWidget;
struct IgeMemoryMap;
struct MPTeamData_s;
enum ST_RewardType;
struct ST_MissionRewardData;
struct GuiMain_PlayerData_s;
struct MPData_s;
struct DataSourceImageBuffer;
struct ConcreteLoadedImageBuffer;
struct ConcretePreLoadedImageBuffer;
struct PIBData_s;
struct PIBHandle_s;
struct PendingLoads_s;
struct MenuButton_s;
struct GuiHud_PanelData_s;
struct GuiHud_CommonData_s;
struct GuiHud_PlayerData_s;
struct GuiMenu_CommonData_s;
struct GuiMenu_PlayerData_s;
struct GuiMenu_Screen_s;
struct iHeap;
struct Lockable;
struct Engine;
struct EngineData;
struct WidgetText;
struct WidgetHollowRectangle;
struct WidgetTextArea;
struct GuiSupport_Box_s;
struct xy_t;
struct GuiSupport_Cursor_s;
struct GuiSupport_Frame_s;
struct GuiSupport_DFrame_s;
struct GuiSupport_Dialog_s;
struct GuiSupport_Menu_s;
struct GuiSupport_CommonData_s;
struct GuiSupport_PlayerData_s;
struct CtlBox;
struct Panel;
struct ListItemData;
struct CtlList_Item_s;
struct CtlList;
struct BoundingRectangle;
struct iFrameLayoutManager;
struct IgeSmartPtr<iFrame>;
struct IgeSmartPtr<iFrameLayoutManager>;
struct tFrameContainerData;
struct FrameContainer;
struct bootwad;
struct DataSourceIcon;
struct ConcreteIconDataSource;
struct ConcreteDataSourceWidget3d;
struct HudInfo_SpecialKillsData_s;
struct HudInfo_MasterData_s;
struct HudInfo_PlayerData_s;
struct ArtInstanceHeader;
struct HealthHud_PlayerData_s;
struct HudAmmo_PlayerData_s;
struct rectangle;
enum tNW_GameType;
struct RewardData;
struct VendorData;
struct MissionDef;
struct _tuning;
struct Debug;
struct HudRadar_Blip_s;
struct HudRadar_BlipParams_s;
struct HudRadar_CommonData_s;
struct HudRadar_PlayerData_s;
struct BoltHud_PlayerData_s;
struct SlotData_s;
struct DPadCommand;
struct BotHud_CommonData_s;
struct BotHud_PlayerData_s;
struct HudMPInfo_CommonData_s;
struct HudMPInfo_PlayerData_s;
struct HudMPVote_CommonData_s;
struct HudMPVote_PlayerData_s;
struct TeamData_s;
struct NodeData_s;
struct HudMPNode_CommonData_s;
struct HudMPNode_TeamData_s;
struct PWidgetData_s;
struct HudMPScore_CommonData_s;
struct ST_MissionData;
struct Stat_s;
struct HudComplete_CommonData_s;
struct StatData_s;
struct PrizeData_s;
struct HudBoss_CommonData_s;
struct MenuMain_PlayerData_s;
struct ScreenDef_s;
struct Option_s;
struct MenuControls_PlayerData_s;
struct MenuControlView_PlayerData_s;
struct MenuAudioVisual_PlayerData_s;
struct LevelDef;
struct ListItem_s;
struct MenuMission_PlayerData_s;
struct MenuPlanet_PlayerData_s;
struct MenuWeapon_PlayerData_s;
struct WeaponIcon;
struct ModItem_s;
struct ButtonData_s;
struct ArenaGroup_s;
struct MenuArena_PlayerData_s;
struct VendorItem;
struct MenuVendor_CommonData_s;
struct GameSlot_s;
struct GameSave_s;
struct MenuLoad_PlayerData_s;
struct MenuEquipment_PlayerData_s;
struct MenuCinematics_PlayerData_s;
struct ST_SkillPointInfo;
struct MenuSkills_PlayerData_s;
struct MenuHelplog_PlayerData_s;
struct MenuCheats_PlayerData_s;
struct Cheat_s;
struct MenuMoves_PlayerData_s;
struct Difficulty_s;
struct DialogDifficulty_PlayerData_s;
enum ePAUSE_TYPE;
enum ePAUSE_EXIT_REQUESTS;
struct PIB_t;
struct PauseModeData;
struct MenuBotVendor_CommonData_s;
struct MenuStats_CommonData_s;
struct EnemyItem_s;
struct RankOMeterInterface;
struct MenuLeaderboard_CommonData_s;
struct RankingList_s;
struct MenuConceptArt_CommonData_s;
struct MenuCharacters_CommonData_s;
struct MenuRobotCutaways_CommonData_s;
struct MenuSkinScreen_CommonData_s;
struct List_Item_s;
struct MenuCardViewer_CommonData_s;
struct SaveDataEntry;
struct SaveDataBlock;
struct continueData;
struct continuePoint;
struct SHADOW_MOBY;
struct ShrubInstPal;
struct ShrubBillboard;
struct ShrubPacket;
struct ShrubClass;
struct ShrubClassLookupClass;
struct sky_sprite;
struct sky_tex;
struct SKY;
struct lineEmitter;
struct StashBlock;
struct _modulestatus;
enum SM_stateRet_t;
struct SM_stateMachineInput_t;
struct StateHistory;
struct STD_COLLOUTPUT;
struct STD_COLL_DAM_OUT;
struct StdPS2Input;
struct GMapTable_t;
struct vbGadget_t;
struct LevelItemPrice;
struct _monitorGadgetAttributes;
struct TBL_EnemySkinDef;
struct TBL_EnemySkinInfo;
struct WIND;
struct HeroSkinShadowLookup;
struct tChecksumConstants;
struct Tfrag;
struct TieClassLookupClass;
struct MobyUpdateProfile;
struct tD_CHCR;
struct sceDmaChan;
struct WaterTileBuf;
struct WaterTile;
struct WaterTileBox;
struct WaterTileConst;
struct RunningWater;
struct OCEAN;
struct StripHeader;
struct ThermCollDataHeader;
struct TherminatorDataRef;
struct update4018;
struct WPN_VelOrientationCache;
struct WPN_JointManipCache;
struct WPN_TargetCache;
struct WPN_ActiveProjectileLimiter;
struct WPN_RegisteredThermWater;
struct WPN_GlobalTherminatorInfo;
struct WPN_BunkerClassRegistryData;
struct WPN_UpgradeModeVars;
struct M9787_HoloshieldCoverInterface_t;
struct M9819_Interface_t;
struct Widget2D;
struct LinearMemoryAllocator;
struct FreeNode;
struct ConstantBlockSizeMemoryManager;
struct TimeLineData;
struct KeyFrameDataNode;
enum eInterpolationType;
struct KeyFramerData;
struct iInterpolator3f;
struct KeyFrameDataParser;
struct TestKeyFramer;
struct HermiteTimeEnvelope;
struct LinearInterpolator3f;
struct LinearColorInterpolator3f;
struct SimpleKeyFramer;
enum eTVModes;
struct iGraphicsObject;
struct Widget3D;
struct WidgetSprite;
enum eTextAlignment;
struct WidgetSlider;
struct packedWidgetTableEntry;
struct Rc2HudMoby;
struct sceDmaPacket;
struct sceIpuDmaEnv;
enum sceMpegStrType;
enum sceMpegCbType;
struct sceMpegCbDataStr;
struct sceMpeg;
struct TimeStamp;
struct ViBuf;
struct VideoDec;
struct ReadBuf;
struct VoData;
struct VoTag;
struct VoBuf;
struct SpuStreamHeader;
struct SpuStreamBody;
struct _AudioDec;
struct StrFile;
struct sceIpuRAW8;
struct SemaParam;
union QWORD;
struct sceMpegCbDataError;
struct sceMpegCbDataTimeStamp;
union sceMpegCbData;
struct dbg_menu;
struct t_IopModuleEntry;
struct t_TransitionInfo;
struct t_Transition;
struct SFXBlock;
struct t_TransitionHdr;
struct t_MobyInstanceHdr;
struct t_TransitionData_Undefined;
struct t_TransitionData_E3;
struct t_TransitionData_Space;
struct t_TransitionData_ShuttleInterior;
struct dc_floatdata;
struct SandStormParms_t;
enum PE_EnvironmentEffectsType_e;
struct M8226_Interface_t;
struct t_PostEffectsInfo;
struct TN_Info;
struct TN_Data;
struct SkillPointDef;
enum ST_Vehicles;
struct ConfigUtil_File;
struct ConfigUtil_OutputElement;
struct ConfigUtil_Output;
struct ConfigUtil_CodexElement;
struct ConfigUtil_Codex;
struct StdTextPile;
struct MathUtilities;
enum NetConnectStatus;
enum NetConnectFailureReason;
enum NetClientStatus;
enum NetErrorCode;
enum NetDisconnectReason;
struct NetTypeConnectCallbackData;
struct NetTypeClientConnectCallbackData;
struct NetTokenParams;
enum NetStreamMediaGridType;
struct NetAudioDataCharacteristics;
struct NetColorArray;
struct NetVideoDataCharacteristics;
struct NetStreamMediaParams;
struct NetConnectInParams;
struct NetDisconnectParams;
struct NetLocalizationParams;
enum EnumNetPlatformID;
struct NetDmeVersion;
struct NetUpdateError;
struct NetUpdateConnErrors;
enum NetSessionType;
struct NetLANPeerDesc;
struct NetData;
struct NetConnectOutParams;
struct NetHostPeerToPeerInParams;
struct NetHostPeerToPeerOutParams;
struct NetTypeLookupParams;
struct NetLANFindCallbackDataArgs;
struct NetLANFindInParams;
enum NetClientEventType;
struct NetRemoteClientEventData;
struct NetCompletionData;
struct NetSMChangeData;
struct NetJoinOutParams;
enum MGCL_ERROR_CODE;
enum MGCL_GAME_HOST_TYPE;
struct MediusServerCreateGameOnMeRequest;
enum MediusErrorCode;
enum MediusBuddyAddType;
enum MediusGameHostType;
enum MediusLadderType;
enum MediusWorldStatus;
struct MediusAccountUpdateStatsRequest;
struct MediusAddToBuddyListFwdConfirmationRequest;
struct MediusEndGameReport;
struct MediusGameInfoResponse;
struct MediusGetLadderStatsWideRequest;
struct MediusGetLadderStatsWideResponse;
struct MediusGetMyIPRequest;
struct MediusGetMyIPResponse;
struct MediusPlayerReport;
struct MediusStatusResponse;
struct MediusUpdateClanStatsRequest;
struct MediusUpdateClanStatsResponse;
struct MediusUpdateLadderStatsWideRequest;
struct MediusWorldReport;
enum eNW_STATE;
enum eNW_JoinResponse;
enum eNW_PlayerType;
struct tNW_PlayerInfoStats;
struct TourneyRoundInfo;
struct TourneyRoundJoinInfo;
struct tReservations;
struct tNW_Info;
struct sceDNAS2UniqueID;
struct _nwGameFindUserData;
enum MediusAccountType;
enum MediusApplicationType;
enum MediusChatMessageType;
enum MediusBinaryMessageType;
enum MediusClanChallengeStatus;
enum MediusClanInvitationsResponseStatus;
enum MediusClanMessageStatus;
enum MediusClanStatus;
enum MediusConnectionType;
enum MediusLobbyFilterMaskLevelType;
enum MediusLobbyFilterType;
enum MediusPlayerStatus;
enum MediusTimeZone;
enum MediusWorldGenericFieldLevelType;
enum MediusWorldSecurityLevelType;
struct MediusPlayerOnlineState;
struct MediusAccountGetIDResponse;
struct MediusAccountLoginResponse;
struct MediusAccountRegistrationResponse;
struct MediusAddPlayerToClanRequest;
struct MediusAddToBuddyListResponse;
struct MediusAddToIgnoreListResponse;
struct MediusChannelInfoResponse;
struct MediusChannelList_ExtraInfoResponse;
struct MediusGenericChatFwdMessage;
struct MediusBinaryFwdMessage;
struct MediusGenericChatSetFilterResponse;
struct MediusCheckMyClanInvitationsResponse;
struct MediusClanLadderListResponse;
struct MediusClanLadderPositionResponse;
struct MediusClearGameListFilterResponse;
struct MediusConfirmClanTeamChallengeResponse;
struct MediusCreateChannelResponse;
struct MediusCreateClanResponse;
struct MediusDeleteClanMessageResponse;
struct MediusDisbandClanResponse;
struct MediusErrorMessage;
struct MediusFindPlayerResponse;
struct MediusFindWorldByNameResponse;
struct MediusGameList_ExtraInfoResponse;
struct MediusGameWorldPlayerListResponse;
struct MediusGetAllClanMessagesResponse;
struct MediusGetAnnouncementsResponse;
struct MediusGetBuddyList_ExtraInfoResponse;
struct MediusGetIgnoreListResponse;
struct MediusGetClanByIDResponse;
struct MediusGetClanByNameResponse;
struct MediusGetClanInvitationsSentResponse;
struct MediusGetClanMemberList_ExtraInfoResponse;
struct MediusGetClanTeamChallengeHistoryResponse;
struct MediusGetClanTeamChallengesResponse;
struct MediusGetLobbyPlayerNames_ExtraInfoResponse;
struct MediusGetLocationsResponse;
struct MediusGetMyClanMessagesResponse;
struct MediusGetMyClansResponse;
struct MediusGetPolicyResponse;
struct MediusGetServerTimeResponse;
struct MediusGetTotalRankingsResponse;
struct MediusGetWorldSecurityLevelResponse;
struct MediusInvitePlayerToClanResponse;
struct MediusJoinChannelResponse;
struct MediusJoinGameResponse;
struct MediusLadderList_ExtraInfoResponse;
struct MediusLadderPosition_ExtraInfoResponse;
struct MediusModifyClanMessageResponse;
struct MediusPickLocationResponse;
struct MediusPlayerInfoResponse;
struct MediusReassignGameMediusWorldID;
struct MediusRemoveFromBuddyListResponse;
struct MediusRemoveFromIgnoreListResponse;
struct MediusRemovePlayerFromClanResponse;
struct MediusRequestClanTeamChallengeResponse;
struct MediusRespondToClanInvitationResponse;
struct MediusRespondToClanTeamChallengeResponse;
struct MediusRevokeClanInvitationResponse;
struct MediusRevokeClanTeamChallengeResponse;
struct MediusSendClanMessageResponse;
struct MediusSessionBeginResponse;
struct MediusSessionEndResponse;
struct MediusSetGameListFilterResponse;
struct MediusSetLobbyWorldFilterResponse;
struct MediusTextFilterResponse;
struct MediusTransferClanLeadershipResponse;
struct MediusVersionServerResponse;
struct MediusUniverseNewsResponse;
struct MediusFile_tag;
struct MediusFileCreateResponse_tag;
struct MediusFileUploadResponse_tag;
struct MediusFileCloseResponse_tag;
struct MediusFileDownloadResponse_tag;
struct MediusFileDeleteResponse_tag;
struct MediusFileListResponse_tag;
struct tNW_MediusCallbacks;
struct RSA_KEYPAIR;
struct NetUsePeerToPeerInParams;
struct NetUseObjectsInParams;
struct NetMemoryCallbackParams;
enum NetConnectivityType;
struct NetInitializeInParams;
struct NetInitializeOutParams;
struct stAudioControlDmeObject;
struct stAudioInfo;
struct sceNetcnfifData;
struct NetErrorThresholdCallbackData;
struct MediusPlayerInfoRequest;
struct tNW_ClientJoinMessage;
struct tNW_JoinResponseMessage;
struct tNW_PlayerSetupMessage;
struct tNW_PlayerHasHeadSetMessage;
struct tNW_GameOptions;
struct mpGameInitSettings;
struct tNW_GameSettings;
struct MediusAccountDeleteRequest;
enum MGCL_ALERT_LEVEL;
struct MediusServerReportType;
struct tNW_MGCL_Data;
enum lgAudPinID;
struct lgAudMixerDesc;
struct lgAudSamplingFormat;
struct lgAudSamplingRequest;
struct lgAudOpenParam;
struct lgAudDeviceDesc;
enum eCOMMON_RESULT;
enum AsyncOp;
enum AsyncOpState;
struct Schedule;
struct NetStreamMediaAudioRecordData;
struct NetStreamMediaChannelInfo;
struct NetStreamMediaChannelStateData;
struct NCI_CODEC_IO_BLOCK;
struct NCI_CODEC_INFO_BLOCK;
struct NMS;
struct _sifm_rpc_data;
struct _sifm_client_data;
struct sceInetAddress;
struct sceInetParam;
struct IPAddress;
struct IPEndPoint;
struct nwSocket;
enum eINTERP_TYPE;
struct KeyFramerBehavior2f;
struct Widget3d_2D;
struct GarbageCollector;
struct arrayCell;
struct HashTable<iObject,1024>;
struct HashTable<TimeLine,48>;
struct CanvasData;
struct Channel3f;
struct Channel1UInt;
enum eHeapType;
struct GuiNullState;
enum eCONTROL_FLAGS;
enum eScreenTypes;
struct Scissoring_s;
struct DrawParams;
struct Widget3d;
enum eX_WINDOWTEXT_ALIGNMENT;
enum eY_WINDOWTEXT_ALIGNMENT;
struct HashTable<bool ()(iObject *, float, float),8>;
struct Command<bool ()(iObject *, float, float),8>;
struct HashTable<bool ()(iObject *, float &, float &),8>;
struct Command<bool ()(iObject *, float &, float &),8>;
struct HashTable<bool ()(iObject *, char *),8>;
struct Command<bool ()(iObject *, char *),8>;
struct HashTable<bool ()(iObject *, char **, short int, short int, unsigned int),8>;
struct Command<bool ()(iObject *, char **, short int, short int, unsigned int),8>;
struct HashTable<bool ()(iObject *, float),8>;
struct Command<bool ()(iObject *, float),8>;
struct HashTable<bool ()(iObject *, unsigned int),8>;
struct Command<bool ()(iObject *, unsigned int),8>;
struct HashTable<bool ()(iObject *, unsigned int, unsigned int),8>;
struct Command<bool ()(iObject *, unsigned int, unsigned int),8>;
struct HashTable<bool ()(iObject *, float &),8>;
struct Command<bool ()(iObject *, float &),8>;
struct HashTable<bool ()(iObject *),8>;
struct Command<bool ()(iObject *),8>;
struct HashTable<bool ()(iObject *, float, float, float, float),8>;
struct Command<bool ()(iObject *, float, float, float, float),8>;
struct HashTable<bool ()(iObject *, void *, unsigned int),8>;
struct Command<bool ()(iObject *, void *, unsigned int),8>;
struct HashTable<bool ()(iObject *, unsigned int, bool &),8>;
struct Command<bool ()(iObject *, unsigned int, bool &),8>;
struct HashTable<bool ()(iObject *, unsigned int &, unsigned int &),8>;
struct Command<bool ()(iObject *, unsigned int &, unsigned int &),8>;
struct HashTable<bool ()(iObject *, float &, float &, float &, float &),8>;
struct Command<bool ()(iObject *, float &, float &, float &, float &),8>;
struct HashTable<bool ()(iObject *, unsigned int, unsigned int, unsigned int, unsigned int),8>;
struct Command<bool ()(iObject *, unsigned int, unsigned int, unsigned int, unsigned int),8>;
struct HashTable<bool ()(iObject *, float, float),3>;
struct Command<bool ()(iObject *, float, float),3>;
struct HashTable<bool ()(iObject *, float),3>;
struct Command<bool ()(iObject *, float),3>;
struct HashTable<bool ()(iObject *, unsigned int),3>;
struct Command<bool ()(iObject *, unsigned int),3>;
enum eWINDOWTEXT_SCROLL_ALWAYS;
enum eWINDOWTEXT_SCROLL_DIRECTION;
enum eWINDOWTEXT_SCROLL_ONCE;
struct WidgetTextAreaData;
struct WidgetWheel;
struct Master;
struct VehicleMaster;
struct ShotMaster;
struct BaseMaster;
struct PowerupMaster;
struct Game;
enum eGadgetID;
struct tNW_ConvertToJuggernaut;
struct tNW_KillDeathMessage;
struct HeroOpt;
struct DeathMatchGameData;
struct update191;
struct update6315;
struct update4239;
struct HeroJumpPadInterface;
struct M8309_Interface_t;
struct RemoteHero;
struct tNW_VehiclePosRotUpdateMessage;
struct update10094;
struct update8248;
struct GuberMoby;
struct Base;
struct Team;
struct Powerup;
struct TeamMaster;
struct GuberMobyMaster;
struct tShot;
struct tNW_GameStateMessage;
struct LocalPlayerYourBaseGameData;
struct CTFGameData;
struct FragMsg;
struct PlayerStats;
struct TeamStats;
struct GameData;
struct M9838_Interface_t;
struct NodesOwned;
struct PlayerHillTime;
struct GadgetAvailability;
enum eMpGadgetDamageType;
enum e_GB_SetTypes;
struct MapDef;
struct tNW_Kick;
struct tNW_MobyDestructMessage;
struct t_TransitionData_Lobby;
struct t_TransitionData_Multiplayer;
struct complex int;
enum cmp_type;
enum delay_type;
enum processor_type;
enum mips_abicalls_type;
enum block_move_type;
enum reg_class;
struct mips_frame_info;
struct mips_args;
enum machine_mode;
enum mode_class;
struct DIstruct;
enum  ;
struct exception;
enum __fdlibm_version;
struct sceInetInfo;
struct sceInetPollFd;
struct sceInetIP_MREQ;
struct sceInetRoutingEntry;
struct sceInetParam_b;
struct CID_DATA;
struct CID;
struct RC_KEY;
struct KEY_CHAIN;
struct KEY_MASTER;
struct RT_TOKEN_SYSTEM_INFO;
struct NetRGBArray;
struct NetTypeConnectionInfo;
struct NetTypeObjectInfo;
struct DCT_BLOCK;
struct COLOR_ARRAY;
struct RGB_ARRAY;
struct NetIAddress;
struct NetIAddressList;
struct RT_COMM_CHANNEL_DATA;
struct RSA_BLOCK;
struct SHA_CTX;
struct lint;
struct mallinfo;
struct _types_fd_set;
enum SceStdioFunc;
struct PTREE;
struct RC4_CTX;
struct MD2_CTX;
struct MD4_CTX;
struct MD5_CTX;
struct RT_LIST_NODE;
struct RT_IP2P;
struct RT_UDP_ICONNECTION;
struct RT_UDP_ICHANNEL;
struct NetTypeStreamMediaInfo;
struct CODEC;
struct SEQBLOCK;
struct CSequence;
struct VSEQBLOCK;
struct CVSequence;
struct mbill_TokenResponse;
struct MediusFileAttributes_tag;
struct MediusFileMetaData_tag;
struct MediusFileChecksum_tag;
struct MediusFileCreateRequest_tag;
struct MediusFileUploadRequest_tag;
struct MediusFileUploadServerReq_tag;
struct MediusFileCloseRequest_tag;
struct MediusFileDownloadRequest_tag;
struct MediusFileDownloadStreamRequest_tag;
struct MediusFileDownloadStreamResponse_tag;
struct MediusFileDeleteRequest_tag;
struct MediusFileListRequest_tag;
struct MediusFileUpdateAttributesRequest_tag;
struct MediusFileUpdateAttributesResponse_tag;
struct MediusFileGetAttributesRequest_tag;
struct MediusFileGetAttributesResponse_tag;
struct MediusFileUpdateMetaDataRequest_tag;
struct MediusFileUpdateMetaDataResponse_tag;
struct MediusFileGetMetaDataRequest_tag;
struct MediusFileGetMetaDataResponse_tag;
struct MediusFileSearchByMetaDataRequest_tag;
struct MediusFileSearchByMetaDataResponse_tag;
struct MediusFileCancelOperationRequest_tag;
struct MediusFileCancelOperationResponse_tag;
struct MediusFileUpdateMetaDataResponset_tag;
struct MediusFileReturn_tag;
struct MediusTransactionHeader;
struct MediusMessageDest;
struct MediusMessage_;
struct MediusMessageInterface_;
struct MediusDTypeInterface_;
struct MediusDFieldInterface_;
struct MediusDListInterface_;
struct MediusDRowInterface_;
struct MediusDRow_;
struct MediusDRowNetInterface_;
struct MediusDFieldDef_;
struct MediusDType_;
struct MediusDTypePInterface_;
struct MediusDArgListInterface_;
struct MediusDMetaTypeInterface_;
struct MediusDMetaType_;
struct MediusDArgList_;
struct MediusDListSubscribe_;
struct MediusDListRequest_;
struct MediusDListUpdate_;
struct MediusDInterestCallback_;
struct MediusDList_;
struct MediusDListSubscription_;
enum _RT_HASH_RVAL;
enum _RT_HASH_ITERATOR_TYPE;
struct _RT_HASH_TABLE_IFACE;
struct _RT_HASH_TABLE_DESC;
struct _RT_HASH_TABLE_DATA_DESC;
struct _RT_HASH_TABLE_STATS;
struct _RT_HASH_SEEK_POS;
struct _RT_HASH_BUFFER;
struct _RT_HASH_CRC32_EXT;
struct _RT_HASH_ITERATOR_IFACE;
struct _RT_HASH_TABLE_;
struct _RT_HASH_BUCKET;
struct _RT_HASH_ITEM;
struct _RT_HASH_ITERATOR_;
struct _RT_HASH_ITEM_POOL;
struct cipher_spec3;
union cypher_spec;
struct SSL_CALLBACK_PARAMS;
struct CLIENT_HELLO;
struct SERVER_HELLO;
struct SSL;
struct OIDDATA;
struct ASN1_ITEM;
struct X509NAME;
struct DATETIME;
struct TBSCERTIFICATE;
enum PluginEventEnum;
enum PluginUpdateTypeEnum;
enum eURLSource;
enum BrowserUpdateTypeEnum;
struct TextFieldInfo;
struct DownloadThrobberInfo;
struct CAllContextData_t;
struct SVLoginInfo;
struct SVServerInfo;
enum SVTargetTypeEnum;
struct SVTargetInfo;
struct SVInitializeParams;
enum SVTournamentUpdateState;
struct SVBrowser;
enum InetErrorCode;
struct CError;
enum SV_MSG_SEVERITY_LEVEL;
enum SV_MSG_CATEGORY;
enum MemCardFile;
enum MemCardReadReturnCode;
struct CMemWatch;
struct CMemChunk;
enum CURI_SOCKET;
enum CURIContentType;
struct DownloadBuffer;
struct URIRequest;
struct sProviderEntry;
struct CURISchemeMgr;
enum BrowserLoginResultEnum;
enum BrowserJoinGameResultEnum;
enum BrowserCreateGameResultEnum;
enum BrowserCreateGameModeEnum;
struct CTagInfo;
enum SVPartialFileDownloadInfo;
struct CFileDownloadInfo;
struct SVChronograph;
struct CQueryParam;
struct CQueryParamList;
enum HTTP_SOCKET;
enum HTTP_STATES;
enum sockErr_t;
struct HTTPS_INTERFACE;
struct HttpSecure;
enum ikstype;
enum ikserror;
enum ikstagtype;
enum iksfileerror;
enum iksneterror;
enum iksnodetype;
struct iksid_struct;
enum ikspaktype;
enum iksubtype;
enum ikshowtype;
struct ikspak_struct;
enum iksfilterret;
struct CCookieJar;
struct SVTagModuleList;
struct CNavInfo;
enum scanTagActionType;
struct CScanTagAction;
struct CTagModuleActions;
struct PageHistory;
enum GraphicZval;
enum GraphicEffectStyle;
enum Align;
enum TickerType;
enum TransitionState;
enum FormMethodType;
struct HTTPEntity;
struct SVPath;
struct CHttpUtils;
enum tBrowserState;
enum tLinkOption;
enum CPAGE_BINARY_DOWNLOAD_QUEUE;
enum CPAGE_TYPE_ID;
enum CPAGE_REQUEST;
struct SVDisplayBuffer;
struct StaticArray<DownloadBinary,0,10>;
struct StaticArray<DownloadBinary,0,1>;
struct CPage;
struct USBKBINFO_t;
struct USBKBDATA_t;
enum PadAction;
struct SVButtonMap;
struct SVPersistentData;
struct RadioElementGroup;
struct URIEntry;
struct URIStore;
enum DataTagType_t;
struct __exception;
struct md5_context;
struct Http;
struct CDrawContextBase;
struct CSystemContextBase;
enum AudioSound;
struct CAudioContextBase;
struct CInputContextBase;
struct CConfig;
enum eState;
struct DLBuffer;
struct FileDownloadEntry;
struct FileDownloadQueue;
struct PluginMessage;
struct PluginExpectedMessage;
struct CPluginManager;
enum CG_DL_STATUS;
struct CMemoryContextBase;
enum tSVNavDir;
struct TextTag;
struct TextTagModule;
struct SVTagModule;
struct SVTag;
enum tNavPositions;
struct tPoint;
enum RTCOMMSOCK_SYNC;
struct SVO_RT_CIRC_BUF;
struct SVO_RT_LINKADDRESS;
struct Entry;
struct DNSCache;
struct RTCommSock;
struct SVRTCommAddr;
struct SVSock;
struct SVAddr;
struct ButtonTag;
struct ButtonTagModule;
struct RectangleTag;
struct LineTagModule;
struct SetVariableTag;
struct SetVariableTagModule;
struct RectangleTagModule;
struct LineTag;
struct QuickLinkTag;
struct QuickLinkTagModule;
struct SelectTag;
struct SelectTagModule;
struct ImageTagModule;
struct ImageTag;
struct StaticImageTagModule;
struct StaticImageTag;
struct LineInfo;
struct TextAreaTag;
struct TextEditableTag;
struct TextAreaTagModule;
struct TextInputTag;
struct TextInputTagModule;
enum eUTF8CharacterType;
struct PasswordInputTag;
struct PasswordInputTagModule;
struct RadioInputTag;
struct RadioInputTagModule;
struct CheckboxInputTag;
struct CheckboxInputTagModule;
struct FormTag;
struct FormTagModule;
struct SubmitInputTag;
struct SubmitInputTagModule;
struct LogoutTag;
struct LogoutTagModule;
struct AddRowStruct;
struct AddCellStruct;
struct AddRowResultStruct;
struct SVGridCell;
struct SVGridColumn;
struct SVGridRow;
struct SVMyRecordRow;
struct GridTag;
struct GridTagModule;
struct PopupTag;
struct PopupTagModule;
struct HiddenInputTag;
struct HiddenInputTagModule;
struct RedirectTag;
struct RedirectTagModule;
struct DataTag;
struct DataTagModule;
struct CPluginBase;
struct _ListBoxItem;
struct ListBoxTag;
struct ListBoxTagModule;
struct PageIDTagModule;
struct PageIDTag;
struct IURISchemeProvider;
struct DownloadBinary;
struct LoginTagModule;
struct ParseXML;
struct ParseSVMLAddObjects;
struct ParseSVMLForDownloads;
struct ParseXMLInfo;
struct SVDownloadManager;
struct IRequestListener;
struct CreateGameTagModule;
struct GenericListBoxTag;
struct GenericListBoxTagModule;
struct TickerTagModule;
struct TickerTag;
enum RT_FILE_SEEK_OPTION;
struct BrowserInitTag;
struct BrowserInitTagModule;
struct PageRequestListener;
struct tagNciCodecBlock;
struct tagDecode_mblk;
struct tagVoicePropertiesBlock;
struct tagSP_CIRC_BUF;
struct tagNEM_AGC_VAD_BLK;
struct tagNCI_PLUS_INFO_BLOCK;

struct ccc_int128 {
	long int lo;
	long int hi;
};

/*   0 */ int;

/*   0 */ char;

/*   0 */ long int;

/*   0 */ unsigned int;

/*   0 */ long unsigned int;

/*   0 */ struct ccc_int128;

/*   0 */ short int;

/*   0 */ short unsigned int;

/*   0 */ signed char;

/*   0 */ unsigned char;

/*   0 */ float;

// warning: multiple differing types with the same name, only one recovered
typedef char* __gnuc_va_list;

struct tm {
	/*   0 */ int tm_sec;
	/*   4 */ int tm_min;
	/*   8 */ int tm_hour;
	/*   c */ int tm_mday;
	/*  10 */ int tm_mon;
	/*  14 */ int tm_year;
	/*  18 */ int tm_wday;
	/*  1c */ int tm_yday;
	/*  20 */ int tm_isdst;
};

struct _glue {
	/*   0 */ struct _glue* _next;
	/*   4 */ int _niobs;
	/*   8 */ __sFILE* _iobs;
};

// warning: multiple differing types with the same name, only one recovered
struct _Bigint {
	/*   0 */ struct _Bigint* _next;
	/*   4 */ int _k;
	/*   8 */ int _maxwds;
	/*   c */ int _sign;
	/*  10 */ int _wds;
	/*  14 */ unsigned int _x[1];
};

struct _atexit {
	/*   0 */ struct _atexit* _next;
	/*   4 */ int _ind;
	/*   8 */ /* function */ void** _fns[32];
};

struct __sbuf {
	/*   0 */ unsigned char* _base;
	/*   4 */ int _size;
};

typedef long int _fpos_t;

// warning: multiple differing types with the same name, only one recovered
struct __sFILE {
	/*   0 */ unsigned char* _p;
	/*   4 */ int _r;
	/*   8 */ int _w;
	/*   c */ short int _flags;
	/*   e */ short int _file;
	/*  10 */ struct __sbuf _bf;
	/*  18 */ int _lbfsize;
	/*  1c */ void* _cookie;
	/*  20 */ /* function */ void** _read;
	/*  24 */ /* function */ void** _write;
	/*  28 */ /* function */ void** _seek;
	/*  2c */ /* function */ void** _close;
	/*  30 */ struct __sbuf _ub;
	/*  38 */ unsigned char* _up;
	/*  3c */ int _ur;
	/*  40 */ unsigned char _ubuf[3];
	/*  43 */ unsigned char _nbuf[1];
	/*  44 */ struct __sbuf _lb;
	/*  4c */ int _blksize;
	/*  50 */ int _offset;
	/*  54 */ _reent* _data;
};

// warning: multiple differing types with the same name, only one recovered
struct _reent {
	/*   0 */ int _errno;
	/*   4 */ __sFILE* _stdin;
	/*   8 */ __sFILE* _stdout;
	/*   c */ __sFILE* _stderr;
	/*  10 */ int _inc;
	/*  14 */ char _emergency[25];
	/*  30 */ int _current_category;
	/*  34 */ char* _current_locale;
	/*  38 */ int __sdidinit;
	/*  3c */ /* function */ void** __cleanup;
	/*  40 */ struct _Bigint* _result;
	/*  44 */ int _result_k;
	/*  48 */ struct _Bigint* _p5s;
	/*  4c */ struct _Bigint** _freelist;
	/*  50 */ int _cvtlen;
	/*  54 */ char* _cvtbuf;
	union _new {
		struct _reent {
			/*  58 */ unsigned int _rand_next;
			/*  5c */ char* _strtok_last;
			/*  60 */ char _asctime_buf[26];
			/*  7c */ struct tm _localtime_buf;
			/*  a0 */ int _gamma_signgam;
		} _reent;
		struct _unused {
			/*  58 */ unsigned char* _nextf[30];
			/*  d0 */ unsigned int _nmalloc[30];
		} _unused;
	} _new;
	/* 148 */ struct _atexit* _atexit;
	/* 14c */ struct _atexit _atexit0;
	/* 1d4 */ /* function */ void*** _sig_func;
	/* 1d8 */ struct _glue __sglue;
	/* 1e4 */ __sFILE __sf[3];
};

struct _sceGifPackNop {
	/*   0 */ long unsigned int pad[2];
};

struct StashFetch {
	/*   0 */ int ram;
	/*   4 */ int pad[3];
};

typedef struct ccc_int128 s128;
typedef float f32;

// warning: multiple differing types with the same name, only one recovered
struct BSphere {
	/*   0 */ f32 x;
	/*   4 */ f32 y;
	/*   8 */ f32 z;
	/*   c */ f32 rad;
};

// warning: multiple differing types with the same name, only one recovered
struct vec4a {
	/*   0 */ f32 x;
	/*   4 */ f32 y;
	/*   8 */ f32 z;
	/*   c */ f32 w;
};

// warning: multiple differing types with the same name, only one recovered
struct vec4f {
	/*   0 */ f32 x;
	/*   4 */ f32 y;
	/*   8 */ f32 z;
	/*   c */ f32 w;
};

struct vec4 {
	/*   0 */ s128 m_v_dont_even_think_about_touching_this;
};

struct vec4x {
	/*   0 */ s128 m_v_dont_even_think_about_touching_this;
};

struct vec4y {
	/*   0 */ s128 m_v_dont_even_think_about_touching_this;
};

struct vec4z {
	/*   0 */ s128 m_v_dont_even_think_about_touching_this;
};

struct vec4w {
	/*   0 */ s128 m_v_dont_even_think_about_touching_this;
};

// warning: multiple differing types with the same name, only one recovered
struct mtx4 {
	/*   0 */ struct vec4 m_v0_dont_even_think_about_touching_this;
	/*  10 */ struct vec4 m_v1_dont_even_think_about_touching_this;
	/*  20 */ struct vec4 m_v2_dont_even_think_about_touching_this;
	/*  30 */ struct vec4 m_v3_dont_even_think_about_touching_this;
};

// warning: multiple differing types with the same name, only one recovered
struct mtx3 {
	/*   0 */ struct vec4 m_v0_dont_even_think_about_touching_this;
	/*  10 */ struct vec4 m_v1_dont_even_think_about_touching_this;
	/*  20 */ struct vec4 m_v2_dont_even_think_about_touching_this;
};

struct quat {
	/*   0 */ s128 m_q_dont_even_think_about_touching_this;
};

typedef long unsigned int uint64;

struct creditScript {
	/*   0 */ int mainTag;
	/*   4 */ int otherCrap[3];
	/*  10 */ int nameX1;
	/*  14 */ int nameY1;
	/*  18 */ int nameX2;
	/*  1c */ int nameY2;
	/*  20 */ int nameTags[2][2];
};

struct MEMSLOTS {
	/*   0 */ void* os;
	/*   4 */ void* code;
	/*   8 */ void* base;
	/*   c */ void* vu1_chain[2];
	/*  14 */ void* tie_cache;
	/*  18 */ void* moby_joint_cache;
	/*  1c */ void* joint_cache_entry_list;
	/*  20 */ void* level_base;
	/*  24 */ void* level_nav;
	/*  28 */ void* level_tfrag;
	/*  2c */ void* level_occl;
	/*  30 */ void* level_sky;
	/*  34 */ void* level_coll;
	/*  38 */ void* level_vram;
	/*  3c */ void* level_part_vram;
	/*  40 */ void* level_fx_vram;
	/*  44 */ void* level_mobys;
	/*  48 */ void* level_ties;
	/*  4c */ void* level_shrubs;
	/*  50 */ void* level_ratchet;
	/*  54 */ void* level_gameplay;
	/*  58 */ void* level_global_nav_data;
	/*  5c */ void* level_mission_load_buffer;
	/*  60 */ void* level_mission_pvar_buffer;
	/*  64 */ void* level_mission_class_buffer_1;
	/*  68 */ void* level_mission_class_buffer_2;
	/*  6c */ void* level_mission_moby_insts;
	/*  70 */ void* level_mission_moby_pvars;
	/*  74 */ void* level_mission_moby_groups;
	/*  78 */ void* level_mission_moby_shared;
	/*  7c */ void* level_art;
	/*  80 */ void* level_help;
	/*  84 */ void* level_tie_insts;
	/*  88 */ void* level_shrub_insts;
	/*  8c */ void* level_moby_insts;
	/*  90 */ void* level_moby_insts_backup;
	/*  94 */ void* level_moby_pvars;
	/*  98 */ void* level_moby_pvars_backup;
	/*  9c */ void* level_misc_insts;
	/*  a0 */ void* level_part_insts;
	/*  a4 */ void* level_moby_sound_remap;
	/*  a8 */ void* level_end;
	/*  ac */ void* perm_base;
	/*  b0 */ void* perm_armor;
	/*  b4 */ void* perm_armor2;
	/*  b8 */ void* perm_skin;
	/*  bc */ void* perm_patch;
	/*  c0 */ void* hud;
	/*  c4 */ void* gui;
	/*  c8 */ void* net_overlay;
	/*  cc */ void* heap;
	/*  d0 */ void* stack;
	/*  d4 */ void* occl_points;
	/*  d8 */ void* occl_grids;
	/*  dc */ void* profile;
	/*  e0 */ void* debug;
};

struct Subtitle {
	/*   0 */ short int start;
	/*   2 */ short int stop;
	/*   4 */ short int text_ofs[7];
};

// warning: multiple differing types with the same name, only one recovered
struct SceneMonitor {
	/*   0 */ struct vec4a cam_pos;
	/*  10 */ struct vec4a cam_rot;
	/*  20 */ struct vec4* xyzs;
	/*  24 */ float st_width;
	/*  28 */ float st_height;
	/*  2c */ int monitorNum;
	/*  30 */ char scanlinesOn;
	/*  31 */ char monitorGlowOn;
	/*  32 */ char flickerOn;
	/*  33 */ unsigned char nextFlicker;
	/*  34 */ float flickerPos;
	/*  38 */ float fPowerOnOffFrac;
	/*  3c */ void* mobyList[4];
};

// warning: multiple differing types with the same name, only one recovered
struct SceneDef {
	/*   0 */ struct vec4 cam_pos_stash;
	/*  10 */ struct vec4 hero_warp_pos;
	/*  20 */ struct vec4f hero_warp_rot;
	/*  30 */ struct mtx4 transform;
	/*  70 */ int scene_id;
	/*  74 */ int iframe;
	/*  78 */ int cframe;
	/*  7c */ int ichunk;
	/*  80 */ short int frame_cnt;
	/*  82 */ short int chunk_cnt;
	/*  84 */ short int actor_cnt;
	/*  86 */ short int hero_warp_active;
	/*  88 */ short int speech_adjust;
	/*  8a */ short int next_chunk_size;
	/*  8c */ short int moby_cnt;
	/*  8e */ short int pre_init;
	/*  90 */ signed char ended;
	/*  91 */ signed char record_on;
	/*  92 */ short int record_frame;
	/*  94 */ struct vec4* cam_path;
	/*  98 */ struct SceneMonitor* monitor;
	/*  9c */ MobyInstance* ship;
	/*  a0 */ void* mem_alloc_base;
	/*  a4 */ void* mem_alloc_top;
	/*  a8 */ void* mem_chunk_comp;
	/*  ac */ void* mem_chunk_uncomp;
	/*  b0 */ void* vu1_chain_stash[2];
	/*  b8 */ struct Subtitle* subtitles;
	/*  bc */ void* mobyload;
	/*  c0 */ int level_fog_r;
	/*  c4 */ int level_fog_g;
	/*  c8 */ int level_fog_b;
	/*  cc */ short int biggest_chunk_uncomp;
	/*  ce */ short int biggest_chunk_comp;
	/*  d0 */ float level_fog_near_dist;
	/*  d4 */ float level_fog_far_dist;
	/*  d8 */ float level_fog_near_intensity;
	/*  dc */ float level_fog_far_intensity;
	/*  e0 */ void* chunks[68];
	/* 1f0 */ void* actors[16];
};

struct ArmorLoadDef {
	/*   0 */ int armor_index;
	/*   4 */ int* armor_ram_base;
	/*   8 */ int armor_tex_cnt;
	/*   c */ void* armor_ratchet_class;
	/*  10 */ long unsigned int armor_tex0[2];
	/*  20 */ int armor2_index;
	/*  24 */ int* armor2_ram_base;
	/*  28 */ int armor2_tex_cnt;
	/*  2c */ void* armor2_ratchet_class;
	/*  30 */ long unsigned int armor2_tex0[2];
	/*  40 */ int bot_tex_index;
	/*  44 */ int bot_tex_cnt;
	/*  48 */ long unsigned int bot_tex0[2];
	/*  58 */ int landstalker_tex_index;
	/*  5c */ int landstalker_tex_cnt;
	/*  60 */ long unsigned int landstalker_tex0[2];
	/*  70 */ int dropship_tex_index;
	/*  74 */ int dropship_tex_cnt;
	/*  78 */ long unsigned int dropship_tex0[3];
};

struct MobyReactAnim {
	/*   0 */ char animType;
	/*   1 */ char startFrame;
	/*   2 */ char endFrame;
	/*   3 */ char cpad;
	/*   4 */ float drag_mps;
	/*   8 */ float xySpeed_mps;
	/*   c */ float zSpeed_mps;
	/*  10 */ float upGrav_mps;
	/*  14 */ float downGrav_mps;
	/*  18 */ float peakFrame;
	/*  1c */ float landFrame;
};

struct MoveAnimData {
	/*   0 */ char elv_state;
	/*   1 */ char alert_state;
	/*   2 */ char turning;
	/*   3 */ char motivation_state;
	/*   4 */ char motivation_dir;
	/*   5 */ char action_state;
	/*   6 */ char reaction_state;
	/*   7 */ char animGroup;
	/*   8 */ int flags;
	/*   c */ float linear_rate;
	/*  10 */ float angular_rate;
	/*  14 */ float trigger_frame;
	/*  18 */ int pad[2];
};

struct MobyAnimInfo {
	/*   0 */ struct MobyReactAnim* reactData;
	/*   4 */ struct MoveAnimData* auxData;
};

struct MobySeq {
	/*   0 */ struct BSphere bSphere;
	/*  10 */ char frameCnt;
	/*  11 */ signed char sound;
	/*  12 */ char trigsCnt;
	/*  13 */ char pad;
	/*  14 */ short int* trigs;
	/*  18 */ struct MobyAnimInfo* animInfo;
	/*  1c */ void* frameData;
};

struct MobyClass {
	/*   0 */ void* packets;
	/*   4 */ char packet_cnt_0;
	/*   5 */ char packet_cnt_1;
	/*   6 */ char metal_cnt;
	/*   7 */ char metal_ofs;
	/*   8 */ char joint_cnt;
	/*   9 */ char pad;
	/*   a */ char packet_cnt_2;
	/*   b */ char team_texs;
	/*   c */ char seq_cnt;
	/*   d */ char sound_cnt;
	/*   e */ char lod_trans;
	/*   f */ char shadow;
	/*  10 */ short int* collision;
	/*  14 */ void* skeleton;
	/*  18 */ void* common_trans;
	/*  1c */ void* anim_joints;
	/*  20 */ void* gif_usage;
	/*  24 */ float gScale;
	/*  28 */ SoundDef* sound_defs;
	/*  2c */ char bangles;
	/*  2d */ char mip_dist;
	/*  2e */ short int corncob;
	/*  30 */ struct BSphere bSphere;
	/*  40 */ int glow_rgba;
	/*  44 */ short int mode_bits;
	/*  46 */ char type;
	/*  47 */ char mode_bits2;
	/*  48 */ struct MobySeq* seqs[0];
};

// warning: multiple differing types with the same name, only one recovered
struct Manipulator {
	/*   0 */ char animJoint;
	/*   1 */ char state;
	/*   2 */ signed char scaleOn;
	/*   3 */ char absolute;
	/*   4 */ int jointId;
	/*   8 */ struct Manipulator* pChain;
	/*   c */ float interp;
	/*  10 */ struct quat q;
	/*  20 */ struct vec4 scale;
	/*  30 */ struct vec4 trans;
};

typedef MobyInstance moby;

struct MobyAnimLayer {
	/*   0 */ struct MobySeq* animSeq;
	/*   4 */ float animSeqT;
	/*   8 */ float animSpeed;
	/*   c */ short int animIScale;
	/*   e */ short int poseCacheEntryIndex;
	/*  10 */ struct MobyAnimLayer* nextLayer;
	/*  14 */ char animSeqId;
	/*  15 */ char animFlags;
	/*  16 */ char animJointIndexA;
	/*  17 */ char animJointIndexB;
	/*  18 */ float blendWeight;
	/*  1c */ float blendFade;
};

struct MobyAnimLayerCommon {
	/*   0 */ struct MobySeq* animSeq;
	/*   4 */ float animSeqT;
	/*   8 */ float animSpeed;
	/*   c */ short int animIScale;
	/*   e */ short int poseCacheEntryIndex;
	/*  10 */ struct MobyAnimLayer* nextLayer;
	/*  14 */ char animSeqId;
	/*  15 */ char animFlags;
	/*  16 */ char pad_b[2];
	/*  18 */ int pad_w[2];
};

// warning: multiple differing types with the same name, only one recovered
struct MobyInstance {
	/*   0 */ struct BSphere bSphere;
	/*  10 */ struct vec4 pos;
	/*  20 */ char state;
	/*  21 */ unsigned char group;
	/*  22 */ char mClass;
	/*  23 */ char alpha;
	/*  24 */ struct MobyClass* pClass;
	/*  28 */ moby* pChain;
	/*  2c */ char collDamage;
	/*  2d */ signed char deathCnt;
	/*  2e */ short unsigned int occlIndex;
	/*  30 */ char updateDist;
	/*  31 */ char drawn;
	/*  32 */ short int drawDist;
	/*  34 */ short unsigned int modeBits;
	/*  36 */ short unsigned int modeBits2;
	/*  38 */ uint64 lights;
	/*  40 */ struct MobySeq* animSeq;
	/*  44 */ float animSeqT;
	/*  48 */ float animSpeed;
	/*  4c */ short int animIScale;
	/*  4e */ short int poseCacheEntryIndex;
	/*  50 */ struct MobyAnimLayer* animLayers;
	/*  54 */ char animSeqId;
	/*  55 */ char animFlags;
	/*  56 */ char lSeq;
	/*  57 */ char jointCnt;
	/*  58 */ struct mtx4* jointCache;
	/*  5c */ struct Manipulator* pManipulator;
	/*  60 */ int glow_rgba;
	/*  64 */ char lod_trans;
	/*  65 */ char lod_trans2;
	/*  66 */ char metal;
	/*  67 */ char subState;
	/*  68 */ char prevState;
	/*  69 */ char stateType;
	/*  6a */ short unsigned int stateTimer;
	/*  6c */ char soundTrigger;
	/*  6d */ char soundDesired;
	/*  6e */ short int soundChannel;
	/*  70 */ float scale;
	/*  74 */ short unsigned int bangles;
	/*  76 */ char shadow;
	/*  77 */ char shadow_index;
	/*  78 */ float shadow_plane;
	/*  7c */ float shadow_range;
	/*  80 */ struct BSphere lSphere;
	/*  90 */ void* netObject;
	/*  94 */ short int updateID;
	/*  96 */ short int spad0;
	/*  98 */ int* collData;
	/*  9c */ int collActive;
	/*  a0 */ unsigned int collCnt;
	/*  a4 */ char grid_min_x;
	/*  a5 */ char grid_min_y;
	/*  a6 */ char grid_max_x;
	/*  a7 */ char grid_max_y;
	/*  a8 */ void* pUpdate;
	/*  ac */ void* pVar;
	/*  b0 */ char mission;
	/*  b1 */ char pad;
	/*  b2 */ short int UID;
	/*  b4 */ short int bolts;
	/*  b6 */ short unsigned int xp;
	/*  b8 */ MobyInstance* pParent;
	/*  bc */ short int oClass;
	/*  be */ char triggers;
	/*  bf */ char standarddeathcalled;
	/*  c0 */ struct mtx3 rMtx;
	/*  f0 */ struct vec4f rot;
};

struct _HeroSave {
	/*   0 */ int bolts;
	/*   4 */ int boltDeficit;
	/*   8 */ int xp;
	/*   c */ int points;
	/*  10 */ short int HeroMaxHp;
	/*  12 */ short int ArmorLevel;
	/*  14 */ float limitBreak;
	/*  18 */ int purchasedSkins;
	/*  1c */ short int spentDiffStars;
	/*  1e */ char boltMultLevel;
	/*  1f */ char boltMultSubLevel;
	/*  20 */ char OldGameSaveData;
	/*  21 */ char blueBadges;
	/*  22 */ char redBadges;
	/*  23 */ char greenBadges;
	/*  24 */ char goldBadges;
	/*  25 */ char blackBadges;
	/*  26 */ char Completes;
	/*  27 */ char lastEquippedGadget[2];
	/*  29 */ char tempWeapons[4];
	/*  30 */ int currentMaxLimitBreak;
	/*  34 */ short int ArmorLevel2;
	/*  36 */ short int progressionArmorLevel;
	/*  38 */ int startLimitBreakDiff;
};

struct GameBootOptions {
	/*   0 */ unsigned int wideScreen;
	/*   0 */ unsigned int progressiveScan;
	/*   0 */ unsigned int stereo;
	/*   0 */ unsigned int musicVolume;
	/*   1 */ unsigned int effectsVolume;
	/*   3 */ unsigned int language;
	/*   4 */ short unsigned int screen_offset_x;
	/*   6 */ short unsigned int screen_offset_y;
};

struct dbg_command {
	/*   0 */ char name[48];
	/*  30 */ /* function */ void** update;
	/*  34 */ /* function */ void** draw;
	/*  38 */ void* data;
	/*  3c */ int datasize;
	/*  40 */ int flag;
	/*  44 */ char** tags;
};

struct blockhdr {
	/*   0 */ void* address;
	/*   4 */ int size;
	/*   8 */ int type;
	/*   c */ void* entry;
};

/*   0 */ long long unsigned int;

typedef unsigned char u_char;
typedef short unsigned int u_short;
typedef unsigned int u_int;
typedef long unsigned int u_long;
// warning: multiple differing types with the same name, only one recovered
typedef long long unsigned int u_long128;

// warning: multiple differing types with the same name, only one recovered
struct ThreadParam {
	/*   0 */ int status;
	/*   4 */ /* function */ void** entry;
	/*   8 */ void* stack;
	/*   c */ int stackSize;
	/*  10 */ void* gpReg;
	/*  14 */ int initPriority;
	/*  18 */ int currentPriority;
	/*  1c */ u_int attr;
	/*  20 */ u_int option;
	/*  24 */ int waitType;
	/*  28 */ int waitId;
	/*  2c */ int wakeupCount;
};

typedef unsigned int __uint32_t;
typedef __uint32_t ULong;

// warning: multiple differing types with the same name, only one recovered
struct _sif_rpc_data {
	/*   0 */ void* paddr;
	/*   4 */ unsigned int pid;
	/*   8 */ int tid;
	/*   c */ unsigned int mode;
};

typedef /* function */ void** sceSifEndFunc;

// warning: multiple differing types with the same name, only one recovered
struct _sif_client_data {
	/*   0 */ struct _sif_rpc_data rpcd;
	/*  10 */ unsigned int command;
	/*  14 */ void* buff;
	/*  18 */ void* gp;
	/*  1c */ sceSifEndFunc func;
	/*  20 */ void* para;
	/*  24 */ _sif_serve_data* serve;
};

typedef struct _sif_client_data sceSifClientData;
typedef /* function */ void** sceSifRpcFunc;

// warning: multiple differing types with the same name, only one recovered
struct _sif_serve_data {
	/*   0 */ unsigned int command;
	/*   4 */ sceSifRpcFunc func;
	/*   8 */ void* buff;
	/*   c */ int size;
	/*  10 */ sceSifRpcFunc cfunc;
	/*  14 */ void* cbuff;
	/*  18 */ int csize;
	/*  1c */ sceSifClientData* client;
	/*  20 */ void* paddr;
	/*  24 */ unsigned int fno;
	/*  28 */ void* receive;
	/*  2c */ int rsize;
	/*  30 */ int rmode;
	/*  34 */ unsigned int rid;
	/*  38 */ _sif_serve_data* link;
	/*  3c */ _sif_serve_data* next;
	/*  40 */ _sif_queue_data* base;
};

struct _sif_queue_data {
	/*   0 */ int key;
	/*   4 */ int active;
	/*   8 */ _sif_serve_data* link;
	/*   c */ _sif_serve_data* start;
	/*  10 */ _sif_serve_data* end;
	/*  14 */ _sif_queue_data* next;
};

// warning: multiple differing types with the same name, only one recovered
typedef /* struct */ void* sceDevVif0Cnd;

// warning: multiple differing types with the same name, only one recovered
struct _sceDmaTag {
	/*   0 */ u_short qwc;
	/*   2 */ u_char mark;
	/*   3 */ u_char id;
	/*   4 */ struct _sceDmaTag* next;
	/*   8 */ u_int p[2];
};

// warning: multiple differing types with the same name, only one recovered
typedef /* struct */ void* sceGifPacket;
// warning: multiple differing types with the same name, only one recovered
typedef /* struct */ void* sceCdRMode;
// warning: multiple differing types with the same name, only one recovered
typedef /* struct */ void* sceCdlFILE;

struct SndMessageData {
	/*   0 */ int data[7];
	/*  1c */ int command;
};

// warning: multiple differing types with the same name, only one recovered
struct SndCommandBuffer {
	/*   0 */ int num_commands;
	/*   4 */ char buffer[4092];
};

typedef struct SndCommandBuffer* SndCommandBufferPtr;
typedef /* function */ void** SndCompleteProc;

// warning: multiple differing types with the same name, only one recovered
struct SndCommandReturnDef {
	/*   0 */ SndCompleteProc done;
	/*   8 */ u_long u_data;
};

typedef struct SndCommandReturnDef* SndCommandReturnDefPtr;

struct VAGStreamCommand {
	/*   0 */ char name[256];
	/* 100 */ int stereo;
	/* 104 */ int vol;
	/* 108 */ int pan;
	/* 10c */ int vol_group;
};

// warning: multiple differing types with the same name, only one recovered
struct SndSystemStatus {
	/*   0 */ int cd_busy;
	/*   4 */ int pad_0;
	/*   8 */ int pad_1;
	/*   c */ int pad_2;
	/*  10 */ int cd_error;
	/*  14 */ int pad_3;
	/*  18 */ int pad_4;
	/*  1c */ int pad_5;
	/*  20 */ char pad_big[32];
};

typedef void* SoundBankPtr;
typedef void* MMDPtr;

struct DuckerDef {
	/*   0 */ int source_group;
	/*   4 */ u_int target_groups;
	/*   8 */ int full_duck_mult;
	/*   c */ int attack_time;
	/*  10 */ int release_time;
	/*  14 */ int current_duck_mult;
};

typedef struct DuckerDef* DuckerDefPtr;

union bank_tag {
	/*   0 */ u_long name_long;
	/*   0 */ char name[8];
	/*   0 */ SoundBankPtr ptr;
};

union snd_tag {
	/*   0 */ u_long128 name_long128;
	/*   0 */ char name[16];
	/*   0 */ short int index;
};

// warning: multiple differing types with the same name, only one recovered
struct SndPlayParams {
	/*   0 */ union bank_tag bank_spec;
	/*   8 */ int vol;
	/*   c */ int pan;
	/*  10 */ union snd_tag snd_spec;
	/*  20 */ short int pitch_mod;
	/*  22 */ short int pitch_bend;
	/*  24 */ char reg[4];
	/*  28 */ u_int mask;
	/*  2c */ u_int reserved;
};

typedef struct SndPlayParams* SndPlayParamsPtr;
// warning: multiple differing types with the same name, only one recovered
typedef /* struct */ void* GetSoundUserDataCommandStruct;

// warning: multiple differing types with the same name, only one recovered
struct PVSBN_struct {
	/*   0 */ char name1[64];
	/*  40 */ char name2[64];
	/*  80 */ u_int offset1;
	/*  84 */ u_int offset2;
	/*  88 */ int vol;
	/*  8c */ int pan;
	/*  90 */ int vol_group;
	/*  94 */ u_int queue;
	/*  98 */ int sub_group;
	/*  9c */ u_int flags;
};

struct fileblock {
	/*   0 */ int offset;
	/*   4 */ int length;
};

struct binblock {
	/*   0 */ int offset;
	/*   4 */ int length;
};

struct chunkblock {
	/*   0 */ int offset;
};

struct sceneblock {
	/*   0 */ int speech;
	/*   4 */ int speech_r;
	/*   8 */ struct fileblock subtitles;
	/*  10 */ int speech_f;
	/*  14 */ int speech_f_r;
	/*  18 */ int speech_g;
	/*  1c */ int speech_g_r;
	/*  20 */ int speech_s;
	/*  24 */ int speech_s_r;
	/*  28 */ int speech_i;
	/*  2c */ int speech_i_r;
	/*  30 */ struct fileblock mobyload;
	/*  38 */ struct chunkblock chunks[69];
};

struct _reverb {
	/*   0 */ int type;
};

struct _mms {
	/*   0 */ int size;
};

struct levelwad {
	/*   0 */ int hsize;
	/*   4 */ int sector;
	/*   8 */ int level;
	/*   c */ struct _reverb reverb;
	/*  10 */ struct _mms max_mission_sizes[2];
	/*  18 */ struct fileblock data;
	/*  20 */ struct fileblock core_bank;
	/*  28 */ struct fileblock chunk[3];
	/*  40 */ struct fileblock chunkbank[3];
	/*  58 */ struct fileblock _gameplay_core;
	/*  60 */ struct fileblock gameplay_mission_instances[128];
	/* 460 */ struct fileblock gameplay_mission_data[128];
	/* 860 */ struct fileblock mission_banks[128];
	/* c60 */ struct fileblock art_instances;
};

struct levelaudiowad {
	/*   0 */ int hsize;
	/*   4 */ int sector;
	/*   8 */ struct binblock bindata[80];
	/* 288 */ struct binblock upgradesample;
	/* 290 */ struct binblock platinumbolt;
	/* 298 */ struct binblock spare;
};

struct levelscenewad {
	/*   0 */ int hsize;
	/*   4 */ int sector;
	/*   8 */ struct sceneblock scenes[30];
};

struct mpegwad {
	/*   0 */ int hsize;
	/*   4 */ int sector;
	/*   8 */ struct binblock story[200];
};

struct hudwad {
	/*   0 */ int hsize;
	/*   4 */ int sector;
	/*   8 */ struct fileblock online_images[74];
	/* 258 */ struct fileblock ratchet_seqs[28];
	/* 338 */ struct fileblock hud_seqs[20];
	/* 3d8 */ struct fileblock vendor;
	/* 3e0 */ struct fileblock all_text[8];
	/* 420 */ struct fileblock hudw3d;
	/* 428 */ struct fileblock e3_level_ss[10];
	/* 478 */ struct fileblock nw_dnas_image;
	/* 480 */ struct fileblock splitScreenTex;
	/* 488 */ struct fileblock radar_maps[15];
	/* 500 */ struct fileblock weapon_plates_large[20];
	/* 5a0 */ struct fileblock mission_plates_large[15];
	/* 618 */ struct fileblock gui_plates[23];
	/* 6d0 */ struct fileblock vendor_plates[46];
	/* 840 */ struct fileblock loading_screen;
	/* 848 */ struct fileblock planets[16];
	/* 8c8 */ struct fileblock cinematics[21];
	/* 970 */ struct fileblock equip_large[24];
	/* a30 */ struct fileblock equip_small[5];
	/* a58 */ struct fileblock moves[15];
	/* ad0 */ struct fileblock save_level[16];
	/* b50 */ struct fileblock save_empty[4];
	/* b70 */ struct fileblock skills[26];
	/* c40 */ struct fileblock reward_back;
	/* c48 */ struct fileblock complete_back;
	/* c50 */ struct fileblock complete_back_coop;
	/* c58 */ struct fileblock rewards[26];
	/* d28 */ struct fileblock leaderboard;
	/* d30 */ struct fileblock cutaways[7];
	/* d68 */ struct fileblock sketchbook[34];
	/* e78 */ struct fileblock character_epilogues[6];
	/* ea8 */ struct fileblock character_cards[7];
	/* ee0 */ struct fileblock equip_plate;
	/* ee8 */ struct fileblock hud_flythru;
	/* ef0 */ struct fileblock mp_maps[15];
	/* f68 */ struct fileblock tourney_plates_large[4];
};

struct bonuswad {
	/*   0 */ int hsize;
	/*   4 */ int sector;
	/*   8 */ struct fileblock credits_text[6];
	/*  38 */ struct fileblock credits_images[13];
	/*  a0 */ struct fileblock demomenu[6];
	/*  d0 */ struct fileblock demoexit[6];
	/* 100 */ struct fileblock cheat_images[20];
	/* 1a0 */ struct fileblock skill_images[31];
	/* 298 */ struct fileblock trophy_image;
	/* 2a0 */ struct fileblock dige;
};

struct spacewad {
	/*   0 */ int hsize;
	/*   4 */ int sector;
	/*   8 */ struct fileblock transition_wads[12];
};

struct armordata {
	/*   0 */ struct fileblock main;
	/*   8 */ struct fileblock vram;
};

struct armorwad {
	/*   0 */ int hsize;
	/*   4 */ int sector;
	/*   8 */ struct armordata index[20];
	/* 148 */ struct fileblock bot_texs[12];
	/* 1a8 */ struct fileblock landstalker_texs[8];
	/* 1e8 */ struct fileblock dropship_texs[8];
};

struct audiowad {
	/*   0 */ int hsize;
	/*   4 */ int sector;
	/*   8 */ struct chunkblock vendor[254];
	/* 400 */ struct binblock global_sfx[12];
	/* 460 */ struct chunkblock help[2100];
	/* 2530 */ struct chunkblock help_f[2100];
	/* 4600 */ struct chunkblock help_g[2100];
	/* 66d0 */ struct chunkblock help_s[2100];
	/* 87a0 */ struct chunkblock help_i[2100];
};

struct onlinewad {
	/*   0 */ int hsize;
	/*   4 */ int sector;
	/*   8 */ struct fileblock data;
	/*  10 */ struct fileblock transition_bgs[11];
};

struct levelinfo {
	/*   0 */ struct fileblock levelaudiowad;
	/*   8 */ struct fileblock levelwad;
	/*  10 */ struct fileblock levelscenewad;
};

struct miscwad {
	/*   0 */ int hsize;
	/*   4 */ int sector;
	/*   8 */ struct fileblock debugfont;
	/*  10 */ struct fileblock irx;
	/*  18 */ struct fileblock savegame;
	/*  20 */ struct fileblock frontbin;
	/*  28 */ struct fileblock frontbin_net;
	/*  30 */ struct fileblock frontend;
	/*  38 */ struct fileblock exit;
	/*  40 */ struct fileblock bootwad;
	/*  48 */ struct fileblock gadget;
};

struct wadinfo {
	/*   0 */ struct mpegwad mpeg;
	/* 648 */ struct miscwad misc;
	/* 698 */ struct bonuswad bonus;
	/* 940 */ struct spacewad space;
	/* 9a8 */ struct armorwad armor;
	/* bd0 */ struct audiowad audio;
	/* b440 */ struct hudwad hud;
	/* c3c8 */ struct onlinewad online;
	/* c430 */ struct levelinfo levels[80];
	/* cbb0 */ struct levelwad level;
	/* d818 */ struct levelaudiowad levelaudio;
	/* dab8 */ struct levelscenewad levelscene;
};

/*   0 */ double;

/*   0 */ bool;

// warning: multiple differing types with the same name, only one recovered
union __dmath {
	/*   0 */ unsigned int i[2];
	/*   0 */ double d;
};

// warning: multiple differing types with the same name, only one recovered
struct tGS_PMODE {
	/*   0 */ unsigned int EN1;
	/*   0 */ unsigned int EN2;
	/*   0 */ unsigned int CRTMD;
	/*   0 */ unsigned int MMOD;
	/*   0 */ unsigned int AMOD;
	/*   0 */ unsigned int SLBG;
	/*   1 */ unsigned int ALP;
	/*   2 */ unsigned int p0;
	/*   4 */ unsigned int p1;
};

// warning: multiple differing types with the same name, only one recovered
struct tGS_SMODE2 {
	/*   0 */ unsigned int INT;
	/*   0 */ unsigned int FFMD;
	/*   0 */ unsigned int DPMS;
	/*   0 */ unsigned int p0;
	/*   4 */ unsigned int p1;
};

// warning: multiple differing types with the same name, only one recovered
struct tGS_DISPFB2 {
	/*   0 */ unsigned int FBP;
	/*   1 */ unsigned int FBW;
	/*   1 */ unsigned int PSM;
	/*   2 */ unsigned int p0;
	/*   4 */ unsigned int DBX;
	/*   5 */ unsigned int DBY;
	/*   6 */ unsigned int p1;
};

// warning: multiple differing types with the same name, only one recovered
struct tGS_DISPLAY2 {
	/*   0 */ unsigned int DX;
	/*   1 */ unsigned int DY;
	/*   2 */ unsigned int MAGH;
	/*   3 */ unsigned int MAGV;
	/*   3 */ unsigned int p0;
	/*   4 */ unsigned int DW;
	/*   5 */ unsigned int DH;
	/*   6 */ unsigned int p1;
};

// warning: multiple differing types with the same name, only one recovered
struct tGS_BGCOLOR {
	/*   0 */ unsigned int R;
	/*   1 */ unsigned int G;
	/*   2 */ unsigned int B;
	/*   3 */ unsigned int p0;
	/*   4 */ unsigned int p1;
};

struct sceGifTag {
	/*   0 */ long unsigned int NLOOP;
	/*   1 */ long unsigned int EOP;
	/*   2 */ long unsigned int pad16;
	/*   4 */ long unsigned int id;
	/*   5 */ long unsigned int PRE;
	/*   5 */ long unsigned int PRIM;
	/*   7 */ long unsigned int FLG;
	/*   7 */ long unsigned int NREG;
	/*   8 */ long unsigned int REGS0;
	/*   8 */ long unsigned int REGS1;
	/*   9 */ long unsigned int REGS2;
	/*   9 */ long unsigned int REGS3;
	/*   a */ long unsigned int REGS4;
	/*   a */ long unsigned int REGS5;
	/*   b */ long unsigned int REGS6;
	/*   b */ long unsigned int REGS7;
	/*   c */ long unsigned int REGS8;
	/*   c */ long unsigned int REGS9;
	/*   d */ long unsigned int REGS10;
	/*   d */ long unsigned int REGS11;
	/*   e */ long unsigned int REGS12;
	/*   e */ long unsigned int REGS13;
	/*   f */ long unsigned int REGS14;
	/*   f */ long unsigned int REGS15;
};

struct _sceGifPackFog {
	/*   0 */ unsigned int pad[3];
	/*   c */ u_int F;
};

struct sceGsBitbltbuf {
	/*   0 */ long unsigned int SBP;
	/*   1 */ long unsigned int pad14;
	/*   2 */ long unsigned int SBW;
	/*   2 */ long unsigned int pad22;
	/*   3 */ long unsigned int SPSM;
	/*   3 */ long unsigned int pad30;
	/*   4 */ long unsigned int DBP;
	/*   5 */ long unsigned int pad46;
	/*   6 */ long unsigned int DBW;
	/*   6 */ long unsigned int pad54;
	/*   7 */ long unsigned int DPSM;
	/*   7 */ long unsigned int pad62;
};

struct sceGsColclamp {
	/*   0 */ long unsigned int CLAMP;
	/*   0 */ long unsigned int pad01;
};

struct sceGsDthe {
	/*   0 */ long unsigned int DTHE;
	/*   0 */ long unsigned int pad01;
};

struct sceGsFinish {
	/*   0 */ long unsigned int pad00;
};

struct sceGsFrame {
	/*   0 */ long unsigned int FBP;
	/*   1 */ long unsigned int pad09;
	/*   2 */ long unsigned int FBW;
	/*   2 */ long unsigned int pad22;
	/*   3 */ long unsigned int PSM;
	/*   3 */ long unsigned int pad30;
	/*   4 */ long unsigned int FBMSK;
};

struct sceGsPrmodecont {
	/*   0 */ long unsigned int AC;
	/*   0 */ long unsigned int pad01;
};

struct sceGsScissor {
	/*   0 */ long unsigned int SCAX0;
	/*   1 */ long unsigned int pad11;
	/*   2 */ long unsigned int SCAX1;
	/*   3 */ long unsigned int pad27;
	/*   4 */ long unsigned int SCAY0;
	/*   5 */ long unsigned int pad43;
	/*   6 */ long unsigned int SCAY1;
	/*   7 */ long unsigned int pad59;
};

struct sceGsTest {
	/*   0 */ long unsigned int ATE;
	/*   0 */ long unsigned int ATST;
	/*   0 */ long unsigned int AREF;
	/*   1 */ long unsigned int AFAIL;
	/*   1 */ long unsigned int DATE;
	/*   1 */ long unsigned int DATM;
	/*   2 */ long unsigned int ZTE;
	/*   2 */ long unsigned int ZTST;
	/*   2 */ long unsigned int pad19;
};

struct sceGsTrxdir {
	/*   0 */ long unsigned int XDR;
	/*   0 */ long unsigned int pad02;
};

struct sceGsTrxpos {
	/*   0 */ long unsigned int SSAX;
	/*   1 */ long unsigned int pad11;
	/*   2 */ long unsigned int SSAY;
	/*   3 */ long unsigned int pad27;
	/*   4 */ long unsigned int DSAX;
	/*   5 */ long unsigned int pad43;
	/*   6 */ long unsigned int DSAY;
	/*   7 */ long unsigned int DIR;
	/*   7 */ long unsigned int pad61;
};

struct sceGsTrxreg {
	/*   0 */ long unsigned int RRW;
	/*   1 */ long unsigned int pad12;
	/*   4 */ long unsigned int RRH;
	/*   5 */ long unsigned int pad44;
};

struct sceGsXyoffset {
	/*   0 */ long unsigned int OFX;
	/*   2 */ long unsigned int pad16;
	/*   4 */ long unsigned int OFY;
	/*   6 */ long unsigned int pad48;
};

struct sceGsZbuf {
	/*   0 */ long unsigned int ZBP;
	/*   1 */ long unsigned int pad09;
	/*   3 */ long unsigned int PSM;
	/*   3 */ long unsigned int pad28;
	/*   4 */ long unsigned int ZMSK;
	/*   4 */ long unsigned int pad33;
};

struct sceGsDispEnv {
	/*   0 */ struct tGS_PMODE pmode;
	/*   8 */ struct tGS_SMODE2 smode2;
	/*  10 */ struct tGS_DISPFB2 dispfb;
	/*  18 */ struct tGS_DISPLAY2 display;
	/*  20 */ struct tGS_BGCOLOR bgcolor;
};

struct sceGsDrawEnv1 {
	/*   0 */ struct sceGsFrame frame1;
	/*   8 */ u_long frame1addr;
	/*  10 */ struct sceGsZbuf zbuf1;
	/*  18 */ long int zbuf1addr;
	/*  20 */ struct sceGsXyoffset xyoffset1;
	/*  28 */ long int xyoffset1addr;
	/*  30 */ struct sceGsScissor scissor1;
	/*  38 */ long int scissor1addr;
	/*  40 */ struct sceGsPrmodecont prmodecont;
	/*  48 */ long int prmodecontaddr;
	/*  50 */ struct sceGsColclamp colclamp;
	/*  58 */ long int colclampaddr;
	/*  60 */ struct sceGsDthe dthe;
	/*  68 */ long int dtheaddr;
	/*  70 */ struct sceGsTest test1;
	/*  78 */ long int test1addr;
};

struct sceGsStoreImage {
	/*   0 */ unsigned int vifcode[4];
	/*  10 */ struct sceGifTag giftag;
	/*  20 */ struct sceGsBitbltbuf bitbltbuf;
	/*  28 */ long int bitbltbufaddr;
	/*  30 */ struct sceGsTrxpos trxpos;
	/*  38 */ long int trxposaddr;
	/*  40 */ struct sceGsTrxreg trxreg;
	/*  48 */ long int trxregaddr;
	/*  50 */ struct sceGsFinish finish;
	/*  58 */ long int finishaddr;
	/*  60 */ struct sceGsTrxdir trxdir;
	/*  68 */ long int trxdiraddr;
};

struct sceGsGParam {
	/*   0 */ short int sceGsInterMode;
	/*   2 */ short int sceGsOutMode;
	/*   4 */ short int sceGsFFMode;
	/*   6 */ short int sceGsVersion;
	/*   8 */ /* function */ void** sceGsVSCfunc;
	/*   c */ int sceGsVSCid;
};

typedef float sceVu0FMATRIX;

struct sce_stat {
	/*   0 */ unsigned int st_mode;
	/*   4 */ unsigned int st_attr;
	/*   8 */ unsigned int st_size;
	/*   c */ unsigned char st_ctime[8];
	/*  14 */ unsigned char st_atime[8];
	/*  1c */ unsigned char st_mtime[8];
	/*  24 */ unsigned int st_hisize;
	/*  28 */ unsigned int st_private[6];
};

// warning: multiple differing types with the same name, only one recovered
struct sce_dirent {
	/*   0 */ struct sce_stat d_stat;
	/*  40 */ char d_name[256];
	/* 140 */ void* d_private;
};

struct StashInfo {
	/*   0 */ int base;
	/*   4 */ int size;
	/*   8 */ sceSifClientData cd;
	/*  30 */ int free;
	/*  34 */ int block;
	/*  38 */ int gadgetram;
};

struct _checksum_block {
	/*   0 */ char* start;
	/*   4 */ char* end;
};

struct _checksum_info {
	/*   0 */ void* addr;
	/*   4 */ short int iop_cnt;
	/*   6 */ short int ee_cnt;
	/*   8 */ int iop_total;
	/*   c */ int ee_total;
	/*  10 */ struct _checksum_block iop[50];
	/* 1a0 */ struct _checksum_block ee[50];
};

typedef struct _checksum_info checksum_info;

struct vec3 {
	/*   0 */ f32 x;
	/*   4 */ f32 y;
	/*   8 */ f32 z;
};

typedef float t_Mtx4FloatArray_;
typedef /* function */ void** PsudoRandomGenerator;

enum gameMode_t {
	GAME_MODE_NONE = -2,
	GAME_MODE_DEBUG = -1,
	GAME_MODE_NORMAL = 0,
	GAME_MODE_MOVIE = 1,
	GAME_MODE_SCENE = 2,
	GAME_MODE_PAUSE = 3,
	GAME_MODE_FREEZE = 4,
	GAME_MODE_VENDOR = 5,
	GAME_MODE_SPACE = 6,
	GAME_MODE_PUZZLE = 7,
	GAME_MODE_WEAPON_UPGRADE = 8,
	GAME_MODE_CREDITS = 9,
	GAME_MODE_LOBBY = 10,
	GAME_MODE_FLYBY = 11,
	GAME_MODE_THERMAL = 12,
	GAME_MODE_PRE_LOBBY_MEMCARD_LOAD = 13,
	GAME_MODE_PRE_LOBBY = 14,
	GAME_MODE_WAIT_FOR_MPSTART = 15,
	GAME_MODE_EXEC_MP_MEMCARD_COMMAND = 16,
	GAME_MODE_IOP_DEBUG = 17,
	GAME_MODE_MAX = 18
};

struct GSMEM {
	/*   0 */ int display;
	/*   4 */ int draw;
	/*   8 */ int zbuf;
	/*   c */ int base;
	/*  10 */ int perm_grey_tex;
	/*  14 */ int perm_debug_font;
	/*  18 */ int perm_armor;
	/*  1c */ int perm_armor2;
	/*  20 */ int perm_bots;
	/*  24 */ int perm_landstalker;
	/*  28 */ int perm_dropship;
	/*  2c */ int perm_bank;
	/*  30 */ int stash_armor;
	/*  34 */ int stash_armor2;
	/*  38 */ int stash_bots;
	/*  3c */ int stash_landstalker;
	/*  40 */ int stash_dropship;
	/*  44 */ int stash_mobys;
	/*  48 */ int stash_hud;
	/*  4c */ int stash_font;
	/*  50 */ int stash_end;
	/*  54 */ int pad;
};

struct LEVELLOAD {
	/*   0 */ int state;
	/*   4 */ void* level_data;
	/*   8 */ void* level_header_backup;
	/*   c */ void* level_gameplay_mission;
};

struct SCRN {
	/*   0 */ int size_x;
	/*   4 */ int size_y;
	/*   8 */ int center_x;
	/*   c */ int center_y;
	/*  10 */ int ofs_x;
	/*  14 */ int ofs_y;
	/*  18 */ int lim_x;
	/*  1c */ int lim_y;
	/*  20 */ float oneOverSize_x;
	/*  24 */ float oneOverSize_y;
	/*  30 */ struct vec4 vHalfSize;
	/*  40 */ struct vec4 vOneOverSize;
};

struct MonitorData {
	/*   0 */ struct vec4a offset;
	/*  10 */ struct vec4a camOffset;
	/*  20 */ struct vec4a extraRot;
	/*  30 */ struct vec4a camRot;
	/*  40 */ float scale;
	/*  44 */ float aspectRatio;
	/*  48 */ short int startFrame;
	/*  4a */ short int endFrame;
	/*  4c */ short int powerOnFrames;
	/*  4e */ short int powerOffFrames;
	/*  50 */ int monitorIndex;
	/*  54 */ int targetIndex[4];
};

struct SpaceDef {
	/*   0 */ short int state;
	/*   2 */ short int timer;
	/*   4 */ short int ship_type;
	/*   6 */ short int quick_entry;
	/*   8 */ short int first_entry;
	/*   a */ short int level_entry;
	/*   c */ short int ship_trans;
	/*   e */ short int wad_index;
	/*  10 */ int speech_played;
	/*  14 */ int movie_index;
	/*  18 */ int movie_cnt;
	/*  1c */ int movie_abort;
};

struct GadgetBankDef {
	/*   0 */ unsigned int pad32_0[4];
};

struct QuadDef {
	/*   0 */ struct vec4 xyzw[4];
	/*  40 */ int rgba[4];
	/*  50 */ float st[2][4];
	/*  70 */ uint64 clamp;
	/*  78 */ uint64 tex0;
	/*  80 */ uint64 tex1;
	/*  88 */ uint64 alpha;
};

struct IMobyData_t {
	/*   0 */ float xpos;
	/*   4 */ float ypos;
	/*   8 */ float zrot;
	/*   c */ int flags;
};

typedef int mobylink;

// warning: multiple differing types with the same name, only one recovered
struct ChunkCollData {
	/*   0 */ int type;
	/*   4 */ int numVerts;
	/*   8 */ int pad[2];
	/*  10 */ struct vec4 CM;
	/*  20 */ struct vec4 CollVerts[0];
};

// warning: multiple differing types with the same name, only one recovered
struct Path {
	/*   0 */ int nNodes;
	/*   4 */ int bPathNormalized;
	/*   8 */ char pad[8];
	/*  10 */ struct vec4 nodes[0];
};

struct MobyVar {
	/*   0 */ int data[32];
};

// warning: multiple differing types with the same name, only one recovered
struct TargetVars {
	/*   0 */ float hitPoints;
	/*   4 */ int maxHitPoints;
	/*   8 */ unsigned char attackDamage[6];
	/*   e */ short int hitCount;
	/*  10 */ int flags;
	/*  14 */ float targetHeight;
	/*  18 */ moby* mobyThatHurtMeLast;
	/*  1c */ float camPushDist;
	/*  20 */ float camPushHeight;
	/*  24 */ short int damageCounter;
	/*  26 */ short int empTimer;
	/*  28 */ short int infectedTimer;
	/*  2a */ short int invincTimer;
	/*  2c */ short int bogeyType;
	/*  2e */ short int team;
	/*  30 */ char lookAtMeDist;
	/*  31 */ char lookAtMePriority;
	/*  32 */ char lookAtMeZOfsIn8ths;
	/*  33 */ char lookAtMeJoint;
	/*  34 */ char lookAtMeExpression;
	/*  35 */ char lockOnPriority;
	/*  36 */ char soundType;
	/*  37 */ char targetRadiusIn8ths;
	/*  38 */ char noAutoTrack;
	/*  39 */ char trackSpeedInMps;
	/*  3a */ char camModOverride;
	/*  3b */ char destroyMe;
	/*  3c */ char morphoraySpecial;
	/*  3d */ char headJoint;
	/*  3e */ char hitByContinuous;
	/*  3f */ char infected;
	/*  40 */ char empFxTimer;
	/*  41 */ char weaponTargetedOnMe;
	/*  42 */ char isOrganic;
	/*  43 */ signed char bundleIndex;
	/*  44 */ char bundleDamage;
	/*  45 */ char firedAt;
	/*  46 */ char weaponThatHurtMeLast;
	/*  47 */ char invalidTarget;
	/*  48 */ int maxDifficultySlotted;
	/*  4c */ int curDifficultySlotted;
	/*  50 */ moby* pTargettedByBogeys[8];
	/*  70 */ moby* mobyThatFiredAtMe;
	/*  74 */ int targetShadowMask;
	/*  78 */ int damageTypes;
	/*  7c */ int padA;
	/*  80 */ float morphDamage;
	/*  84 */ float freezeDamage;
	/*  88 */ float infectDamage;
	/*  8c */ float lastDamage;
};

struct BounceVars {
	/*   0 */ struct vec4 basePos;
	/*  10 */ struct vec4 basePosOfs;
	/*  20 */ struct vec4f baseRot;
	/*  30 */ float prms[3];
	/*  3c */ float prmSpeeds[3];
	/*  48 */ float prmAccels[3];
	/*  54 */ float prmDamps[3];
	/*  60 */ float prmLimits[3];
	/*  6c */ float prmFacs[3];
	/*  78 */ float prmImpulses[3];
	/*  84 */ float prmBobRots[3];
	/*  90 */ float prmBobSpds[3];
	/*  9c */ float prmBobAmps[3];
	/*  a8 */ int flags;
	/*  ac */ int wasteOfAVariableThatIsNotUsedButKeepsThingsAlignedNicely;
	/*  b0 */ int pad[4];
	/*  c0 */ char heroWasStanding[16];
};

struct FlyVars {
	/*   0 */ struct vec4 vel;
	/*  10 */ struct vec4 idealPos;
	/*  20 */ float bobRot[3];
	/*  2c */ float bobSpeed[3];
	/*  38 */ float bobAmp[3];
	/*  44 */ float idealGroundDist;
	/*  48 */ float idealHeroDist;
	/*  4c */ float minAltitude;
	/*  50 */ float maxAltitude;
	/*  54 */ int flags;
	/*  58 */ int pad[6];
};

struct ObjectiveLogic {
	/*   0 */ mobylink andObjective;
	/*   4 */ mobylink orObjective;
};

struct ObjectiveVars {
	/*   0 */ struct ObjectiveLogic successLogic;
	/*   8 */ struct ObjectiveLogic failureLogic;
	/*  10 */ char slave;
	/*  11 */ char pad[11];
};

struct FontMetric {
	/*   0 */ short unsigned int index;
	/*   0 */ short unsigned int kern;
	/*   2 */ short unsigned int u;
	/*   3 */ short unsigned int pre;
	/*   4 */ unsigned int v;
	/*   5 */ unsigned int drop;
	/*   6 */ unsigned int h;
	/*   6 */ unsigned int w;
	/*   7 */ unsigned int post;
};

struct FontKerning {
	/*   0 */ short int second;
	/*   2 */ signed char kern;
	/*   3 */ char end;
};

struct FontFileHeader {
	/*   0 */ char num_palettes;
	/*   1 */ char num_pages;
	/*   2 */ char padding[14];
	/*  10 */ char page_palette_map[2][16];
	/*  30 */ char palette_types[16];
	/*  40 */ char page_types[16];
	/*  50 */ short int page_sizes[2][16];
	/*  90 */ int palette_offsets[16];
	/*  d0 */ int page_offsets[16];
};

enum FontNames {
	FONT_NAMES_DEFAULT = 0,
	EUROSTILE_BOLDEXTENDED_TWO = 0,
	EUROSTILE_DEMI = 1,
	BOOTFONT = 2,
	FONT_NAMES_COUNT = 3
};

// warning: multiple differing types with the same name, only one recovered
struct sceCdCLOCK {
	/*   0 */ u_char stat;
	/*   1 */ u_char second;
	/*   2 */ u_char minute;
	/*   3 */ u_char hour;
	/*   4 */ u_char pad;
	/*   5 */ u_char day;
	/*   6 */ u_char month;
	/*   7 */ u_char year;
};

struct GameSettings {
	/*   0 */ int PalMode;
	/*   4 */ char HelpVoiceOn;
	/*   5 */ char HelpTextOn;
	/*   6 */ char SubtitlesActive;
	/*   8 */ int Stereo;
	/*   c */ int MusicVolume;
	/*  10 */ int EffectsVolume;
	/*  14 */ int VoVolume;
	/*  18 */ int CameraElevationDir[4][3];
	/*  48 */ int CameraAzimuthDir[4][3];
	/*  78 */ int CameraRotateSpeed[4][3];
	/*  a8 */ unsigned char FirstPersonModeOn[10];
	/*  b2 */ char _was_NTSCProgessive;
	/*  b3 */ char Wide;
	/*  b4 */ char ControllerVibrationOn[8];
	/*  bc */ char QuickSelectPauseOn;
	/*  bd */ char Language;
	/*  be */ char AuxSetting2;
	/*  bf */ char AuxSetting3;
	/*  c0 */ char AuxSetting4;
	/*  c1 */ char AutoSaveOn;
};

struct LobbyControllerSetup {
	/*   0 */ int CameraElevationDir[8][3];
	/*  60 */ int CameraAzimuthDir[8][3];
	/*  c0 */ int CameraRotateSpeed[8][3];
	/* 120 */ unsigned char FirstPersonModeOn[8];
	/* 128 */ char ControllerVibrationOn[8];
	/* 130 */ int nControllerPadIndices[4];
};

struct timeDeathMatch {
	/*   0 */ int timeLimit;
	/*   4 */ bool vehiclesOn;
	/*   5 */ bool friendlyFireOn;
	/*   6 */ bool suicideOn;
};

struct fragDeathMatch {
	/*   0 */ int fragLimit;
	/*   4 */ bool vechiclesOn;
	/*   5 */ bool suicideOn;
	/*   6 */ bool friendlyFireOn;
};

struct siegeMatch {
	/*   0 */ int timeLimit;
	/*   4 */ bool nodesOn;
	/*   5 */ bool aisOn;
	/*   6 */ bool vehiclesOn;
	/*   7 */ bool friendlyfireOn;
};

struct gameModeStruct {
	/*   0 */ int modeChosen;
	/*   4 */ struct siegeMatch siegeOptions;
	/*   c */ struct timeDeathMatch timeDeathMatchOptions;
	/*  14 */ struct fragDeathMatch fragDeathMatchOptions;
};

struct generalStatStruct {
	/*   0 */ int noofGamesPlayed;
	/*   4 */ int noofGamesWon;
	/*   8 */ int noofGamesLost;
	/*   c */ int noofKills;
	/*  10 */ int noofDeaths;
};

struct siegeMatchStatStruct {
	/*   0 */ int noofWins;
	/*   4 */ int noofLosses;
	/*   8 */ int winsPerLevel[6];
	/*  20 */ int lossesPerLevel[6];
	/*  38 */ int noofBaseCaptures;
	/*  3c */ int noofKills;
	/*  40 */ int noofDeaths;
};

struct deadMatchStatStruct {
	/*   0 */ int noofWins;
	/*   4 */ int noofLosses;
	/*   8 */ int winsPerLevel[6];
	/*  20 */ int lossesPerLevel[6];
	/*  38 */ int noofkills;
	/*  3c */ int noofDeaths;
};

struct cameraMode {
	/*   0 */ bool normalLeftRightMode;
	/*   1 */ bool normalUpDownMode;
	/*   4 */ int cameraSpeed;
};

struct profileStruct {
	/*   0 */ int skin;
	/*   4 */ struct cameraMode camerOptions[3];
	/*  1c */ unsigned char FirstPersonModeOn;
	/*  1d */ char name[16];
	/*  2d */ char password[16];
	/*  3d */ char mapAccess;
	/*  3e */ char palServer;
	/*  3f */ char helpMsgOff;
	/*  40 */ char savePassword;
	/*  41 */ char locationIdx;
	/*  44 */ struct generalStatStruct generalStats;
	/*  58 */ struct siegeMatchStatStruct siegeMatchStats;
	/*  9c */ struct deadMatchStatStruct deadMatchStats;
	/*  dc */ char active;
	/*  e0 */ int help_data[32];
	/* 160 */ char netEnabled;
	/* 161 */ char vibration;
	/* 162 */ short int musicVolume;
	/* 164 */ int extraDataPadding[31];
};

enum NWLobbyInitToType {
	eNWLobbyInitNotRelevantRightNow = -1,
	eNWLobbyInitToMain = 0,
	eNWLobbyInitToQuit = 1,
	eNWLobbyInitToNetworkDown = 2,
	eNWLobbyInitToOnline = 3,
	eNWLobbyInitToGameOver = 4,
	eNWLobbyInitToLocalGameOver = 5,
	eNWLobbyInitToProfileSelect = 6,
	eNWLobbyInitToProfile = 7,
	eNWLobbyInitToDebug = 8
};

struct tRecentPlayerInfo {
	/*   0 */ int accountId;
	/*   4 */ int gamesAgo;
	/*   8 */ char username[16];
};

struct tTeamStats {
	/*   0 */ int index[10];
	/*  28 */ float points[10];
	/*  50 */ int numPlayers;
	/*  54 */ int totalKills;
	/*  58 */ int totalDeaths;
	/*  5c */ int totalSuicides;
	/*  60 */ int conquestTicketScore;
};

struct tGameOverData {
	/*   0 */ int version;
	/*   4 */ int gameType;
	/*   8 */ int gameRules;
	/*   c */ int gameSubRules;
	/*  10 */ int gameDuration;
	/*  14 */ int gameEndReason;
	/*  18 */ int teamPlay;
	/*  1c */ int winningTeam;
	/*  20 */ int winningPlayer;
	/*  24 */ int ctfPointsToWin;
	/*  28 */ struct tTeamStats teamStats[10];
	/* 410 */ char playerNames[16][10];
	/* 4b0 */ int playerLocal[10];
	/* 4d8 */ int playerDropped[10];
	/* 500 */ int playerTeams[10];
	/* 528 */ short int weaponKills[9][10];
	/* 5dc */ short int weaponDeaths[9][10];
	/* 690 */ short int vehicleRoadKills[10];
	/* 6a4 */ short int playerKills[10];
	/* 6b8 */ short int playerDeaths[10];
	/* 6cc */ short int suicides[10];
	/* 6e0 */ short int multiKills[10];
	/* 6f4 */ short int sniperKills[10];
	/* 708 */ short int wrenchKills[10];
	/* 71c */ char conquestNodesCaptured[10];
	/* 726 */ char conquestNodeSaves[10];
	/* 730 */ char conquestDefensiveKills[10];
	/* 73a */ char conquestPoints[10];
	/* 744 */ char ctfFlagCaptures[10];
	/* 74e */ char ctfFlagSaves[10];
	/* 758 */ float kingHillHoldTime[10];
	/* 780 */ float juggernautTime[10];
	/* 7a8 */ float totalBaseHealth[2];
	/* 7b0 */ int mediusGameID;
	/* 7b4 */ int unixGameStartTime;
	/* 7b8 */ char killsToWin;
	/* 7b9 */ char ladderUpdated;
	/* 7ba */ short int reserved_0;
	/* 7bc */ float kingHillHoldTimeToWin;
	/* 7c0 */ int playerPoints[10];
	/* 7e8 */ int playerRank[10];
	/* 810 */ int accountIds[10];
	/* 838 */ int teamCaptureCounts[10];
	/* 860 */ short int squats[10];
	/* 874 */ short int vehicleSquats[10];
};

enum MissionLoadState {
	MISSIONLOAD_IDLE = 0,
	MISSIONLOAD_LOADDATA = 1,
	MISSIONLOAD_LOADSOUND = 2,
	MISSIONLOAD_WAITFORLOAD = 3,
	MISSIONLOAD_UNZIP_INSTANCES = 4,
	MISSIONLOAD_UNZIP_CLASSES = 5,
	MISSIONLOAD_WAITFORSOUND = 6,
	MISSIONLOAD_DONE = 7
};

struct MISSIONLOAD {
	/*   0 */ int ActiveMission;
	/*   4 */ int LoadingMission;
	/*   8 */ int ErrorCode;
	/*   c */ int QueuedMission;
	/*  10 */ bool Success;
	/*  11 */ bool ResetLevel;
	/*  12 */ bool Loading;
	/*  13 */ bool Parse;
	/*  14 */ bool Switch;
	/*  15 */ bool DoubleBuffer;
	/*  16 */ bool QueuedLoad;
	/*  17 */ bool InstancesActive;
	/*  18 */ bool ClassesActive;
	/*  19 */ bool InstancesLoaded;
	/*  1a */ bool ClassesLoaded;
	/*  1b */ bool SoundLoaded;
	/*  1c */ void* ActiveMissionClasses;
	/*  20 */ void* LoadingMissionClasses;
	/*  24 */ enum MissionLoadState State;
};

struct w_2legAnim {
	/*   0 */ int anim;
	/*   4 */ float stride;
	/*   8 */ float speed;
	/*   c */ float frame0;
	/*  10 */ float frames;
	/*  14 */ int fromIdle;
	/*  18 */ float move1Reset;
	/*  1c */ float move2Reset;
	/*  20 */ float heelRange[2];
	/*  28 */ float heelDown[2];
	/*  30 */ float heelUp[2];
	/*  38 */ float footRange[2];
	/*  40 */ float footDown[2];
	/*  48 */ float footUp[2];
};

struct w_legData {
	/*   0 */ char jiFoot;
	/*   1 */ char jiHeel;
	/*   2 */ char jiAnkle;
	/*   3 */ char jiHip;
	/*   4 */ short int idle;
	/*   6 */ short int _2mainIdle;
	/*   8 */ float frDest;
	/*   c */ float arAct;
	/*  10 */ float arSpeed;
	/*  14 */ float hrAct;
	/*  18 */ float hrSpeed;
	/*  1c */ float twistLow;
	/*  20 */ float twistHigh;
	/*  24 */ int pad[3];
	/*  30 */ struct Manipulator MAnkle;
	/*  70 */ struct Manipulator MHip;
};

struct w_2legData {
	/*   0 */ struct vec4 fpos[6];
	/*  60 */ struct vec4 jumpPos;
	/*  70 */ struct w_2legAnim* anims[13];
	/*  a4 */ int pad[3];
	/*  b0 */ char idle;
	/*  b1 */ char stand;
	/*  b2 */ char jumpc;
	/*  b3 */ char rjumpc;
	/*  b4 */ char moveJoint1;
	/*  b5 */ char moveJoint2;
	/*  b6 */ char onground;
	/*  b7 */ char state;
	/*  b8 */ float yrot;
	/*  bc */ float yrSpeed;
	/*  c0 */ float speed;
	/*  c4 */ float acc;
	/*  c8 */ float angVel;
	/*  cc */ float angGain;
	/*  d0 */ float angDamp;
	/*  d4 */ float angLimit;
	/*  d8 */ float zVel;
	/*  dc */ float grav;
	/*  e0 */ float stepHeight;
	/*  e4 */ float stepZ;
	/*  e8 */ float collZAdj;
	/*  ec */ short int counter;
	/*  ee */ short int flags;
	/*  f0 */ struct w_legData legs[2];
};

struct Cuboid {
	/*   0 */ struct mtx3 matrix;
	/*  30 */ struct vec4 pos;
	/*  40 */ struct mtx3 imatrix;
	/*  70 */ struct vec4f rot;
};

// warning: multiple differing types with the same name, only one recovered
struct CameraHeroData {
	/*   0 */ struct mtx4 mtx;
	/*  40 */ struct vec4 pos;
	/*  50 */ struct vec4f rot;
	/*  60 */ struct vec4 cg;
	/*  70 */ struct vec4 moveActualFromExternal;
	/*  80 */ struct vec4 groundGravity;
	/*  90 */ struct vec4 jumpGravity;
	/*  a0 */ struct vec4 sphereCenter;
	/*  b0 */ struct mtx3 fpsCamMtx;
	/*  e0 */ struct vec4 fpsCamPos;
	/*  f0 */ MobyInstance* pMoby;
	/*  f4 */ MobyInstance* vehicleMoby;
	/*  f8 */ MobyInstance* groundMoby;
	/*  fc */ int desiredCam;
	/* 100 */ int state;
	/* 104 */ int stateType;
	/* 108 */ int previousState;
	/* 10c */ float moveSpeed;
	/* 110 */ float moveSpeed2D;
	/* 114 */ float groundDist;
	/* 118 */ float groundWaterHeight;
	/* 11c */ int groundOnGood;
	/* 120 */ short int groundOffAny;
	/* 122 */ short int groundOffGood;
	/* 124 */ short int groundMagnetic;
	/* 126 */ short int lockOnStrafing;
	/* 128 */ short int jumpFramesToLand;
	/* 12a */ char jumpDescend;
	/* 12b */ char critterMode;
	/* 12c */ char multiplayer;
	/* 12d */ char fpsActive;
	/* 12e */ char hotSpotLava;
	/* 12f */ char hotSpotDeathSand;
	/* 130 */ char hotSpotQuickSand;
	/* 131 */ char hotSpotIceWater;
	/* 132 */ char hotSpotWater;
	/* 133 */ char aiFollowingMe;
	/* 134 */ PAD* pPad;
	/* 138 */ MobyInstance* pSwingTargetMoby;
	/* 13c */ float swingForwardAng;
	/* 140 */ float swingIdealRadius;
	/* 144 */ int timersLedgeCamAdj;
	/* 148 */ float ledgeWallAngZ;
	/* 14c */ int EOPtime;
	/* 150 */ struct Path* pPath;
	/* 154 */ int pad[3];
};

typedef /* function */ void** IOPVagStreamMonCallback;

struct IOPVagStreamMonitor {
	/*   0 */ u_int BufferSize;
	/*   4 */ char* IOPStartAddress;
	/*   8 */ char* NextIOPReadAddress;
	/*   c */ int TotalBytesConsumed;
	/*  10 */ IOPVagStreamMonCallback PreRingReadNotification;
	/*  14 */ IOPVagStreamMonCallback ConsumedRingDataNotification;
	/*  18 */ int PostCallbackSema;
	/*  1c */ char pad[36];
};

struct datablock {
	/*   0 */ int offset;
	/*   4 */ int length;
};

struct _gadget {
	/*   0 */ int moby_class;
	/*   4 */ struct datablock sram;
};

struct gadgetwad {
	/*   0 */ int hsize;
	/*   4 */ int sector;
	/*   8 */ struct _gadget gadgets[48];
};

struct SoundInstance {
	/*   0 */ short int oClass;
	/*   2 */ short int mClass;
	/*   4 */ /* function */ void** pUpdate;
	/*   8 */ void* pVar;
	/*   c */ float range;
	/*  10 */ struct Cuboid cuboid;
};

struct _sound_data {
	/*   0 */ u_int handle;
	/*   4 */ SoundDef* def;
	/*   8 */ short int index;
	/*   a */ short int def_index;
	/*   c */ short int volumeMod;
	/*   e */ short unsigned int occlpos;
	/*  10 */ char status;
	/*  11 */ char loop;
	/*  12 */ char priority;
	/*  13 */ char unused0;
	/*  14 */ int pitch;
	/*  18 */ int pitchMod;
	/*  1c */ moby* pMoby;
	/*  20 */ struct vec4 pos;
	/*  30 */ struct vec4 offset;
	/*  40 */ struct SoundInstance* pAmbient;
	/*  44 */ int lineEmitter;
	/*  48 */ int oClass;
	/*  4c */ float pan;
	/*  50 */ int delay;
	/*  54 */ int flags;
	/*  58 */ short unsigned int unique_id;
	/*  5a */ short unsigned int pad16_0;
	/*  5c */ char occl[36];
};

struct _sound_globals {
	/*   0 */ int sfxVol;
	/*   4 */ int musicVol;
	/*   8 */ int dialogVol;
	/*   c */ int ambientVol;
	/*  10 */ int shellVol;
	/*  14 */ int mpegVol;
	/*  18 */ int pad32_0[2];
	/*  20 */ int vol_backup[6];
	/*  38 */ int pad32_1[2];
	/*  40 */ char reverb_type;
	/*  41 */ char reverb_delay;
	/*  42 */ char reverb_feedback;
	/*  43 */ char reverb_changed;
	/*  44 */ moby* occl_ignore;
	/*  48 */ int cam_history_pos;
	/*  4c */ int load_busy;
	/*  50 */ struct vec4 cam_history[4];
	/*  90 */ void* handles[132];
	/* 2a0 */ int cam_ofs_frame;
	/* 2a4 */ short int kludgeVolState;
	/* 2a6 */ short int kludgeVolTimer;
	/* 2a8 */ struct SoundInstance* pReverbOwner;
	/* 2ac */ int reverb_depth;
	/* 2b0 */ int ambientCnt;
	/* 2b4 */ struct SoundInstance* pAmbient;
	/* 2c0 */ struct _sound_data channels[52];
	/* 1cc0 */ struct vec4 cam_ofs[6];
	/* 1d20 */ unsigned int volFlags;
	/* 1d24 */ int pad32_2[3];
};

typedef struct _sound_globals SoundGlobals;

enum eLevelID {
	L00_UNDEFINED = 0,
	L00_WRENCH = 1,
	L01_WRENCH = 2,
	L02_WRENCH = 3,
	L03_WRENCH = 4,
	L04_WRENCH = 5,
	L05_WRENCH = 6,
	L06_WRENCH = 7,
	L07_WRENCH = 8,
	L00_MACHINEGUN = 9,
	L01_MACHINEGUN = 10,
	L02_MACHINEGUN = 11,
	L03_MACHINEGUN = 12,
	L04_MACHINEGUN = 13,
	L05_MACHINEGUN = 14,
	L06_MACHINEGUN = 15,
	L07_MACHINEGUN = 16,
	L08_MACHINEGUN = 17,
	L09_MACHINEGUN = 18,
	L00_SHOTGUN = 19,
	L01_SHOTGUN = 20,
	L02_SHOTGUN = 21,
	L03_SHOTGUN = 22,
	L04_SHOTGUN = 23,
	L05_SHOTGUN = 24,
	L06_SHOTGUN = 25,
	L07_SHOTGUN = 26,
	L08_SHOTGUN = 27,
	L09_SHOTGUN = 28,
	L00_ROCKETLAUNCHER = 29,
	L01_ROCKETLAUNCHER = 30,
	L02_ROCKETLAUNCHER = 31,
	L03_ROCKETLAUNCHER = 32,
	L04_ROCKETLAUNCHER = 33,
	L05_ROCKETLAUNCHER = 34,
	L06_ROCKETLAUNCHER = 35,
	L07_ROCKETLAUNCHER = 36,
	L08_ROCKETLAUNCHER = 37,
	L09_ROCKETLAUNCHER = 38,
	L00_SNIPERGUN = 39,
	L01_SNIPERGUN = 40,
	L02_SNIPERGUN = 41,
	L03_SNIPERGUN = 42,
	L04_SNIPERGUN = 43,
	L05_SNIPERGUN = 44,
	L06_SNIPERGUN = 45,
	L07_SNIPERGUN = 46,
	L08_SNIPERGUN = 47,
	L09_SNIPERGUN = 48,
	L00_MINEGUN = 49,
	L01_MINEGUN = 50,
	L02_MINEGUN = 51,
	L03_MINEGUN = 52,
	L04_MINEGUN = 53,
	L05_MINEGUN = 54,
	L06_MINEGUN = 55,
	L07_MINEGUN = 56,
	L08_MINEGUN = 57,
	L09_MINEGUN = 58,
	L00_GRENADELAUNCHER = 59,
	L01_GRENADELAUNCHER = 60,
	L02_GRENADELAUNCHER = 61,
	L03_GRENADELAUNCHER = 62,
	L04_GRENADELAUNCHER = 63,
	L05_GRENADELAUNCHER = 64,
	L06_GRENADELAUNCHER = 65,
	L07_GRENADELAUNCHER = 66,
	L08_GRENADELAUNCHER = 67,
	L09_GRENADELAUNCHER = 68,
	L00_HOLOSHIELD = 69,
	L01_HOLOSHIELD = 70,
	L02_HOLOSHIELD = 71,
	L03_HOLOSHIELD = 72,
	L04_HOLOSHIELD = 73,
	L05_HOLOSHIELD = 74,
	L06_HOLOSHIELD = 75,
	L07_HOLOSHIELD = 76,
	L08_HOLOSHIELD = 77,
	L09_HOLOSHIELD = 78,
	L00_MINITURRET = 79,
	L01_MINITURRET = 80,
	L02_MINITURRET = 81,
	L03_MINITURRET = 82,
	L04_MINITURRET = 83,
	L05_MINITURRET = 84,
	L06_MINITURRET = 85,
	L07_MINITURRET = 86,
	L08_MINITURRET = 87,
	L09_MINITURRET = 88,
	L00_BFG = 89,
	L01_BFG = 90,
	L02_BFG = 91,
	L03_BFG = 92,
	L04_BFG = 93,
	L05_BFG = 94,
	L06_BFG = 95,
	L07_BFG = 96,
	L08_BFG = 97,
	L09_BFG = 98,
	L00_GRINDRAIL = 99,
	L00_EMP = 100,
	L00_HACKERRAY = 101,
	L00_MP_GRAPPLING_HOOK = 102,
	L00_FLAIL = 103,
	L01_FLAIL = 104,
	L02_FLAIL = 105,
	L03_FLAIL = 106,
	L04_FLAIL = 107,
	L05_FLAIL = 108,
	L06_FLAIL = 109,
	L07_FLAIL = 110,
	L08_FLAIL = 111,
	L09_FLAIL = 112,
	L00_SHIELDLINK = 113,
	L00_MP_CHARGE_BOOTS = 114,
	L00_MP_MAGNE_BOOTS = 115,
	L00_MP_GRIND_BOOTS = 116
};

struct GadgetPrice {
	/*   0 */ unsigned int purchase_price;
	/*   4 */ unsigned int discount_price;
	/*   8 */ short unsigned int ammo_price;
	/*   a */ short unsigned int pda_ammo_price;
	/*   c */ short unsigned int ammo_count;
	/*   e */ short unsigned int ammo_limit;
	/*  10 */ short unsigned int pad;
	/*  12 */ short unsigned int ammo_start;
	/*  14 */ unsigned int gold_price;
	/*  18 */ unsigned int mod_shock_price;
	/*  1c */ unsigned int mod_acid_price;
	/*  20 */ unsigned int mod_lock_on_price;
};

struct GadgetFPSData {
	/*   0 */ struct vec4a posOffset;
	/*  10 */ struct vec4a rotOffset;
};

typedef /* function */ void** GadgetTargetFunc;

struct GadgetLevels {
	/*   0 */ enum eLevelID levels[10];
};

struct GadgetDef {
	/*   0 */ int level;
	/*   4 */ short int pickupTag;
	/*   6 */ short int uppercaseTag;
	/*   8 */ short int quickSelectTag;
	/*   a */ short int description;
	/*   c */ short int basicGotTag;
	/*   e */ short int basicAmmoTag;
	/*  10 */ short int basicQSTag;
	/*  12 */ short int basicUCTag;
	/*  14 */ short int upgQSTag;
	/*  16 */ short int megaUpgQSTag;
	/*  18 */ short int upgUCTag;
	/*  1a */ short int megaUpgUCTag;
	/*  1c */ short int upgGotTag;
	/*  1e */ short int megaUpgGotTag;
	/*  20 */ short int mobyClass;
	/*  22 */ short int mobyClass2;
	/*  24 */ short int pvarSize1;
	/*  26 */ short int pvarSize2;
	/*  28 */ char isWeapon;
	/*  29 */ char plateID;
	/*  2a */ char basicPlateID;
	/*  2b */ char upgPlateID;
	/*  2c */ signed char type;
	/*  2d */ signed char joint;
	/*  2e */ signed char handGadgetType;
	/*  2f */ char knockback;
	/*  30 */ short int fullFireAnim;
	/*  32 */ short int armFireAnimDefault;
	/*  34 */ short int armFireAnimCrouch;
	/*  36 */ short unsigned int icon;
	/*  38 */ short int ammotag;
	/*  3a */ short int upgAmmotag;
	/*  3c */ short int ammoClass;
	/*  3e */ short int ammoAmount;
	/*  40 */ short unsigned int padButton;
	/*  42 */ short int maxAmmo;
	/*  44 */ short int mpMaxAmmo;
	/*  46 */ char cycleFire;
	/*  47 */ char rootID;
	/*  48 */ float metersPerSec1;
	/*  4c */ float shotsPerSec1;
	/*  50 */ struct GadgetPrice gadgetPrices;
	/*  80 */ struct GadgetFPSData gadgetFPSdata;
	/*  a0 */ GadgetTargetFunc gadgetTargetFunc;
};

struct GadgetLevelDef {
	/*   0 */ int level;
	/*   4 */ int levelUpExperience;
	/*   8 */ int mpLevelUpExperience;
	/*   c */ int ipadA;
	/*  10 */ float gadgetDamage[4];
};

struct GadgetMegaLevelInfo {
	/*   0 */ int levelUpExperience;
	/*   4 */ float damageIncrement;
	/*   8 */ int levelUpExperienceBase;
	/*   c */ int ipadB;
};

enum eModBasicType {
	MOD_BSC_UNDEFINED = 0,
	MOD_BSC_SPEED = 1,
	MOD_BSC_AMMO = 2,
	MOD_BSC_AIMING = 3,
	MOD_BSC_IMPACT = 4,
	MOD_BSC_AREA = 5,
	MOD_BSC_XP = 6,
	MOD_BSC_JACKPOT = 7,
	MOD_BSC_NANOLEECH = 8,
	TOTAL_BASIC_MODS = 9
	TOTAL_MOD_BSC_DEFS_SIZE = 9
};

enum eModPostFXType {
	MOD_PFX_UNDEFINED = 0,
	MOD_PFX_NAPALM = 1,
	MOD_PFX_ELECTRICDOOM = 2,
	MOD_PFX_FREEZING = 3,
	MOD_PFX_BOMBLETS = 4,
	MOD_PFX_MORPHING = 5,
	MOD_PFX_INFECTION = 6,
	MOD_PFX_PLAGUE = 7,
	MOD_PFX_SHOCK = 8,
	TOTAL_POSTFX_MODS = 9
	TOTAL_MOD_PFX_DEFS_SIZE = 9
};

enum eModWeaponType {
	MOD_WPN_UNDEFINED = 0,
	MOD_WPN_ROCKET_GUIDANCE = 1,
	MOD_WPN_SHOTGUN_WIDTH = 2,
	MOD_WPN_SHOTGUN_LENGTH = 3,
	MOD_WPN_GRENADE_MANUALDET = 4,
	MOD_WPN_MACHGUN_BEAM = 5,
	MOD_WPN_SNIPER_PIERCING = 6,
	TOTAL_WPN_MODS = 7
	TOTAL_MOD_WPN_DEFS_SIZE = 7
};

struct ModBasicEntry {
	/*   0 */ enum eModBasicType ID;
};

struct ModPostFXEntry {
	/*   0 */ enum eModPostFXType ID;
};

struct ModWeaponEntry {
	/*   0 */ enum eModWeaponType ID;
};

enum e_MOD_Levels {
	MOD_NOT_OWNED = -1,
	MOD_LEVEL_0 = 0,
	MOD_LEVEL_1 = 1,
	MOD_LEVEL_2 = 2,
	MOD_LEVEL_3 = 3,
	MOD_LEVEL_4 = 4,
	MOD_LEVEL_5 = 5,
	MOD_LEVEL_6 = 6,
	MOD_LEVEL_7 = 7,
	MOD_LEVEL_8 = 8,
	MOD_LEVEL_9 = 9
};

struct ModPrices {
	/*   0 */ unsigned int purchase_price;
	/*   4 */ unsigned int discount_price;
};

struct GadgetUpgMods {
	/*   0 */ enum eModBasicType basicMods[10];
};

struct ModBasicDef {
	/*   0 */ enum eModBasicType modType;
	/*   4 */ enum e_MOD_Levels sLevel;
	/*   8 */ short int mobyClass;
	/*   a */ short int pvarSize;
	/*   c */ char rootID;
	/*   d */ char supportedRootID[10];
	/*  18 */ float fModifier;
	/*  1c */ short unsigned int icon;
	/*  1e */ short int sUCNameTag;
	/*  20 */ short int sModTag;
	/*  22 */ short int sWpnTag;
	/*  24 */ short int sQuickSelectTag;
	/*  26 */ short int sAmmoTag;
	/*  28 */ short int sUpgradeMsg;
	/*  2a */ short int description;
	/*  2c */ short int plateID;
	/*  30 */ struct ModPrices modPrices;
};

struct ModPostFXDef {
	/*   0 */ enum eModPostFXType modType;
	/*   4 */ short int mobyClass;
	/*   6 */ short int pvarSize;
	/*   8 */ char rootID;
	/*   9 */ char supportedRootID[10];
	/*  14 */ short unsigned int icon;
	/*  16 */ short int sUCNameTag;
	/*  18 */ short int sModTag;
	/*  1a */ short int sWpnTag;
	/*  1c */ short int sQuickSelectTag;
	/*  1e */ short int sAmmoTag;
	/*  20 */ short int sUpgradeMsg;
	/*  22 */ short int description;
	/*  24 */ short int plateId;
	/*  26 */ short int sFXtimer;
	/*  28 */ float fModifier;
	/*  2c */ float fDamage;
	/*  30 */ struct ModPrices modPrices;
};

struct ModWeaponDef {
	/*   0 */ enum eModWeaponType modType;
	/*   4 */ short int mobyClass;
	/*   6 */ short int pvarSize;
	/*   8 */ char rootID;
	/*   9 */ char supportedRootID;
	/*   c */ float fModifier;
	/*  10 */ short unsigned int icon;
	/*  12 */ short int sUCNameTag;
	/*  14 */ short int sModTag;
	/*  16 */ short int sWpnTag;
	/*  18 */ short int sQuickSelectTag;
	/*  1a */ short int sAmmoTag;
	/*  1c */ short int description;
	/*  1e */ short int plateID;
	/*  20 */ struct ModPrices modPrices;
};

typedef /* function */ void* RawPadInputCbFunc;

struct PAD {
	/*   0 */ long long unsigned int pad_buf[16];
	/* 100 */ float analog[16];
	/* 140 */ float hudAnalog[16];
	/* 180 */ unsigned char profile[4];
	/* 184 */ unsigned char vib_profile[4];
	/* 188 */ unsigned char act_direct[4];
	/* 18c */ short int invalidTimer;
	/* 18e */ short int ringIndex;
	/* 190 */ int ringValidSize;
	/* 194 */ int socket;
	/* 198 */ int phase;
	/* 19c */ int state;
	/* 1a0 */ int bits;
	/* 1a4 */ int bitsOn;
	/* 1a8 */ int bitsOff;
	/* 1ac */ int bitsPrev;
	/* 1b0 */ int digitalBits;
	/* 1b4 */ int digitalBitsOn;
	/* 1b8 */ int digitalBitsOff;
	/* 1bc */ int digitalBitsPrev;
	/* 1c0 */ int hudBits;
	/* 1c4 */ int hudBitsOn;
	/* 1c8 */ int hudBitsOff;
	/* 1cc */ int hudDivert;
	/* 1d0 */ int handsOff;
	/* 1d4 */ int handsOffStick;
	/* 1d8 */ int useAnalog;
	/* 1dc */ int term_id;
	/* 1e0 */ int bitsOnRing[30];
	/* 258 */ float analogAngRing[30];
	/* 2d0 */ float analogMagRing[30];
	/* 348 */ int unmaskedBits;
	/* 34c */ int lagIndex;
	/* 350 */ int lagValidSize;
	/* 354 */ int bits_Lagged[7];
	/* 370 */ int digitalBits_Lagged[7];
	/* 38c */ float analog_Lagged[16][7];
	/* 54c */ u_char port;
	/* 54d */ u_char repeatDelay;
	/* 54e */ u_char repeatSpeed;
	/* 54f */ u_char repeatCounter;
	/* 550 */ u_char multi_tap_connected;
	/* 551 */ u_char disconnected;
	/* 552 */ unsigned char act_align[6];
	/* 558 */ u_char slot;
	/* 559 */ char initialized;
	/* 55c */ int rterm_id;
	/* 560 */ int id;
	/* 564 */ int exid;
	/* 568 */ int lagFrames;
	/* 56c */ RawPadInputCbFunc* RawPadInputCallback;
	/* 570 */ void* pCallbackData;
	/* 574 */ unsigned char rdata[32];
	/* 594 */ int ipad[10];
};

// warning: multiple differing types with the same name, only one recovered
struct RSA_KEY {
	/*   0 */ unsigned int key[16];
};

typedef NetTypeConnectionInfo* HDME;

// warning: multiple differing types with the same name, only one recovered
enum NetConnectionType {
	NetConnectionNone = 0,
	NetConnectionTypeClientServerTCP = 1,
	NetConnectionTypePeerToPeerUDP = 2,
	NetConnectionTypeClientServerTCPAuxUDP = 3,
	NetConnectionTypeClientListenerTCP = 4,
	ExtraNetConnectionType = 16777215
};

// warning: multiple differing types with the same name, only one recovered
enum NetAddressType {
	NetAddressNone = 0,
	NetAddressTypeExternal = 1,
	NetAddressTypeInternal = 2,
	NetAddressTypeNATService = 3,
	NetAddressTypeBinaryExternal = 4,
	NetAddressTypeBinaryInternal = 5,
	NetAddressTypeBinaryExternalVport = 6,
	NetAddressTypeBinaryInternalVport = 7,
	NetAddressTypeBinaryNATServices = 8,
	ExtraNetAddressType = -1
};

// warning: multiple differing types with the same name, only one recovered
struct NetAddress {
	/*   0 */ enum NetAddressType AddressType;
	/*   4 */ char Address[16];
	/*  14 */ unsigned int Port;
};

// warning: multiple differing types with the same name, only one recovered
struct NetAddressList {
	/*   0 */ struct NetAddress aAddressList[2];
};

// warning: multiple differing types with the same name, only one recovered
struct NetConnectionInfo {
	/*   0 */ enum NetConnectionType Type;
	/*   4 */ struct NetAddressList AddressList;
	/*  34 */ int WorldID;
	/*  38 */ struct RSA_KEY ServerKey;
	/*  78 */ char aSessionKey[17];
	/*  89 */ char aAccessKey[17];
};

// warning: multiple differing types with the same name, only one recovered
enum NetOwnershipStatus {
	OwnershipNone = 0,
	OwnershipPrivate = 1,
	OwnershipShared = 2,
	OwnershipNotAvailable = 3,
	ExtraNetOwnershipStatus = 16777215
};

// warning: multiple differing types with the same name, only one recovered
enum NetObjectOwnershipType {
	NetObjectOwnershipNone = 0,
	NetObjectOwnershipGranted = 1,
	NetObjectOwnershipDenied = 2,
	NetObjectOwnershipNotShared = 3,
	NetObjectOwnershipShared = 4,
	ExtraNetObjectOwnershipType = -1
};

typedef /* function */ void** NetTypeRemoteClientEventCallback;
typedef /* function */ void** NetTypeOwnershipUpdateCallback;
typedef /* function */ void** NetTypeOwnershipRequestCallback;
typedef /* function */ void** NetTypeCompletionCallback;
typedef /* function */ void** NetTypeSMChangeCallback;

// warning: multiple differing types with the same name, only one recovered
struct NetJoinInParams {
	/*   0 */ int bDefaultSet;
	/*   4 */ HDME ConnectionHandle;
	/*   8 */ char szClientName[12];
	/*  14 */ int NetObjectCount;
	/*  18 */ int DataStreamCount;
	/*  1c */ enum NetOwnershipStatus SessionMasterStatus;
	/*  20 */ NetTypeCompletionCallback pfLocalJoinCallback;
	/*  24 */ void* pJoinCallbackData;
	/*  28 */ NetTypeRemoteClientEventCallback pfRemoteClientEventCallback;
	/*  2c */ void* pRemoteClientEventCallbackData;
	/*  30 */ NetTypeSMChangeCallback pfSMChangeCallback;
	/*  34 */ void* pSMChangeCallbackData;
	/*  38 */ NetTypeOwnershipUpdateCallback pfOwnershipUpdateCallback;
	/*  3c */ void* pOwnershipUpdateCallbackData;
	/*  40 */ NetTypeOwnershipRequestCallback pfOwnershipRequestCallback;
	/*  44 */ void* pOwnershipRequestCallbackData;
};

// warning: multiple differing types with the same name, only one recovered
struct NetTypeFloatVector3 {
	/*   0 */ float x;
	/*   4 */ float y;
	/*   8 */ float z;
};

enum MGCL_TRUST_LEVEL {
	MGCL_TRUSTED = 0,
	MGCL_NOT_TRUSTED = 1,
	ExtraMGCLTrustLevelCode = 16777215
};

struct MediusServerAuthenticationRequest {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MGCL_TRUST_LEVEL TrustLevel;
	/*  1c */ struct NetAddressList AddressList;
};

struct MediusServerConnectGamesRequest {
	/*   0 */ char MessageID[21];
	/*  15 */ char ServerIP[20];
	/*  2c */ int ServerPort;
	/*  30 */ int GameWorldID;
	/*  34 */ int SpectatorWorldID;
};

struct tNW_PlayerPadInputMessage {
	/*   0 */ int cameraRot[4];
	/*  10 */ short unsigned int playerPos[3];
	/*  16 */ unsigned char sequenceNum;
	/*  17 */ unsigned char stateAndRotFlag;
	/*  17 */ unsigned char playerIndex;
	/*  17 */ unsigned char flags;
	/*  17 */ unsigned char framesWithButtonDiffs;
	/*  18 */ unsigned char pad_data[128];
};

struct tNW_PlayerWarpMessage {
	/*   0 */ char netPlayerIndex;
	/*   1 */ char dontKillMeInBaseHack;
	/*   2 */ char resetPadRing;
	/*   3 */ char playerSeq;
	/*   4 */ struct vec3 playerPos;
	/*  10 */ struct vec3 playerRot;
	/*  1c */ short int state;
	/*  1e */ char isResurrecting;
};

struct tNW_GadgetEventMessage {
	/*   0 */ short int gadgetId;
	/*   2 */ char playerIndex;
	/*   3 */ char gadgetEventType;
	/*   4 */ char extraData;
	/*   8 */ int activeTime;
	/*   c */ unsigned int targetUID;
	/*  10 */ struct vec3 firingLoc;
	/*  1c */ struct vec3 targetDir;
};

struct GadgetEvent {
	/*   0 */ unsigned char gadgetID;
	/*   1 */ unsigned char cPlayerIndex;
	/*   2 */ char cGadgetType;
	/*   3 */ char gadgetEventType;
	/*   4 */ int iActiveTime;
	/*   8 */ unsigned int targetUID;
	/*  10 */ struct vec4 targetOffsetQuat;
	/*  20 */ struct GadgetEvent* pNextGadgetEvent;
	/*  24 */ struct tNW_GadgetEventMessage gadgetEventMsg;
};

struct GadgetEntry {
	/*   0 */ short int level;
	/*   2 */ short int sAmmo;
	/*   4 */ unsigned int sXP;
	/*   8 */ int iActionFrame;
	/*   c */ struct ModPostFXEntry modActivePostFX;
	/*  10 */ struct ModWeaponEntry modActiveWeapon;
	/*  14 */ struct ModBasicEntry modActiveBasic[10];
	/*  3c */ struct ModWeaponEntry modWeapon[2];
};

struct GadgetBox {
	/*   0 */ char initialized;
	/*   1 */ char level;
	/*   2 */ char bButtonDown[10];
	/*   c */ short int sButtonUpFrames[10];
	/*  20 */ char cNumGadgetEvents;
	/*  21 */ char modBasic[8];
	/*  2a */ short int modPostFX;
	/*  2c */ struct GadgetEvent* pNextGadgetEvent;
	/*  30 */ struct GadgetEvent gadgetEventSlots[32];
	/* a30 */ struct GadgetEntry gadgets[32];
	static int g_PostFXFlags[0];
	static int g_AmmoModChart[0];
	static struct GadgetUpgMods g_BasicModUpgChart[0];
	static struct GadgetLevels g_GadgetLevels[0];
	static struct GadgetLevelDef g_GadgetLevelDefs[0];
	static struct GadgetDef g_GadgetDefs[0];
	static struct GadgetMegaLevelInfo g_GadgetMegaLevelInfos[0];
	static struct ModBasicDef g_Mod_Basic_Defs[0];
	static struct ModPostFXDef g_Mod_PostFX_Defs[0];
	static struct ModWeaponDef g_Mod_Weapon_Defs[0];
};

struct tNW_PlayerData {
	/*   0 */ struct vec4 vPosition;
	/*  10 */ struct NetTypeFloatVector3 vRotation;
	/*  1c */ int timeStamp;
	/*  20 */ struct vec4 vIdealVec;
	/*  30 */ int idealVecTime;
	/*  34 */ int accountId;
	/*  38 */ unsigned int UID;
	/*  3c */ int playerType;
	/*  40 */ int playerTeam;
	/*  44 */ float hitPoints;
	/*  48 */ int handGadget;
	/*  4c */ int lastKeepAlive;
	/*  50 */ int remoteTarget;
	/*  54 */ int playerIndex;
	/*  58 */ int cameraElevationSettings[3];
	/*  64 */ int cameraAzimuthSettings[3];
	/*  70 */ int cameraRotationSettings[3];
	/*  7c */ int rank[6];
	/*  94 */ char cGadgetLevel[32];
	/*  b4 */ unsigned int updated;
	/*  b8 */ short unsigned int gadgetsWithAmmo;
	/*  ba */ short unsigned int fpsMode;
	/*  bc */ unsigned char flags;
};

struct tNW_PlayerPadInputMessageListElem {
	/*   0 */ struct tNW_PlayerPadInputMessage msg;
	/*  98 */ struct tNW_PlayerPadInputMessageListElem* pNext;
	/*  9c */ struct tNW_PlayerPadInputMessageListElem* pPrev;
	/*  a0 */ bool inUse;
};

struct tNW_Player {
	/*   0 */ int netClientIndex;
	/*   4 */ struct tNW_PlayerData* pNetPlayerData;
	/*   8 */ short int bLocal;
	/*   a */ short int bSpawned;
	/*   c */ short int bGiveMeTheDasBoot;
	/*   e */ short int bCallbackCalled;
	/*  10 */ int latency;
	/*  14 */ unsigned int flags;
	/*  18 */ char accountName[32];
	/*  38 */ struct tNW_PlayerWarpMessage warpMessage;
	/*  58 */ struct tNW_PlayerPadInputMessageListElem padMessageElems[16];
	/* a98 */ char padMessageCurDecodePos;
	/* a99 */ char activePadFrame;
	/* a9c */ int lastActiveSeqNum;
	/* aa0 */ int numBufferedPadMessageElems;
	/* aa4 */ int receivedActivePadMsgFrame;
	/* aa8 */ char pullBack;
	/* aa9 */ signed char jitterThrottleFrames;
	/* aaa */ char numConseqSkips;
	/* aac */ struct tNW_PlayerPadInputMessageListElem* pActivePadMsg;
	/* ab0 */ struct tNW_PlayerPadInputMessageListElem* pPadMsgListTail;
	/* ab4 */ unsigned char padFrame[20];
	/* ac8 */ int homeBaseIndex;
	/* acc */ int homeNodeIndex;
};

struct tGadgetConstants {
	/*   0 */ short int maxAmmo[20];
	/*  28 */ float metersPerSecond[20];
	/*  78 */ float shotsPerSecond[20];
	/*  c8 */ float gadgetDamage1[20];
	/* 118 */ float gadgetDamage2[20];
	/* 168 */ float kBuggyDriverDamage;
	/* 16c */ float kBuggyPassengerDamage;
	/* 170 */ float M4222_DAMAGE_HP;
	/* 174 */ float kMineBomberDamage;
	/* 178 */ float M4290_FireDamage;
	/* 17c */ int check1;
	/* 180 */ int check2;
	/* 184 */ int check3;
	/* 188 */ int check4;
};

struct HelpDatum {
	/*   0 */ short unsigned int timesUsed;
	/*   2 */ short unsigned int counter;
	/*   4 */ unsigned int lastTime;
	/*   8 */ unsigned int level_die;
};

struct MissionQueueCell {
	/*   0 */ char level;
	/*   1 */ char number;
};

struct MF_MissionSave {
	/*   0 */ int xp;
	/*   4 */ int bolts;
	/*   8 */ unsigned char status;
	/*   9 */ unsigned char completes;
	/*   a */ unsigned char difficulty;
};

struct MF_LevelSave {
	/*   0 */ struct MF_MissionSave mission[64];
	/* 300 */ unsigned char status;
	/* 301 */ unsigned char jackpot;
};

struct memcard_saveinfo {
	/*   0 */ int level;
	/*   4 */ int bolts;
	/*   8 */ int completes;
	/*   c */ int elapsedTime;
	/*  10 */ struct sceCdCLOCK saveTime;
	/*  18 */ int savedDifficultyLevel;
	/*  1c */ int bad;
};

struct memcard_data {
	/*   0 */ int port;
	/*   4 */ int slot;
	/*   8 */ int type;
	/*   c */ int free;
	/*  10 */ int changed;
	/*  14 */ int format;
	/*  18 */ short int saveslot;
	/*  1a */ short int curslot;
	/*  1c */ int RC1and2_weapons_checked;
	/*  20 */ int corrupt_size;
	/*  24 */ u_int patch_size;
	/*  28 */ int oldsave;
	/*  2c */ int gamesize;
	/*  30 */ int levelsize;
	/*  34 */ struct memcard_saveinfo info[5];
};

struct memcard_globals {
	/*   0 */ struct memcard_data memcards[2];
	/* 1a8 */ int cmd;
	/* 1ac */ int res;
	/* 1b0 */ int useslot;
	/* 1b4 */ int slot;
	/* 1b8 */ int level;
	/* 1bc */ int sync;
	/* 1c0 */ int file;
	/* 1c4 */ int stage;
	/* 1c8 */ int substage;
	/* 1cc */ int nextstage;
	/* 1d0 */ int nextslot;
	/* 1d4 */ int err;
	/* 1d8 */ int errslot;
	/* 1dc */ char* addr;
	/* 1e0 */ int size;
	/* 1e4 */ int autosave;
	/* 1e8 */ int checkslot;
	/* 1ec */ int timer;
	/* 1f0 */ int savesize;
};

struct _BotSave {
	/*   0 */ char botUpgrades[17];
	/*  11 */ char botPaintjobs[11];
	/*  1c */ char botHeads[8];
	/*  24 */ char curBotPaintJob[2];
	/*  26 */ char curBotHead[2];
};

struct music_Loc {
	/*   0 */ u_int sector;
	/*   4 */ u_int offset;
};

struct music_Track {
	/*   0 */ struct music_Loc left;
};

struct music_Playing {
	/*   0 */ u_int handle;
	/*   4 */ short int track;
	/*   6 */ short int volume;
	/*   8 */ short int flags;
	/*   a */ short int status;
	/*   c */ short int pause;
	/*   e */ short int unpause;
	/*  10 */ short int transition;
	/*  12 */ short int fade;
	/*  14 */ int queuelen;
	/*  18 */ int remain;
	/*  1c */ MobyInstance* pMoby;
	/*  20 */ int channel;
	/*  24 */ int timer;
};

struct music_Globals {
	/*   0 */ struct music_Track* trackPos;
	/*   4 */ short int loading;
	/*   6 */ char stop;
	/*   7 */ char off;
	/*   8 */ int lsn;
	/*   c */ int* pCallbackFlag;
	/*  10 */ int len;
	/*  14 */ void* buff;
	/*  18 */ /* function */ void** load_cb;
	/*  1c */ void* load_cb_data;
	/*  20 */ int pause;
	/*  24 */ int nextspeech_track;
	/*  28 */ MobyInstance* nextspeech_moby;
	/*  2c */ short int transition;
	/*  2e */ short int pad0;
	/*  30 */ int transition_length;
	/*  34 */ int transition_fade_time;
	/*  38 */ int transition_delay;
	/*  3c */ short int transition_track;
	/*  3e */ short int transition_transition;
	/*  40 */ struct sceCdRMode CdRMode;
	/*  44 */ struct music_Playing play;
	/*  6c */ struct music_Playing speech;
	/*  94 */ struct music_Playing queued_speech;
	/*  bc */ struct music_Playing trans;
};

struct fsAABuff {
	/*   0 */ struct sceGsDispEnv disp;
	/*  30 */ struct sceGifTag giftagDrawLarge;
	/*  40 */ struct sceGsDrawEnv1 drawLarge;
	/*  c0 */ struct sceGifTag giftagDrawSmall;
	/*  d0 */ struct sceGsDrawEnv1 drawSmall;
	/* 150 */ short int drawW;
	/* 152 */ short int drawH;
	/* 154 */ short int drawPSM;
	/* 156 */ short int drawFBP;
	/* 158 */ short int dispW;
	/* 15a */ short int dispH;
	/* 15c */ short int dispPSM;
	/* 15e */ short int dispFBP;
	/* 160 */ short int auxW;
	/* 162 */ short int auxH;
	/* 164 */ short int auxPSM;
	/* 166 */ short int auxFBP;
	/* 168 */ short int dispOfsX;
	/* 16a */ short int dispOfsY;
	/* 16c */ short int zPSM;
	/* 16e */ short int zFBP;
	/* 170 */ int update_context;
};

struct SpaceHeader {
	/*   0 */ int wad_1_ofs;
	/*   4 */ int wad_2_ofs;
	/*   8 */ int gs_ram_cnt;
	/*   c */ int gs_ram_ofs;
	/*  10 */ int moby_class_cnt;
	/*  14 */ int moby_class_ofs;
	/*  18 */ int moby_tex_cnt;
	/*  1c */ int moby_tex_ofs;
	/*  20 */ int part_tex_cnt;
	/*  24 */ int part_tex_ofs;
	/*  28 */ int fx_tex_cnt;
	/*  2c */ int fx_tex_ofs;
	/*  30 */ int shared_tex_ofs;
	/*  34 */ int part_bank_ofs;
	/*  38 */ int fx_bank_ofs;
	/*  3c */ int part_defs_ofs;
	/*  40 */ int chrome_map_tex;
	/*  44 */ int chrome_map_pal;
	/*  48 */ int sky_main_ofs;
	/*  4c */ int pad_i;
	/*  50 */ int movie_ofs[5];
	/*  64 */ int sound_bank_0_ofs;
	/*  68 */ int sound_bank_1_ofs;
	/*  6c */ int sound_bank_2_ofs;
	/*  70 */ int sound_bank_3_ofs;
	/*  74 */ int sound_bank_4_ofs;
	/*  78 */ int pads[2];
};

typedef int i32;
typedef /* function */ void** PFN_FSFUNC;

// warning: multiple differing types with the same name, only one recovered
struct _Flags {
	/*   0 */ unsigned int b_is_initialized;
	/*   0 */ unsigned int pad31_0;
};

// warning: multiple differing types with the same name, only one recovered
struct astrmManager {
	/*   0 */ unsigned int num_streams;
	/*   4 */ struct _Flags Flags;
	/*   8 */ unsigned int core_status[2];
	/*  10 */ unsigned int streams_used;
};

struct gadgetCacheSlot {
	/*   0 */ i32 state;
	/*   1 */ i32 index;
	/*   1 */ i32 moby_class;
	/*   3 */ i32 player;
	/*   4 */ i32 unload_timer;
	/*   8 */ unsigned int pad32_0[2];
};

struct gadgetCacheMgr {
	/*   0 */ unsigned int b_is_initialized;
	/*   0 */ unsigned int pad31_0;
	/*   4 */ short int load_requests[2];
	/*   8 */ unsigned int pad32_0[3];
	/*  14 */ struct gadgetCacheSlot cache_slots[3];
};

enum IOPMODULEFUNCTIONSET {
	IOPMODULEFUNCTIONSET_NONE = 0,
	IOPMODULEFUNCTIONSET_SIO2MAN = 1,
	IOPMODULEFUNCTIONSET_MULTITAP_MANAGER = 2,
	IOPMODULEFUNCTIONSET_MCMAN = 3,
	IOPMODULEFUNCTIONSET_MCSERV = 4,
	IOPMODULEFUNCTIONSET_PADMAN = 5,
	IOPMODULEFUNCTIONSET_SOUND_DEVICE_LIBRARY = 6,
	IOPMODULEFUNCTIONSET_989SND_LIBRARY = 7,
	IOPMODULEFUNCTIONSET_STREAMER = 8,
	IOPMODULEFUNCTIONSET_ASTRM = 9,
	IOPMODULEFUNCTIONSET_DEV9 = 10,
	IOPMODULEFUNCTIONSET_IOP_MSIF_RPC_INTERFACE = 11,
	IOPMODULEFUNCTIONSET_NET_CONFIGURATION = 12,
	IOPMODULEFUNCTIONSET_EZNETCNF = 13,
	IOPMODULEFUNCTIONSET_INET_SERVICE = 14,
	IOPMODULEFUNCTIONSET_INET_CONTROL = 15,
	IOPMODULEFUNCTIONSET_INET_PPP = 16,
	IOPMODULEFUNCTIONSET_INET_PPPOE = 17,
	IOPMODULEFUNCTIONSET_LIBNET = 18,
	IOPMODULEFUNCTIONSET_INET_SMAP_DRIVER = 19,
	IOPMODULEFUNCTIONSET_USB_DRIVER = 20,
	IOPMODULEFUNCTIONSET_LGKBM = 21,
	IOPMODULEFUNCTIONSET_LGAUD = 22,
	IOPMODULEFUNCTIONSET_EZNETCTL_INET = 23
};

struct IOPMODULELOAD {
	/*   0 */ int module_id;
	/*   4 */ int module_expected_size;
	/*   8 */ int module_load_size;
	/*   c */ int module_unload_size;
	/*  10 */ int module_memory_leak;
	/*  14 */ int argument_size;
	/*  18 */ char arguments[256];
	/* 118 */ char name[64];
	/* 158 */ bool loaded;
	/* 15c */ void* irx_data;
	/* 160 */ struct datablock* irx_module;
	/* 164 */ enum IOPMODULEFUNCTIONSET function_set;
};

struct IOPMODULELOADQUEUE {
	/*   0 */ int num_iop_modules;
	/*   4 */ int max_size;
	/*   8 */ int actual_load_size;
	/*   c */ int expected_load_size;
	/*  10 */ struct IOPMODULELOAD iop_modules[25];
};

struct ST_PlayerData {
	/*   0 */ unsigned int healthReceived;
	/*   4 */ unsigned int damageReceived;
	/*   8 */ unsigned int ammoReceived;
	/*   c */ unsigned int timeChargeBooting;
	/*  10 */ unsigned int numDeaths;
	/*  14 */ unsigned int weaponKills[20];
	/*  64 */ float weaponKillPercentage[20];
	/*  b4 */ unsigned int ammoUsed[20];
	/* 104 */ unsigned int shotsThatHit[20];
	/* 154 */ unsigned int shotsThatMiss[20];
	/* 1a4 */ float shotAccuracy[20];
	/* 1f4 */ unsigned int funcModKills[9];
	/* 218 */ unsigned int funcModUsed[9];
	/* 23c */ unsigned int timeSpentInVehicles[4];
	/* 24c */ unsigned int killsWithVehicleWeaps[4];
	/* 25c */ unsigned int killsFromVehicleSquashing[4];
	/* 26c */ unsigned int killsWhileInVehicle;
	/* 270 */ unsigned int vehicleShotsThatHit[4];
	/* 280 */ unsigned int vehicleShotsThatMiss[4];
	/* 290 */ float vehicleShotAccuracy[4];
};

struct ST_EnemyKillInfo {
	/*   0 */ int oClass;
	/*   4 */ int kills;
};

struct LoadLogEntry {
	/*   0 */ char sz_file[64];
	/*  40 */ char sz_function[64];
	/*  80 */ int line;
	/*  84 */ unsigned int args[4];
};

enum LoadType {
	FSLT_FILE = 0,
	FSLT_MISSION_BANK = 1,
	FSLT_COUNT = 2
};

typedef /* function */ void** PFN_LOADCOMPLETE;

// warning: multiple differing types with the same name, only one recovered
struct InitParams {
	/*   0 */ unsigned int max_buffers;
	/*   4 */ unsigned int pad32_0[3];
};

// warning: multiple differing types with the same name, only one recovered
struct _Host {
	/*   0 */ unsigned int offset;
	/*   4 */ i32 handle;
	/*   8 */ unsigned int pad32_1_0[2];
	/*  10 */ char filename[64];
};

struct _cddvd {
	/*   0 */ unsigned int b_cd_load_complete;
	/*   4 */ struct sceCdRMode cd_read_mode;
	/*   8 */ unsigned int pad32_1[2];
};

struct _host {
	/*   0 */ int h_file;
	/*   4 */ unsigned int pad32_2[3];
};

struct DeviceArgs {
	union  {
		/*   0 */ struct _cddvd cddvd;
		/*   0 */ struct _host host;
		/*   0 */ unsigned int a[4];
	} ;
};

struct _file {
	/*   0 */ void* p_buffer;
	/*   4 */ unsigned int lsn;
	/*   8 */ unsigned int length;
	/*   c */ void* p_wad;
};

struct _mission_bank {
	/*   0 */ unsigned int mission;
	/*   4 */ SoundBankPtr* m_pp_bank_handle;
	/*   8 */ unsigned int pad32_0[2];
};

struct LoadArgs {
	union  {
		/*   0 */ struct _file file;
		/*   0 */ struct _mission_bank mission_bank;
		/*   0 */ unsigned int a[4];
	} ;
};

struct FsDesc {
	/*   0 */ float time_elapsed;
	/*   4 */ unsigned int state;
	/*   8 */ unsigned int command;
	/*   c */ PFN_LOADCOMPLETE p_fn_load_complete;
	/*  10 */ void* p_load_complete_args;
	/*  14 */ unsigned int load_type;
	/*  18 */ unsigned int pad32_0[2];
	/*  20 */ struct LoadArgs load_args;
	/*  30 */ struct DeviceArgs device_args;
};

typedef char* caddr_t;

// warning: multiple differing types with the same name, only one recovered
struct NetTypeObject {
	/*   0 */ unsigned char StructureIndex;
	/*   1 */ unsigned char FilterType;
	/*   2 */ unsigned char LifespanType;
	/*   3 */ unsigned char LatencyCritical;
	/*   4 */ int OwnerClientIndex;
	/*   8 */ int CreatorClientIndex;
	/*   c */ char Name[16];
	/*  1c */ char* CurrentObjectData;
	/*  20 */ char* LastGlobalObjectDataUpdate;
	/*  24 */ unsigned int HiFieldChangeSet;
	/*  28 */ unsigned int LoFieldChangeSet;
	/*  2c */ unsigned int TimeOfExpiration;
	/*  30 */ unsigned int MaxUpdateInterval;
	/*  34 */ unsigned int TimeOfLastGlobalUpdate;
	/*  38 */ unsigned int* TimeOfLastClientUpdate;
	/*  3c */ unsigned int* TimeOfLastClientFieldUpdate;
	/*  40 */ void* LocalUserData;
};

/*   0 */ __vtbl_ptr_type;

typedef struct vec4f t_Mtx4Vec4fArray_;
typedef float t_Mtx3Float2dArray_;

struct Polar {
	/*   0 */ float azimuth;
	/*   4 */ float elevation;
	/*   8 */ float radius;
	/*   c */ float rotY;
	/*  10 */ float rotZ;
};

typedef struct Polar polar;
typedef float _iconVu0FVECTOR;

struct sceMcIconSys {
	/*   0 */ unsigned char Head[4];
	/*   4 */ short unsigned int Reserv1;
	/*   6 */ short unsigned int OffsLF;
	/*   8 */ unsigned int Reserv2;
	/*   c */ unsigned int TransRate;
	/*  10 */ int BgColor[4][4];
	/*  50 */ float LightDir[4][3];
	/*  80 */ float LightColor[4][3];
	/*  b0 */ _iconVu0FVECTOR Ambient;
	/*  c0 */ unsigned char TitleName[68];
	/* 104 */ unsigned char FnameView[64];
	/* 144 */ unsigned char FnameCopy[64];
	/* 184 */ unsigned char FnameDel[64];
	/* 1c4 */ unsigned char Reserve3[512];
};

struct sceMcStDateTime {
	/*   0 */ unsigned char Resv2;
	/*   1 */ unsigned char Sec;
	/*   2 */ unsigned char Min;
	/*   3 */ unsigned char Hour;
	/*   4 */ unsigned char Day;
	/*   5 */ unsigned char Month;
	/*   6 */ short unsigned int Year;
};

struct sceMcTblGetDir {
	/*   0 */ struct sceMcStDateTime _Create;
	/*   8 */ struct sceMcStDateTime _Modify;
	/*  10 */ unsigned int FileSizeByte;
	/*  14 */ short unsigned int AttrFile;
	/*  16 */ short unsigned int Reserve1;
	/*  18 */ unsigned int Reserve2;
	/*  1c */ unsigned int PdaAplNo;
	/*  20 */ unsigned char EntryName[32];
};

struct COLL_DAM_OUT {
	/*   0 */ struct vec4 ip;
	/*  10 */ struct vec4 momentum;
	/*  20 */ MobyInstance* pDamager;
	/*  24 */ int damageFlags;
	/*  28 */ unsigned char damageClass;
	/*  29 */ unsigned char damageStrength;
	/*  2a */ short unsigned int damageIndex;
	/*  2c */ float damageHp;
	/*  30 */ int flags;
	/*  34 */ float damageHeroHp;
	/*  38 */ int shotUID;
	/*  3c */ MobyInstance* pMoby;
};

struct COLL_DAM_IN {
	/*   0 */ struct vec4 momentum;
	/*  10 */ MobyInstance* pMoby;
	/*  14 */ int damageFlags;
	/*  18 */ unsigned char damageClass;
	/*  19 */ unsigned char damageStrength;
	/*  1a */ short unsigned int damageIndex;
	/*  1c */ float damageHp;
	/*  20 */ int flags;
	/*  24 */ float damageHeroHp;
	/*  28 */ int shotUID;
	/*  2c */ int pad[1];
};

typedef int arealink;
// warning: multiple differing types with the same name, only one recovered
typedef struct vec4 navg_waypoint;

struct mobyfuncs {
	/*   0 */ /* function */ void** getMpController;
	/*   4 */ /* function */ void** getMpObject;
	/*   8 */ /* function */ void** netUpdate;
	/*   c */ /* function */ void** masterUpdate;
	/*  10 */ /* function */ void** getMobyInterface;
	/*  14 */ /* function */ void** handleEvent;
	/*  18 */ /* function */ void** getParentPlayer;
	/*  1c */ /* function */ void** setVisibility;
};

struct SpawnPoolInterface_t {
	/*   0 */ /* function */ void** OptionalFunc_DisableForSpawnPool;
	/*   4 */ /* function */ void** OptionalFunc_ReenableFromSpawnPool;
	/*   8 */ MobyInstance* pFirstPoolMoby;
	/*   c */ MobyInstance* pLastAddedPoolMoby;
};

typedef /* function */ void* MobyUpdateFn;
typedef long unsigned int AnimCacheBitField;

struct MoveVars_V2 {
	/*   0 */ int flags;
	/*   4 */ int internalFlags;
	/*   8 */ int effectorFlags;
	/*   c */ int dirty;
	/*  10 */ float maxStepUp;
	/*  14 */ float maxStepDown;
	/*  18 */ int avoidHotspots;
	/*  1c */ int passThruHotspots;
	/*  20 */ short int arrestedTimer;
	/*  22 */ short int lostTimer;
	/*  24 */ float gravity;
	/*  28 */ float slopeLimit;
	/*  2c */ float maxFlightAngle;
	/*  30 */ char elv_state;
	/*  31 */ char alert_state;
	/*  32 */ char reaction_state;
	/*  33 */ char action_state;
	/*  34 */ char blend;
	/*  35 */ char lockAnim;
	/*  36 */ short int numColl;
	/*  38 */ MoveVarsAnimCache* pAnimCache;
	/*  3c */ MoveVarsAnimCache* pAttachAnimCache;
	/*  40 */ moby** effectorOverrideList;
	/*  44 */ int effectorOverrideCount;
	/*  48 */ arealink boundArea;
	/*  4c */ moby* pIgnoreCollMoby;
	/*  50 */ moby* pBumpMoby;
	/*  54 */ moby* pGroundMoby;
	/*  58 */ moby* pIgnoreEffector;
	/*  5c */ moby* pAttach;
	/*  60 */ int attachJoint;
	/*  64 */ float attachMaxRot;
	/*  68 */ float actionStartFrame;
	/*  6c */ void* pActionCallback;
	/*  70 */ int lastUpdateFrame;
	/*  74 */ int animGroups;
	/*  78 */ float collRadius;
	/*  7c */ float gravityVel;
	/*  80 */ float swarmOfsAmp;
	/*  84 */ int swarmOfsTimer;
	/*  88 */ int swarmOfsMinTime;
	/*  8c */ int swarmOfsMaxTime;
	/*  90 */ float stopDist;
	/*  94 */ float walkDist;
	/*  98 */ float runDist;
	/*  9c */ float walkSpeed;
	/*  a0 */ float runSpeed;
	/*  a4 */ float strafeSpeed;
	/*  a8 */ float backSpeed;
	/*  ac */ float flySpeed;
	/*  b0 */ float linearAccel;
	/*  b4 */ float linearDecel;
	/*  b8 */ float linearLimit;
	/*  bc */ float linearSpeed;
	/*  c0 */ float angularAccel;
	/*  c4 */ float angularDecel;
	/*  c8 */ float angularLimit;
	/*  cc */ float hitGroundSpeed;
	/*  d0 */ float legFacing;
	/*  d4 */ float bodyFacing;
	/*  d8 */ float legAngularSpeed;
	/*  dc */ float bodyAngularSpeed;
	/*  e0 */ float groundSlope;
	/*  e4 */ float groundZ;
	/*  e8 */ int groundHotspot;
	/*  ec */ int groundCheckFrame;
	/*  f0 */ int onGround;
	/*  f4 */ int offGround;
	/*  f8 */ float passThruSurface;
	/*  fc */ int passThruSurfaceType;
	/* 100 */ float projectedLandingZ;
	/* 104 */ float moveDamper;
	/* 108 */ short int moveDamperTimer;
	/* 10a */ char curNode;
	/* 10b */ char destNode;
	/* 10c */ struct Path* pLastFollowPath;
	/* 110 */ float walkTurnFactor;
	/* 114 */ float desiredFacing;
	/* 120 */ struct vec4 vel;
	/* 130 */ struct vec4 arrestedPos;
	/* 140 */ struct vec4 groundNormal;
	/* 150 */ struct vec4 jumpVel;
	/* 160 */ struct vec4 target;
	/* 170 */ struct vec4 passThruPoint;
	/* 180 */ struct vec4 passThruNormal;
	/* 190 */ navg_waypoint waypoint;
	/* 1a0 */ AnimCacheBitField groupCache;
	/* 1a8 */ AnimCacheBitField attachGroupCache;
};

struct FlashVars {
	/*   0 */ short int timer;
	/*   2 */ short int type;
	/*   4 */ int destColor;
	/*   8 */ int srcColor;
	/*   c */ int flags;
};

// warning: multiple differing types with the same name, only one recovered
struct SuckVars {
	/*   0 */ moby* linkedMoby[4];
};

struct BogeyVars {
	/*   0 */ struct vec4 targetPos;
	/*  10 */ moby* pTarget;
	/*  14 */ short int targetType;
	/*  16 */ short int targetStatus;
	/*  18 */ short int targetTimer;
	/*  1a */ short int lookForTypes;
	/*  1c */ short int flags;
	/*  1e */ short int targetOverrideTimer;
	/*  20 */ float shotSpeed;
	/*  24 */ int bestPotentialIndex;
	/*  28 */ int lastTargetTime;
	/*  2c */ short int allAwareTimer;
	/*  2e */ short int padA;
	/*  30 */ arealink alertArea;
	/*  34 */ float alertRadius;
	/*  38 */ float alertZDiff;
	/*  3c */ char curLookIndex;
	/*  3d */ char curTargetIndex;
	/*  3e */ char lookFrames;
	/*  3f */ char shotIsClear;
	/*  40 */ int difficultyRating;
	/*  44 */ float lookHeight;
	/*  48 */ float lookAcquireThreshold;
	/*  4c */ float lookLoseThreshold;
	/*  50 */ moby* pPotentialTargets[8];
	/*  70 */ float potentialLookAccum[8];
};

struct FpsCamVars {
	/*   0 */ struct mtx3 mtx;
	/*  30 */ struct vec4 pos;
	/*  40 */ float z_rot;
	/*  44 */ float z_speed_current;
	/*  48 */ float z_speed_max_quick;
	/*  4c */ float z_speed_max_aim;
	/*  50 */ float z_accel_quick;
	/*  54 */ float z_accel_aim;
	/*  58 */ float z_target_slowness_factor_quick;
	/*  5c */ float z_target_slowness_factor_aim;
	/*  60 */ float y_rot;
	/*  64 */ float y_speed_current;
	/*  68 */ float y_speed_max;
	/*  6c */ float y_accel;
	/*  70 */ float y_target_slowness_factor;
	/*  74 */ float strafe_turn_factor;
	/*  78 */ float strafe_tilt_factor;
	/*  7c */ float max_target_angle;
	/*  80 */ int state;
	/*  84 */ short int quick_turn_input_time;
	/*  86 */ short int snap_hold_time;
	/*  88 */ float snap_input;
	/*  8c */ moby* pTarget;
	/*  90 */ struct vec4 target_last_pos;
	/*  a0 */ struct vec4 target_vel;
	/*  b0 */ float target_blend_fac;
	/*  b4 */ float max_y_rot;
	/*  b8 */ float min_y_rot;
	/*  bc */ moby* pExcludeMoby;
	/*  c0 */ struct vec4 ext_pos_ofs;
	/*  d0 */ struct vec4f ext_rot_ofs;
	/*  e0 */ short int flags;
	/*  e2 */ short int allegiance;
	/*  e4 */ void* special_target_func;
	/*  e8 */ struct mtx3* pWorldMtx;
	/*  ec */ struct mtx3* pWorldInvMtx;
	/*  f0 */ struct vec4 facing_dir;
	/* 100 */ struct vec4 internal_facing_dir;
	/* 110 */ struct vec4 aim_pos;
	/* 120 */ float range;
	/* 124 */ float ext_extension;
	/* 128 */ float ext_entension_speed;
	/* 12c */ int cam_slot;
	/* 130 */ void* pHero;
	/* 134 */ float camRadius;
	/* 138 */ int camSettingsIndex;
	/* 13c */ int karma_pad;
	/* 140 */ struct vec4 prevCamPos;
	/* 150 */ int karma_pad2[4];
};

struct FontWindow {
	/*   0 */ short int win_top;
	/*   2 */ short int win_bot;
	/*   4 */ short int win_left;
	/*   6 */ short int win_right;
	/*   8 */ short int text_x;
	/*   a */ short int text_y;
	/*   c */ short int max_width;
	/*   e */ short int max_height;
	/*  10 */ short int line_spacing;
	/*  12 */ short int flags;
	/*  14 */ short int sub_pixel_x;
	/*  16 */ short int sub_pixel_y;
	/*  18 */ short int drop_shadow_offset_x;
	/*  1a */ short int drop_shadow_offset_y;
};

struct PartInstance {
	/*   0 */ char i_class;
	/*   1 */ char type;
	/*   2 */ char tex;
	/*   3 */ char gs_alpha;
	/*   4 */ int rgba;
	/*   8 */ char rot;
	/*   9 */ char draw_dist;
	/*   a */ short int timer;
	/*   c */ float scale;
	/*  10 */ struct vec4 pos;
	/*  20 */ int update[8];
};

typedef struct PartInstance part;

struct Part024 {
	/*   0 */ part* parent;
	/*   4 */ float scalemul;
	/*   8 */ float scaleadd;
	/*   c */ float alpha;
	/*  10 */ float alphamul;
	/*  14 */ float dalpha;
};

struct t_FrustumPlanes {
	/*   0 */ struct vec4 m_Planes[8];
	/*  80 */ struct vec4 m_vPos;
};

struct CameraFov {
	/*   0 */ float speed;
	/*   4 */ float ideal;
	/*   8 */ float actual;
	/*   c */ float gain;
	/*  10 */ float damp;
	/*  14 */ float limit;
	/*  18 */ char changeType;
	/*  19 */ char state;
	/*  1a */ short int timer;
	/*  1c */ float timerInv;
	/*  20 */ float init;
	/*  24 */ float pad[3];
};

typedef UpdateCam updcam;

struct CameraControlActivation {
	/*   0 */ int activationType;
	/*   4 */ float blendSpeed;
	/*   8 */ char priority;
	/*   9 */ char activate;
	/*   a */ short int deactivate;
	/*   c */ short int repCam;
	/*   e */ short int orgCam;
};

struct PolarSm {
	/*   0 */ float azimuth;
	/*   4 */ float elevation;
	/*   8 */ float radius;
};

struct CameraControlMods_0 {
	/*   0 */ UpdateCam* pModCam;
	/*   4 */ short int runningAtCam;
	/*   6 */ short int runningAtCamFlag;
	/*   8 */ float runningAtCamDist;
	/*   c */ float runningFarDist;
	/*  10 */ int modBlock;
};

struct UpdateCam {
	/*   0 */ struct mtx3 mtx;
	/*  30 */ struct vec4 pos;
	/*  40 */ struct vec4f rot;
	/*  50 */ polar pol;
	/*  64 */ struct vec3 lPos;
	/*  70 */ void* control;
	/*  74 */ struct CameraControlActivation activation;
	/*  84 */ short int importCameraIdx;
	/*  86 */ short int type;
	/*  88 */ char subType;
	/*  89 */ char bumped;
	/*  8a */ short int bumpOff;
	/*  8c */ short int funcIdx;
	/*  8e */ short int active;
	/*  90 */ float fov;
	/*  94 */ int gameCamIdx;
	/*  98 */ float prevExternalMoveZ;
	/*  9c */ int pad[2];
};

struct CameraStatics {
	/*   0 */ struct vec3 heroNoJump;
	/*   c */ float heroLastZ;
	/*  10 */ float heroLastZSpeed;
	/*  20 */ struct vec4 heroUp;
	/*  30 */ struct vec4 heroUpActual;
	/*  40 */ struct vec4 heroUpLast;
	/*  50 */ struct vec4 heroUpSpeed;
	/*  60 */ struct vec4 heroLastPos;
	/*  70 */ struct vec4 heroMoveVec;
	/*  80 */ struct vec4 heroMoveVec2D;
	/*  90 */ struct vec4 heroMoveVecUp;
	/*  a0 */ float heroSpeed;
	/*  a4 */ float heroSpeed2D;
	/*  a8 */ float heroSpeedUp;
	/*  ac */ float heroLastRotZ[5];
	/*  c0 */ int hotspot;
	/*  c4 */ moby* pCamColl;
	/*  c8 */ float fadeSpeed;
	/*  cc */ float fadeIdeal;
	/*  d0 */ int fadeTimer;
	/*  d4 */ float flashInSpeed;
	/*  d8 */ float flashOutSpeed;
	/*  dc */ float flashIdeal;
	/*  e0 */ int flashTimer;
	/*  e4 */ moby* boss;
	/*  e8 */ int bossTimer;
};

struct CamBlenderPosQuat {
	/*   0 */ float quatInterpFac;
	/*   4 */ float quatInterpAdd;
	/*   8 */ float reqQuatInterpAdd;
	/*   c */ float reqQuatInterpInit;
	/*  10 */ float posInterpFac;
	/*  14 */ float posInterpAdd;
	/*  18 */ float reqPosInterpAdd;
	/*  1c */ float reqPosInterpInit;
	/*  20 */ struct quat orgQuat;
	/*  30 */ struct vec4 orgPos;
	/*  40 */ struct vec4 pos;
	/*  50 */ struct quat q;
};

struct CamBlenderPolarQuat {
	/*   0 */ struct PolarSm orgPol;
	/*   c */ int interpFrames;
	/*  10 */ float interpMaxInv;
	/*  14 */ int reqInterpFrames;
	/*  20 */ struct vec4 fwd;
	/*  30 */ struct vec4 up;
	/*  40 */ struct quat orgQuat;
	/*  50 */ struct vec4 pos;
	/*  60 */ struct quat q;
};

struct CamBlenderData {
	/*   0 */ struct CamBlenderPosQuat posData;
	/*  60 */ struct CamBlenderPolarQuat polarData;
};

struct CamBlender {
	/*   0 */ short int state;
	/*   2 */ char type;
	/*   3 */ char reqType;
	/*  10 */ struct CamBlenderData blendData;
};

struct CameraWidget {
	/*   0 */ UpdateCam* pCam;
	/*   4 */ moby* semaphore;
	/*   8 */ float closest;
	/*   c */ float interp;
	/*  10 */ void* preFunc;
};

struct CameraShake {
	/*   0 */ float strength;
	/*   4 */ float adjust;
	/*   8 */ int time;
	/*   c */ int div;
};

struct CameraExternal {
	/*   0 */ struct vec4 move;
};

struct GAMECAMERA {
	/*   0 */ struct vec4 pos;
	/*  10 */ struct vec4f rot;
	/*  20 */ struct CameraShake shake;
	/*  30 */ struct CameraShake shakeFwd;
	/*  40 */ struct CameraShake shakeTilt;
	/*  50 */ UpdateCam* pCurrentUpdCam;
	/*  54 */ UpdateCam* pLastUpdCam;
	/*  60 */ struct CameraStatics camStatics;
	/* 150 */ struct CameraHeroData camHeroData;
	/* 2b0 */ struct CamBlender blender;
	/* 390 */ struct mtx3 uMtx;
	/* 3c0 */ struct mtx4 bsMtx;
	/* 400 */ struct CameraWidget widget;
	/* 420 */ struct CameraExternal external;
	/* 430 */ struct CameraFov fov;
	/* 460 */ int CamUnderWater;
	/* 464 */ int camTimer;
	/* 468 */ int disableBlendTimer;
};

enum HERO_STATE_ENUM {
	HERO_STATE_IDLE = 0,
	HERO_STATE_LOOK = 1,
	HERO_STATE_WALK = 2,
	HERO_STATE_SKID = 3,
	HERO_STATE_CROUCH = 4,
	HERO_STATE_QUICK_TURN = 5,
	HERO_STATE_FALL = 6,
	HERO_STATE_JUMP = 7,
	HERO_STATE_GLIDE = 8,
	HERO_STATE_RUN_JUMP = 9,
	HERO_STATE_LONG_JUMP = 10,
	HERO_STATE_FLIP_JUMP = 11,
	HERO_STATE_JINK_JUMP = 12,
	HERO_STATE_ROCKET_JUMP = 13,
	HERO_STATE_DOUBLE_JUMP = 14,
	HERO_STATE_HELI_JUMP = 15,
	HERO_STATE_CHARGE_JUMP = 16,
	HERO_STATE_WALL_JUMP = 17,
	HERO_STATE_WATER_JUMP = 18,
	HERO_STATE_COMBO_ATTACK = 19,
	HERO_STATE_JUMP_ATTACK = 20,
	HERO_STATE_THROW_ATTACK = 21,
	HERO_STATE_GET_HIT = 22,
	HERO_STATE_LEDGE_GRAB = 23,
	HERO_STATE_LEDGE_IDLE = 24,
	HERO_STATE_LEDGE_TRAVERSE_LEFT = 25,
	HERO_STATE_LEDGE_TRAVERSE_RIGHT = 26,
	HERO_STATE_LEDGE_JUMP = 27,
	HERO_STATE_VISIBOMB = 28,
	HERO_STATE_TARGETING = 29,
	HERO_STATE_GUN_WAITING = 30,
	HERO_STATE_WALLOPER_ATTACK = 31,
	HERO_STATE_ATTACK_BOUNCE = 32,
	HERO_STATE_ROCKET_STOMP = 33,
	HERO_STATE_GLOVE_ATTACK = 34,
	HERO_STATE_GRAPPLE_SHOOT = 35,
	HERO_STATE_GRAPPLE_PULL = 36,
	HERO_STATE_GRAPPLE_PULL_VEHICLE = 37,
	HERO_STATE_SUCK_CANNON = 38,
	HERO_STATE_GRIND = 39,
	HERO_STATE_GRIND_JUMP = 40,
	HERO_STATE_GRIND_SWITCH_JUMP = 41,
	HERO_STATE_GRIND_ATTACK = 42,
	HERO_STATE_SWING = 43,
	HERO_STATE_SWING_FALL = 44,
	HERO_STATE_RECOIL = 45,
	HERO_STATE_ICE_WALK = 46,
	HERO_STATE_DEVASTATOR = 47,
	HERO_STATE_SLIDE = 48,
	HERO_STATE_VEHICLE = 49,
	HERO_STATE_SWIMUNDER = 50,
	HERO_STATE_IDLEUNDER = 51,
	HERO_STATE_CHARGEUNDER = 52,
	HERO_STATE_SWIMSURF = 53,
	HERO_STATE_IDLESURF = 54,
	HERO_STATE_BOLT_CRANK = 55,
	HERO_STATE_LAVA_JUMP = 56,
	HERO_STATE_DEATH = 57,
	HERO_STATE_BOARD = 58,
	HERO_STATE_MAGNE_WALK = 59,
	HERO_STATE_GRIND_HIT = 62,
	HERO_STATE_GRIND_JUMP_TURN = 63,
	HERO_STATE_VENDOR_BOOTH = 98,
	HERO_STATE_NPC = 99,
	HERO_STATE_WALK_TO_POS = 100,
	HERO_STATE_SKID_TO_POS = 101,
	HERO_STATE_IDLE_TO_POS = 102,
	HERO_STATE_JUMP_TO_POS = 103,
	HERO_STATE_QUICKSAND_SINK = 104,
	HERO_STATE_QUICKSAND_JUMP = 105,
	HERO_STATE_DROWN = 106,
	HERO_STATE_MAGNE_ATTACK = 111,
	HERO_STATE_MAGNE_JUMP = 112,
	HERO_STATE_CUT_SCENE = 113,
	HERO_STATE_WADE = 114,
	HERO_STATE_ZIP = 115,
	HERO_STATE_GET_HIT_SURF = 116,
	HERO_STATE_GET_HIT_UNDER = 117,
	HERO_STATE_DEATH_FALL = 118,
	HERO_STATE_SLOPESLIDE = 120,
	HERO_STATE_JUMP_BOUNCE = 121,
	HERO_STATE_DEATHSAND_SINK = 122,
	HERO_STATE_LAVA_DEATH = 123,
	HERO_STATE_CHARGE = 125,
	HERO_STATE_ICEWATER_FREEZE = 126,
	HERO_STATE_ELECTRIC_DEATH = 127,
	HERO_STATE_ROCKET_HOVER = 128,
	HERO_STATE_ELECTRIC_DEATH_UNDER = 129,
	HERO_STATE_SKATE = 130,
	HERO_STATE_MOON_JUMP = 131,
	HERO_STATE_JET = 132,
	HERO_STATE_THROW_SHURIKEN = 133,
	HERO_STATE_RACEBIKE = 134,
	HERO_STATE_SPEEDBOAT = 135,
	HERO_STATE_HOVERPLANE = 136,
	HERO_STATE_LATCH_GRAB = 137,
	HERO_STATE_LATCH_IDLE = 138,
	HERO_STATE_LATCH_JUMP = 139,
	HERO_STATE_PULLSHOT_ATTACH = 140,
	HERO_STATE_PULLSHOT_PULL = 141,
	HERO_STATE_GET_FLATTENED = 142,
	HERO_STATE_SKYDIVE = 143,
	HERO_STATE_ELECTRIC_GET_HIT = 144,
	HERO_STATE_FLAIL_ATTACK = 145,
	HERO_STATE_MAGIC_TELEPORT = 146,
	HERO_STATE_TELEPORT_IN = 147,
	HERO_STATE_DEATH_NO_FALL = 148,
	HERO_STATE_TAUNT_SQUAT = 149,
	HERO_STATE_TAUNT_ASSPOINT = 150,
	HERO_STATE_TAUNT_ASSRUB = 151,
	HERO_STATE_TURRET_DRIVER = 152,
	HERO_STATE_WAIT_FOR_RESURRECT = 153,
	HERO_STATE_WAIT_FOR_JOIN = 154,
	HERO_STATE_DROPPED = 155,
	HERO_STATE_CNT = 156
};

enum HERO_TYPE_ENUM {
	HERO_TYPE_IDLE = 0,
	HERO_TYPE_WALK = 1,
	HERO_TYPE_FALL = 2,
	HERO_TYPE_LEDGE = 3,
	HERO_TYPE_JUMP = 4,
	HERO_TYPE_GLIDE = 5,
	HERO_TYPE_ATTACK = 6,
	HERO_TYPE_GET_HIT = 7,
	HERO_TYPE_SHOOT = 8,
	HERO_TYPE_BUSY = 9,
	HERO_TYPE_BOUNCE = 10,
	HERO_TYPE_STOMP = 11,
	HERO_TYPE_CROUCH = 12,
	HERO_TYPE_GRAPPLE = 13,
	HERO_TYPE_SWING = 14,
	HERO_TYPE_GRIND = 15,
	HERO_TYPE_SLIDE = 16,
	HERO_TYPE_SWIM = 17,
	HERO_TYPE_SURF = 18,
	HERO_TYPE_HYDRO = 19,
	HERO_TYPE_DEATH = 20,
	HERO_TYPE_BOARD = 21,
	HERO_TYPE_RACEBOARD = 22,
	HERO_TYPE_SPIN = 23,
	HERO_TYPE_NPC = 24,
	HERO_TYPE_QUICKSAND = 25,
	HERO_TYPE_ZIP = 26,
	HERO_TYPE_HOLO = 27,
	HERO_TYPE_CHARGE = 28,
	HERO_TYPE_ROCKET_HOVER = 29,
	HERO_TYPE_JET = 30,
	HERO_TYPE_RACEBIKE = 31,
	HERO_TYPE_SPEEDBOAT = 32,
	HERO_TYPE_PULL = 33,
	HERO_TYPE_LATCH = 34,
	HERO_TYPE_LADDER = 36,
	HERO_TYPE_SKYDIVE = 37,
	HERO_TYPE_CNT = 38
};

struct Gadget {
	/*   0 */ struct vec4 jointPos;
	/*  10 */ struct vec4f jointRot;
	/*  20 */ moby* pMoby;
	/*  24 */ moby* pMoby2;
	/*  28 */ bool padButtonDown;
	/*  2c */ int alignPad;
	/*  30 */ int padButton;
	/*  34 */ int gsSpawnFrame;
	/*  38 */ char noAmmoTime;
	/*  39 */ char unEquipTimer;
	/*  3a */ char detached;
	/*  3b */ char unequipTime;
	/*  3c */ char unEquipStatus;
	/*  3d */ char unEquipDelay;
	/*  40 */ int equippedTime;
	/*  44 */ int state;
	/*  48 */ int id;
	/*  4c */ float lightAng;
};

typedef /* function */ void** NetTypeObjectCallback;

struct tNW_PlayerStateMessage {
	/*   0 */ char netPlayerIndex;
	/*   1 */ char newState;
	/*   2 */ char seqNum;
	/*   3 */ char frame;
	/*   4 */ struct vec3 pos;
	/*  10 */ struct vec3 rot;
};

struct tNW_GetHitMessage {
	/*   0 */ struct vec3 momentum;
	/*   c */ unsigned char sequenceNum;
	/*   d */ signed char hitPlayerIndex;
	/*   e */ signed char frame;
};

struct Gid {
	/*   0 */ unsigned int ObjectIndex;
	/*   1 */ unsigned int ObjectCount;
	/*   3 */ unsigned int ObjectType;
	/*   3 */ unsigned int HostId;
};

// warning: multiple differing types with the same name, only one recovered
struct Guber {
	union  {
		/*   0 */ unsigned int UID;
		/*   0 */ struct Gid gid;
	} ;
	/*   4 */ int MasterHostId;
	/*   8 */ int State;
	static int LocalHostId;
	static int DefaultMaster;
	/*   c */ struct Guber* pNext;
	/*  10 */ struct Guber* pPrev;
	/*  14 */ __vtbl_ptr_type* $vf8525;
};

struct HeroMove {
	/*   0 */ struct vec4 behavior;
	/*  10 */ struct vec4 external;
	/*  20 */ struct vec4 actual;
	/*  30 */ struct vec4 actualFromBehavior;
	/*  40 */ struct vec4 actualFromBehaviorGrav;
	/*  50 */ struct vec4 actualFromBehavior2D;
	/*  60 */ struct vec4 actualFromExternal;
	/*  70 */ struct vec4 taper;
	/*  80 */ float speed;
	/*  84 */ float speed2D;
	/*  88 */ float forwardSpeed;
	/*  8c */ float ascent;
	/*  90 */ float zSpeed;
	/*  94 */ float externalSpeed;
	/*  98 */ int pad[2];
};

struct HeroTimers {
	/*   0 */ int state;
	/*   4 */ int stateType;
	/*   8 */ int subState;
	/*   c */ int animState;
	/*  10 */ int stickOn;
	/*  14 */ int stickOff;
	/*  18 */ short int noLedge;
	/*  1a */ short int allowQuickSelect;
	/*  1c */ int firing;
	/*  20 */ int moveModifierTimer;
	/*  24 */ int boltMultTimer;
	/*  28 */ int wallJumpOk;
	/*  2c */ short int postHitInvinc;
	/*  2e */ short int ignoreHeroColl;
	/*  30 */ short int collOff;
	/*  32 */ short int invisible;
	/*  34 */ short int slide;
	/*  36 */ short int bezerker;
	/*  38 */ short int noWallJump;
	/*  3a */ short int noJumps;
	/*  3c */ short int boxBreaking;
	/*  3e */ short int noMag;
	/*  40 */ short int noChargeJump;
	/*  42 */ short int resurrectWait;
	/*  44 */ int timeSinceStrafe;
	/*  48 */ short int noHackerSwitch;
	/*  4a */ short int noInput;
	/*  4c */ short int noJumpLookBack;
	/*  4e */ short int noShockAbort;
	/*  50 */ short int stuck;
	/*  52 */ short int noSwing;
	/*  54 */ short int noWaterJump;
	/*  56 */ short int noWaterDive;
	/*  58 */ short int facialExpression;
	/*  5a */ short int idle;
	/*  5c */ short int bumpPushing;
	/*  5e */ short int lookButton;
	/*  60 */ short int edgeStop;
	/*  62 */ short int clankRedEye;
	/*  64 */ short int edgePath;
	/*  66 */ short int magSlope;
	/*  68 */ short int ledgeCamAdj;
	/*  6a */ short int screenFlashRed;
	/*  6c */ short int holdDeathPose;
	/*  6e */ short int strafeMove;
	/*  70 */ short int noRaisedGunArm;
	/*  72 */ short int noExternalRot;
	/*  74 */ short int screenFlashOn;
	/*  76 */ short int screenFadeOn;
	/*  78 */ int lastVehicleTimer;
	/*  7c */ float gadgetRefire;
	/*  80 */ int timeAlive;
	/*  84 */ int noFpsCamTimer;
	/*  88 */ int endDeathEarly;
	/*  8c */ short int forceGlide;
	/*  8e */ short int noGrind;
	/*  90 */ short int instaGrind;
	/*  92 */ short int noCamInputTimer;
	/*  94 */ short int postTeleportTimer;
	/*  96 */ short int multiKillTimer;
	/*  98 */ short int armorLevelTimer;
	/*  9a */ short int damageMuliplierTimer;
	/*  9c */ int powerupEffectTimer;
	/*  a0 */ short int juggernautFadeTimer;
	/*  a2 */ short int onFireTimer;
	/*  a4 */ short int acidTimer;
	/*  a6 */ short int freezeTimer;
	/*  a8 */ short int noHelmTimer;
	/*  aa */ short int elecTimer;
	/*  ac */ short int boltDistMulTimer;
	/*  ae */ short int explodeTimer;
	/*  b0 */ short int noDeathTimer;
	/*  b2 */ short int invincibilityTimer;
};

struct HeroColl {
	/*   0 */ struct vec4 normal;
	/*  10 */ struct vec4 ip;
	/*  20 */ float top;
	/*  24 */ float bot;
	/*  28 */ float ideal_top;
	/*  2c */ float ideal_bot;
	/*  30 */ float idealRadius;
	/*  34 */ float radius;
	/*  38 */ float radiusSpeed;
	/*  3c */ MobyInstance* pContactMoby;
	/*  40 */ MobyInstance* pBumpMoby;
	/*  44 */ float bumpPushSpeed;
	/*  48 */ float distToWall;
	/*  4c */ float wallAng;
	/*  50 */ float wallSlope;
	/*  54 */ char wallIsCrate;
	/*  55 */ char wallIsMoby;
	/*  56 */ char contact;
	/*  57 */ char cpad;
	/*  58 */ float ledgeHeight;
	/*  5c */ float ledgeDist;
	/*  60 */ int atLedge;
	/*  64 */ MobyInstance* pWallJumpMoby;
	/*  68 */ int pad[2];
	/*  70 */ float radiusSqd;
};

struct HeroGround {
	/*   0 */ struct vec4 normal;
	/*  10 */ struct vec4 waterNormal;
	/*  20 */ struct vec4 gravity;
	/*  30 */ struct vec4 point;
	/*  40 */ struct vec4 lastGoodPos;
	/*  50 */ struct vec4 externalBootGrav;
	/*  60 */ float feetHeights[2];
	/*  68 */ float pitchSlopes[2];
	/*  70 */ float rollSlopes[2];
	/*  78 */ float height;
	/*  7c */ float dist;
	/*  80 */ float slope;
	/*  84 */ float pitchSlope;
	/*  88 */ float rollSlope;
	/*  8c */ float angz;
	/*  90 */ float waterHeight;
	/*  94 */ float quicksandHeight;
	/*  98 */ int underWater;
	/*  9c */ MobyInstance* pMoby;
	/*  a0 */ int onGood;
	/*  a4 */ float speed;
	/*  a8 */ short int magnetic;
	/*  aa */ short int stickLanding;
	/*  ac */ short int offAny;
	/*  ae */ short int offGood;
	/*  b0 */ int oscillating;
	/*  b4 */ float oscPos1;
	/*  b8 */ float oscPos2;
	/*  bc */ int pad[1];
};

struct HeroTrack {
	/*   0 */ struct vec4 idealPos;
	/*  10 */ struct vec4f idealRot;
	/*  20 */ struct vec4 idealWallPos;
	/*  30 */ struct vec4f idealWallRot;
	/*  40 */ struct vec4 prevVel;
	/*  50 */ MobyInstance* pMoby;
	/*  54 */ int flags;
	/*  58 */ int pad[2];
};

struct HeroAnim {
	/*   0 */ float speed;
	/*   4 */ int iscale;
	/*   8 */ int flags;
	/*   c */ int interping;
	/*  10 */ int env_index;
	/*  14 */ int env_time;
	/*  18 */ float mayaFrm;
	/*  1c */ float mayaFrmDelt;
};

struct HeroJoints {
	/*   0 */ struct mtx4 gadgetMtxs[6];
};

struct HeroAnimLayers {
	/*   0 */ struct MobyAnimLayer* pArmBlenders[2];
	/*   8 */ struct MobyAnimLayer* pFiringBlenders[2];
	/*  10 */ struct MobyAnimLayer* pHeadBlender;
	/*  14 */ int detachingFiring;
	/*  18 */ int armBlenderSharesIdle;
	/*  1c */ int gadgetAttachedId;
	/*  20 */ int usingRunAnim[4];
	/*  30 */ int headAnim;
};

struct HeroTweaker {
	/*   0 */ struct Manipulator manip;
	/*  40 */ struct vec4f rot;
	/*  50 */ struct vec4f speed;
	/*  60 */ struct vec4f target;
	/*  70 */ struct vec4 trans;
	/*  80 */ struct vec4 transSpeed;
	/*  90 */ struct vec4 transTarget;
	/*  a0 */ short int joint;
	/*  a2 */ short int whichMoby;
	/*  a4 */ float gain;
	/*  a8 */ float damp;
	/*  ac */ float scale;
};

struct HeroFps {
	/*   0 */ struct mtx3 worldMtx;
	/*  30 */ struct mtx3 worldInvMtx;
	/*  60 */ struct quat gunFPSQuat;
	/*  70 */ struct vec4 camEffVel;
	/*  80 */ struct vec4 camPos;
	/*  90 */ struct vec4 camDir;
	/*  a0 */ struct FpsCamVars fVars;
	/* 200 */ float camYSpeed;
	/* 204 */ float camZSpeed;
	/* 208 */ float gunInterp;
	/* 20c */ float gunInterpSpeed;
	/* 210 */ int active;
	/* 214 */ float gunWithdrawSpeed;
	/* 218 */ float gunWithdrawDist;
	/* 21c */ float gunWithdrawIdeal;
	/* 220 */ float bobRot;
	/* 224 */ float bobRotSpeed;
	/* 228 */ float bobAmp;
	/* 22c */ float camHeroOfs;
	/* 230 */ float camHeroOfsSpeed;
	/* 234 */ int ignoreGroundHeight;
	/* 238 */ float reticulePulseAng;
	/* 23c */ int reticuleFadeInTimer;
};

struct HeroWeaponPosRec {
	/*   0 */ struct mtx4 fpGunMtx[2];
	/*  80 */ struct mtx4 tpGunMtx[2];
};

struct HeroWalkToPos {
	/*   0 */ struct vec4 idealPos;
	/*  10 */ struct vec4f idealRot;
	/*  20 */ int abortOnArrival;
	/*  24 */ int walkToTeleport;
	/*  28 */ int teleportWaitTime;
	/*  2c */ MobyInstance* pTeleTarget;
};

struct HeroSpecialIdleDef {
	/*   0 */ int anim;
	/*   4 */ float frequency;
	/*   8 */ float minRepeatTime;
	/*   c */ int repeatTimer;
};

struct HeroSurf {
	/*   0 */ float sinkDepth;
	/*   4 */ float sinkRate;
	/*   8 */ int minSwimTimer;
	/*   c */ float surfHeight;
	/*  10 */ float surfHeightSpeed;
	/*  14 */ MobyInstance* pIceCube;
	/*  18 */ float bobt;
	/*  1c */ float bobz;
	/*  20 */ float swingAng1;
	/*  24 */ float swingAng2;
	/*  28 */ int pad[2];
};

struct HeroSwim {
	/*   0 */ struct vec4 padWindUp;
	/*  10 */ int diveTime;
	/*  14 */ float bankSpeed;
	/*  18 */ float pitchSpeed;
	/*  1c */ float yawSpeed;
	/*  20 */ int bubbleTimer;
	/*  24 */ int minSwimTimer;
	/*  28 */ short int chargeBubbleTimer;
	/*  2a */ short int soundTimer;
	/*  2c */ float buoyancySpeed;
	/*  30 */ short int padUpTime;
	/*  32 */ short int padDownTime;
	/*  34 */ short int ring_timer;
	/*  36 */ short int drop_timer;
	/*  38 */ short int wake_timer;
	/*  3a */ short int plunge_bubbles;
	/*  3c */ short int solidRiseTimer;
	/*  3e */ short int riseTimer;
	/*  40 */ int riseTapCnt;
	/*  44 */ int timeRiseLastPressed;
	/*  48 */ int pad[2];
};

struct HeroGrind {
	/*   0 */ struct vec4 closestPoint;
	/*  10 */ struct vec4 rootPos;
	/*  20 */ struct vec4 lHandPos;
	/*  30 */ struct vec4 rHandPos;
	/*  40 */ struct vec4 closestPointSwitch;
	/*  50 */ struct vec4 rampTarget;
	/*  60 */ struct Path* pPath;
	/*  64 */ int curNode;
	/*  68 */ float curSegLen;
	/*  6c */ int valid;
	/*  70 */ int EOPtime;
	/*  74 */ float speed;
	/*  78 */ int pathDir;
	/*  7c */ float ang;
	/*  80 */ float slope;
	/*  84 */ int wrap;
	/*  88 */ float heroAngOfs;
	/*  8c */ int animDir;
	/*  90 */ int switching;
	/*  94 */ struct Path* pSwitchPath;
	/*  98 */ int switchCurNode;
	/*  9c */ float switchCurSegLen;
	/*  a0 */ int switchWrap;
	/*  a4 */ float slopeSpeed;
	/*  a8 */ int switchTime;
	/*  ac */ int leanDir;
	/*  b0 */ float userSpeed;
	/*  b4 */ int grappleTrigger;
	/*  b8 */ int onRamp;
	/*  bc */ short int rampTrigger;
	/*  be */ short int damage;
	/*  c0 */ int rampJumpQueued;
	/*  c4 */ int useRampJumpTarget;
	/*  c8 */ float rampJumpGravity;
	/*  cc */ float getHitSpeed;
	/*  d0 */ float aimDirOfs;
	/*  d4 */ float aimDirSpeed;
	/*  d8 */ MobyInstance* pTarget;
	/*  dc */ float centeringSpeed;
	/*  e0 */ float twirlRot;
	/*  e4 */ float twirlRotSpeed;
	/*  e8 */ float twirlCamRotz;
	/*  ec */ short int twirlTimer;
	/*  ee */ short int twirlCamOn;
	/*  f0 */ float twirlCamRotZspeed;
	/*  f4 */ struct COLL_DAM_OUT* cdo;
	/*  f8 */ int noGroundTime;
	/*  fc */ short int turnDir;
	/*  fe */ short int pad;
};

struct HeroShadow {
	/*   0 */ float slope;
	/*   4 */ float plane;
	/*   8 */ float range;
	/*   c */ int sample_id;
	/*  10 */ int pad[2];
	/*  18 */ float sample_pos[4];
};

struct HeroEyes {
	/*   0 */ struct Manipulator manips[7];
	/* 1c0 */ struct Manipulator clankpackManips[4];
	/* 2c0 */ int blink_timer;
	/* 2c4 */ int blink_next;
	/* 2c8 */ int blink_frequency;
	/* 2cc */ short int clankBlinkCountdown;
	/* 2ce */ short int clankBlinkTime;
};

struct HeroNPJumpThrustStage {
	/*   0 */ float initThrust;
	/*   4 */ float thrustDelta;
	/*   8 */ int time;
	/*   c */ int pad;
};

struct HeroJumpNonParab {
	/*   0 */ int startThrustTime;
	/*   4 */ int endThrustTime;
	/*   8 */ float thrustStartFrm;
	/*   c */ float peakFrm;
	/*  10 */ int timeToPeakFrm;
	/*  14 */ struct HeroNPJumpThrustStage* thrustTable;
	/*  18 */ int thrustStageIndex;
	/*  1c */ int thrustStageTimer;
	/*  20 */ float thrust;
	/*  24 */ float chargeJumpThrust;
	/*  28 */ float descendGravity;
	/*  2c */ int pad;
};

struct HeroJump {
	/*   0 */ struct HeroJumpNonParab nonParab;
	/*  30 */ struct vec4 takeoffPos;
	/*  40 */ struct vec4 snapJumpThrustVec;
	/*  50 */ struct vec4 snapJumpForwardVec;
	/*  60 */ float camHeight;
	/*  64 */ float turnSpeed;
	/*  68 */ float wallJumpXySpeed;
	/*  6c */ char land_timer;
	/*  6d */ char useNonParabAscent;
	/*  6e */ char descend;
	/*  6f */ char noGlide;
	/*  70 */ float maxFallSpeed;
	/*  74 */ float maxXySpeed;
	/*  78 */ float ideal_height;
	/*  7c */ short int pushOffTime;
	/*  7e */ short int framesToLand;
	/*  80 */ float up_thrust;
	/*  84 */ float up_thrust_total;
	/*  88 */ float coll_bot;
	/*  8c */ float ledgeJumpSpeed;
	/*  90 */ float snapJumpThrustAng;
	/*  94 */ float snapJumpForwardAng;
	/*  98 */ float peakFrm;
	/*  9c */ float landFrm;
	/*  a0 */ float gameLandFrm;
	/*  a4 */ int snapJumpDir;
	/*  a8 */ float snapJumpRunThrust;
	/*  ac */ float snapJumpSpeed;
	/*  b0 */ struct vec4 wallJumpDir;
	/*  c0 */ struct vec4 wallJumpDirCur;
	/*  d0 */ float accel;
	/*  d4 */ float decel;
	/*  d8 */ float minHeight;
	/*  dc */ float maxHeight;
	/*  e0 */ float fallThresh;
	/*  e4 */ float animMayaScale;
	/*  e8 */ short int maxUpTime;
	/*  ea */ short int bailoutSafetyTime;
	/*  ec */ short int particleTimer;
	/*  ee */ short int particleTimer2;
	/*  f0 */ float gravity;
	/*  f4 */ short int minForwardThrust;
	/*  f6 */ short int minTimeToGlide;
	/*  f8 */ short int onIce;
	/*  fa */ short int minTimeToFall;
	/*  fc */ char gloveAttackOk;
	/*  fd */ char strafingFlip;
	/*  fe */ char flipJumpOk;
	/*  ff */ char doubleJumpOk;
};

struct HeroLockOn {
	/*   0 */ struct vec4 strafeIdealVec;
	/*  10 */ MobyInstance* pMoby;
	/*  14 */ short int strafing;
	/*  16 */ char strafingBack;
	/*  17 */ char strafingDir;
	/*  18 */ float strafeRot;
	/*  1c */ float strafeRotSpeed;
	/*  20 */ float backSpeed;
	/*  24 */ int strafeRotTimer;
	/*  28 */ short int strafeLeftDampTimer;
	/*  2a */ short int strafeRightDampTimer;
	/*  2c */ int strafeTurnDiffZero;
	/*  30 */ struct vec4 curRetPos;
	/*  40 */ MobyInstance* curRetMoby;
	/*  44 */ float fadeInterp;
	/*  48 */ float retRot;
	/*  4c */ float strafeTurnDiff;
};

struct HeroFireDir {
	/*   0 */ struct mtx3 m;
	/*  30 */ struct vec4 v;
	/*  40 */ struct vec4f rot;
};

struct HeroZip {
	/*   0 */ struct vec4 closestPoint;
	/*  10 */ struct vec4 idealVec;
	/*  20 */ struct Path* pPath;
	/*  24 */ int curNode;
	/*  28 */ float curSegLen;
	/*  2c */ int valid;
	/*  30 */ int EOPtime;
	/*  34 */ float speed;
	/*  38 */ int pathDir;
	/*  3c */ int wrap;
	/*  40 */ float ang;
	/*  44 */ float slope;
	/*  48 */ float centeringSpeed;
	/*  4c */ int pad[1];
};

struct HeroThrust {
	/*   0 */ float ideal;
	/*   4 */ float actual;
	/*   8 */ int pad[2];
};

struct HeroTurn {
	/*   0 */ struct vec4 idealVec;
	/*  10 */ float ideal;
	/*  14 */ float speed;
	/*  18 */ float diff;
	/*  1c */ int pad;
};

struct HeroWalk {
	/*   0 */ struct vec4 idealTurnVec;
	/*  10 */ float iceMotionDotProduct;
	/*  14 */ float lastGroundSlope;
	/*  18 */ float idealTurnAng;
	/*  1c */ char ideal_motion;
	/*  1d */ char skateThrust;
	/*  1e */ char long_trans;
	/*  1f */ char qturning;
	/*  20 */ int idealAngSet;
	/*  24 */ int pad[3];
};

struct HeroAttack {
	/*   0 */ struct vec4 near;
	/*  10 */ struct vec4 far;
	/*  20 */ struct vec4 oldNear;
	/*  30 */ struct vec4 oldFar;
	/*  40 */ struct vec4 wrenchHandle;
	/*  50 */ struct vec4 wrenchTip;
	/*  60 */ struct vec4 idealVec;
	/*  70 */ struct vec4 bounceVec;
	/*  80 */ MobyInstance* pTarget;
	/*  84 */ MobyInstance* pMoby;
	/*  88 */ int rotSet;
	/*  8c */ float rot;
	/*  90 */ float bounceAng;
	/*  94 */ float speedFactor;
	/*  98 */ MobyInstance* pGunPointMoby;
	/*  9c */ short int id;
	/*  9e */ short int soundPlayed;
	/*  a0 */ float descend;
	/*  a4 */ float aimAngz;
	/*  a8 */ float aimAngy;
	/*  ac */ int throwAttackDamageID;
};

struct HeroAttackDef {
	/*   0 */ int type;
	/*   4 */ int stage;
	/*   8 */ int endComboFrm;
	/*   c */ int inputFrm;
	/*  10 */ int transFrm;
	/*  14 */ int jumpTransFrm;
	/*  18 */ int etcTransFrm;
	/*  1c */ int startDamFrm;
	/*  20 */ int stopDamFrm;
	/*  24 */ int startBlurFrm;
	/*  28 */ int stopBlurFrm;
};

struct HeroMobys {
	/*   0 */ MobyInstance* ground;
	/*   4 */ MobyInstance* hero;
	/*   8 */ int pad[2];
};

struct HeroCharge {
	/*   0 */ struct vec4 padWindUp;
	/*  10 */ float groundSpeed;
	/*  14 */ int hitEdge;
	/*  18 */ int pad[2];
};

struct HeroHotspots {
	/*   0 */ short int index;
	/*   2 */ char ice;
	/*   3 */ char magictele;
	/*   4 */ char water;
	/*   5 */ char lava;
	/*   6 */ char quicksand;
	/*   7 */ char magnetic;
	/*   8 */ char noStand;
	/*   9 */ char deathsand;
	/*   a */ char icewater;
	/*   b */ char groundType;
	/*   c */ int pad;
};

struct HeroWind {
	/*   0 */ struct vec4 vel;
	/*  10 */ float speed;
	/*  14 */ float angy;
	/*  18 */ float angz;
	/*  1c */ int pad[1];
};

struct HeroDust {
	/*   0 */ float vel;
	/*   4 */ float velvar;
	/*   8 */ int timer;
	/*   c */ short int rate;
	/*   e */ short int flags;
};

struct HeroFall {
	/*   0 */ float gravity;
	/*   4 */ float xyDecel;
	/*   8 */ float xRotSpeed;
	/*   c */ float yRotSpeed;
	/*  10 */ float xRotSpeedIdeal;
	/*  14 */ float yRotSpeedIdeal;
	/*  18 */ float glideTaperSpeed;
	/*  1c */ int pad[1];
};

struct HeroLedge {
	/*   0 */ struct vec4 idealWallPos;
	/*  10 */ struct vec4 idealGrabPos;
	/*  20 */ float groundHeight;
	/*  24 */ float wallAngZ;
	/*  28 */ int valid;
	/*  2c */ float gravity;
	/*  30 */ float camHeight;
	/*  34 */ int flags;
	/*  38 */ MobyInstance* pMoby;
	/*  3c */ int pad;
};

struct HeroTractorBeam {
	/*   0 */ MobyInstance* pTarget;
	/*   4 */ float zRotOfs;
	/*   8 */ float zRotSpeed;
	/*   c */ float xySpeed;
};

struct HeroGrapple {
	/*   0 */ float speed;
	/*   4 */ MobyInstance* pTarget;
	/*   8 */ int valid;
	/*   c */ float timeToTarget;
	/*  10 */ float distToTarget;
	/*  14 */ int straightenOut;
	/*  18 */ int vehicle;
	/*  1c */ float cableLen;
	/*  20 */ float idealCableLen;
	/*  24 */ float targetScore;
	/*  28 */ int earlyAbort;
	/*  2c */ int pad[1];
};

struct HeroPullShot {
	/*   0 */ MobyInstance* pTarget;
	/*   4 */ int valid;
	/*   8 */ float targetScore;
	/*   c */ int connected;
	/*  10 */ int pad[8];
};

struct HeroDynamo {
	/*   0 */ MobyInstance* pTarget;
	/*   4 */ int valid;
	/*   8 */ float targetScore;
	/*   c */ int trigger;
	/*  10 */ MobyInstance* last_pTarget;
	/*  14 */ int pad[7];
};

struct HeroSwing {
	/*   0 */ MobyInstance* pNextTarget;
	/*   4 */ MobyInstance* pTarget;
	/*   8 */ float targetScore;
	/*   c */ short int connected;
	/*   e */ char valid;
	/*   f */ char qSwitchMe;
	/*  10 */ float idealRadius;
	/*  14 */ float curCableLen;
	/*  18 */ float radialSpeed;
	/*  1c */ float forwardAng;
	/*  20 */ float gravity;
	/*  24 */ float firstSwingSpeed;
	/*  28 */ float alignRotSpeed;
	/*  2c */ short int animScaleQueued;
	/*  2e */ short int firstSwing;
	/*  30 */ float swingElv;
	/*  34 */ float radialGain;
	/*  38 */ float radialDamp;
	/*  3c */ float radialLimit;
};

struct HeroQuickSand {
	/*   0 */ int timesFallen;
	/*   4 */ int pad[3];
};

struct HeroHeadIdle {
	/*   0 */ struct vec4f rotOffset;
	/*  10 */ int timer;
	/*  14 */ float gain;
	/*  18 */ float damp;
	/*  1c */ int pad[1];
};

struct HeroTailIdle {
	/*   0 */ struct vec4f rotOffsets[4];
	/*  40 */ int timers[4];
};

struct HeroQueuedSound {
	/*   0 */ short int active;
	/*   2 */ short int sound;
	/*   4 */ short int timer;
	/*   6 */ short int flags;
};

struct HeroCommand {
	/*   0 */ int state;
	/*   4 */ MobyInstance* pCurTarget;
	/*   8 */ int timer;
};

struct HeroPlayerConstants {
	/*   0 */ int mobyNum;
	/*   4 */ float maxWalkSpeed;
	/*   8 */ float kneeHeight;
	/*   c */ float kneeCheckDist;
	/*  10 */ float colRadius;
	/*  14 */ float colTop;
	/*  18 */ float colBot;
	/*  1c */ float colBotFall;
	/*  20 */ int jumpPushOffTime;
	/*  24 */ float jumpPeakFrm;
	/*  28 */ float jumpLandFrm;
	/*  2c */ float jumpGameLandFrm;
	/*  30 */ float jumpMaxHeight;
	/*  34 */ float jumpMinHeight;
	/*  38 */ int jumpMaxUpTime;
	/*  3c */ float jumpGravity;
	/*  40 */ float jumpMaxXySpeed;
	/*  44 */ float fallGravity;
	/*  48 */ float maxFallSpeed;
	/*  4c */ float walkAnimSpeedMul;
	/*  50 */ float walkAnimSpeedLimLower;
	/*  54 */ float walkAnimSpeedLimUpper;
	/*  58 */ float jogAnimSpeedMul;
	/*  5c */ float jogAnimSpeedLimLower;
	/*  60 */ float jogAnimSpeedLimUpper;
	/*  64 */ int pad[3];
};

struct MotionBlur {
	/*   0 */ struct vec4 posRing[8];
	/*  80 */ struct vec4 rotRing[8];
	/* 100 */ int blurAlphas[4];
	/* 110 */ int blurSteps[4];
	/* 120 */ moby* blurMobys[4];
	/* 130 */ float gapReduction[4];
	/* 140 */ short int ringIndex;
	/* 142 */ short int ringValidSize;
	/* 144 */ moby* pTrackedMoby;
	/* 148 */ int blurCnt;
	/* 14c */ int active;
};

// warning: multiple differing types with the same name, only one recovered
struct Hero : /* 0 */ struct Guber {
	/*  20 */ struct mtx4 mtx;
	/*  60 */ struct mtx4 invMtx;
	/*  a0 */ struct vec4 pos;
	/*  b0 */ struct vec4f rot;
	/*  c0 */ struct vec4f rotSpeed;
	/*  d0 */ struct vec4 sphereCenter;
	/*  e0 */ struct vec4 missileTarget;
	/*  f0 */ struct vec4 cg;
	/* 100 */ struct vec4f mtxFxScale;
	/* 110 */ struct vec4 lastPos;
	/* 120 */ struct vec4f stickInput;
	/* 130 */ struct HeroMove move;
	/* 1d0 */ struct HeroColl coll;
	/* 250 */ struct HeroGround ground;
	/* 310 */ struct HeroTrack track;
	/* 370 */ struct HeroTimers timers;
	/* 430 */ struct HeroHotspots hotspots;
	/* 440 */ struct HeroGrind grind;
	/* 540 */ struct HeroZip zip;
	/* 590 */ struct HeroFireDir fireDir;
	/* 5e0 */ struct HeroLockOn lockOn;
	/* 630 */ struct HeroMobys mobys;
	/* 640 */ struct HeroAnim anim;
	/* 660 */ struct HeroJoints joints;
	/* 7e0 */ struct HeroAnimLayers animLayers;
	/* 820 */ struct HeroTweaker tweaker[18];
	/* 1480 */ struct HeroShadow shadow;
	/* 14b0 */ struct HeroEyes eyes;
	/* 1780 */ struct HeroThrust thrust;
	/* 1790 */ struct HeroTurn turn;
	/* 17b0 */ struct HeroAttack attack;
	/* 1860 */ struct HeroHeadIdle headIdle;
	/* 1880 */ struct HeroTailIdle tailIdle;
	/* 18d0 */ struct HeroFps fps;
	/* 1b10 */ struct HeroWeaponPosRec weaponPosRec;
	/* 1c10 */ struct HeroWalkToPos walkToPos;
	/* 1c40 */ struct HeroSurf surf;
	/* 1c70 */ struct HeroWalk walk;
	/* 1ca0 */ struct HeroJump jump;
	/* 1da0 */ struct HeroLedge ledge;
	/* 1de0 */ struct HeroTractorBeam tractorBeam;
	/* 1df0 */ struct HeroCharge charge;
	/* 1e10 */ struct HeroSwim swim;
	/* 1e60 */ struct HeroWind wind;
	/* 1e80 */ struct HeroFall fall;
	/* 1ea0 */ struct HeroGrapple grapple;
	/* 1ed0 */ struct HeroSwing swing;
	/* 1f10 */ struct HeroPullShot pullShot;
	/* 1f40 */ struct HeroDynamo dynamo;
	/* 1f70 */ struct HeroQuickSand quicksand;
	/* 1f80 */ struct HeroDust dust;
	/* 1f90 */ struct HeroCommand command;
	/* 1f9c */ struct TargetVars target;
	/* 2030 */ struct MotionBlur motionBlur;
	/* 2180 */ struct MotionBlur wrenchMotionBlur;
	/* 22d0 */ struct Gadget gadgets[6];
	/* 24b0 */ int assGadgets[6];
	/* 24d0 */ struct vec4 prevHandPos;
	/* 24e0 */ struct vec4 gadgetGlowPos[8];
	/* 2560 */ int gadgetGlowRGBA[8];
	/* 2580 */ float gadgetGlowSize[8];
	/* 25a0 */ float gadgetGlowOfs[8];
	/* 25c0 */ short int gadgetGlowCnt;
	/* 25c4 */ float heroSpeedAdjuster;
	/* 25c8 */ char playerPostDrawFxRegistered;
	/* 25c9 */ char playerPostPreDrawFxRegistered;
	/* 25ca */ char playerFontDrawRegistered;
	/* 25cc */ enum HERO_STATE_ENUM state;
	/* 25d0 */ int subState;
	/* 25d4 */ enum HERO_TYPE_ENUM stateType;
	/* 25d8 */ enum HERO_STATE_ENUM previousState;
	/* 25dc */ enum HERO_TYPE_ENUM previousType;
	/* 25e0 */ int previousStateTimer;
	/* 25e4 */ enum HERO_STATE_ENUM prePreviousState;
	/* 25e8 */ enum HERO_TYPE_ENUM prePreviousType;
	/* 25ec */ enum HERO_STATE_ENUM stateHistory[8];
	/* 260c */ enum HERO_TYPE_ENUM stateTypeHistory[8];
	/* 262c */ int stateTimerHistory[8];
	/* 264c */ int stateHistoryLen;
	/* 2650 */ int effectsLevel;
	/* 2654 */ float minDistToLocalCamera;
	/* 2658 */ char cycleFiring;
	/* 2659 */ char gravityType;
	/* 265a */ char firing;
	/* 265c */ int clankIdleTimer;
	/* 2660 */ char raisedGunArm;
	/* 2661 */ char inShallowWater;
	/* 2662 */ char invisible;
	/* 2663 */ char hideWeapon;
	/* 2664 */ char gadgetsOff;
	/* 2665 */ char gadgetNotReady;
	/* 2666 */ char wrenchOnly;
	/* 2667 */ char holdingDeathAnim;
	/* 2668 */ char hideWrench;
	/* 2669 */ char spawnBoltsToMe;
	/* 266a */ char aiFollowingMe;
	/* 266b */ char forceWrenchSwitch;
	/* 266c */ char forceSwingSwitch;
	/* 266d */ char isLocal;
	/* 266e */ char inBaseHack;
	/* 266f */ char shieldTrigger;
	/* 2670 */ char curSeg;
	/* 2671 */ char handGadgetType;
	/* 2672 */ char externalUpdate;
	/* 2674 */ int hudGadgets[6];
	/* 268c */ int desiredGadgets[6];
	/* 26a4 */ int preemptedGadgets[6];
	/* 26bc */ int restoreGadgetFlags[6];
	/* 26d4 */ int loadingGadget;
	/* 26d8 */ int hackerRemovedGadget;
	/* 26dc */ char currIdleAnim;
	/* 26dd */ char machineGunFire;
	/* 26e0 */ int lastHackTime;
	/* 26e4 */ struct GadgetBox* pGadgetBox;
	/* 26e8 */ short int minesPendingExplode[2];
	/* 26f0 */ struct vec4 failsafePosRing[32];
	/* 28f0 */ float rotZRing[32];
	/* 2970 */ struct mtx3 gadgetRotRing[16];
	/* 2c70 */ int rotZringIndex;
	/* 2c74 */ int rotZringValidSize;
	/* 2c78 */ int failsafeRingIndex;
	/* 2c7c */ int failsafeRingValidSize;
	/* 2c80 */ int gadgetRotRingIndex;
	/* 2c84 */ int gadgetRotRingValidSize;
	/* 2c88 */ int cameraPosRing[8];
	/* 2ca8 */ int cameraRotRing[8];
	/* 2cc8 */ int camRingIndex;
	/* 2ccc */ int camRingValidSize;
	/* 2cd0 */ struct vec4 camPos;
	/* 2ce0 */ struct vec4f camRot;
	/* 2cf0 */ struct mtx3 camUMtx;
	/* 2d20 */ struct HeroQueuedSound queuedSounds[2];
	/* 2d30 */ int loopingSounds[9];
	/* 2d54 */ moby* loopingSoundMobys[9];
	/* 2d78 */ struct HeroSpecialIdleDef SpecialIdles[4];
	/* 2db8 */ int specialIdleHistory[4];
	/* 2dc8 */ int specialIdleHistoryIndex;
	/* 2dcc */ int specialIdleHistorySize;
	/* 2dd0 */ int specialIdleID;
	/* 2dd4 */ int firingAnim;
	/* 2dd8 */ int firingGadget;
	/* 2ddc */ int desiredCam;
	/* 2de0 */ uint64 savedLights;
	/* 2de8 */ int lightFxOn;
	/* 2dec */ MobyInstance* pHeadTargetMoby;
	/* 2df0 */ MobyInstance* pSheepMoby;
	/* 2df4 */ moby* pWhoHitMe;
	/* 2df8 */ struct Hero* pWhoSheepedMe;
	/* 2dfc */ moby* pAcidDamager;
	/* 2e00 */ int acidDamagerGadgetId;
	/* 2e04 */ bool useAcidDamagerGadgetId;
	/* 2e05 */ bool sheepMeLongTime;
	/* 2e08 */ float stickStrength;
	/* 2e0c */ float stickRawAngle;
	/* 2e10 */ int targetModeDelay;
	/* 2e14 */ float waterDepth;
	/* 2e18 */ short int edgePath;
	/* 2e1c */ float glideDescentRate;
	/* 2e20 */ float hitPoints;
	/* 2e24 */ float boltPickupRadiusXY;
	/* 2e28 */ float boltPickupZthresh;
	/* 2e2c */ short int noClank;
	/* 2e30 */ float skidDecel;
	/* 2e34 */ short int mtxFxActive;
	/* 2e38 */ float analogStickStrength;
	/* 2e3c */ short int deathFallChannel;
	/* 2e3e */ short int wallJumpAngLimiter;
	/* 2e40 */ char wallJumpHeightFactor;
	/* 2e41 */ char wallJumpChainCnt;
	/* 2e44 */ float wallJumpDist;
	/* 2e48 */ float moonJumpIdealHeight;
	/* 2e4c */ float moonJumpGravity;
	/* 2e50 */ short int chargeDoubleTapTimer;
	/* 2e52 */ short int chargeDownTimer;
	/* 2e54 */ short int chargeDelayTimer;
	/* 2e56 */ short int tweakersReset;
	/* 2e58 */ int gadgetFilter;
	/* 2e5c */ int gadgetFilterSize;
	/* 2e60 */ int targetGadgetFilterSize;
	/* 2e64 */ float FPS_InterpSpeed;
	/* 2e68 */ float FPS_InterpAccel;
	/* 2e6c */ int FPS_StartTime;
	/* 2e70 */ char FPSTapTimer;
	/* 2e71 */ char FPSTapCount;
	/* 2e72 */ char strafeTapTimer;
	/* 2e73 */ char strafeTapCount;
	/* 2e74 */ char lockedStrafeModeOn;
	/* 2e78 */ unsigned int lastDamagedMeOwnerUID;
	/* 2e7c */ int lastDamagedMeGadgetId;
	/* 2e80 */ float lastDamagedMeHp;
	/* 2e84 */ signed char restoreCamAzDir;
	/* 2e85 */ signed char restoreCamRotSpd;
	/* 2e88 */ int rAmb;
	/* 2e8c */ int gAmb;
	/* 2e90 */ int bAmb;
	/* 2e94 */ MobyInstance* lastWeaponTarget;
	/* 2e98 */ moby* recentTargets[4];
	/* 2ea8 */ int lastWeaponTargetTime;
	/* 2eac */ struct tNW_GetHitMessage getHitMessage;
	/* 2ebc */ struct FlashVars flashVars;
	/* 2ecc */ char isGetHitMsgPending;
	/* 2ecd */ char lookAndCrouch;
	/* 2ece */ char lookAndThrowWrench;
	/* 2ecf */ char earlyThrowAbort;
	/* 2ed0 */ char lookAndGetHit;
	/* 2ed1 */ char lastDeathWasSuicide;
	/* 2ed2 */ char noWeaponSwitching;
	/* 2ed3 */ char noWrenchEquip;
	/* 2ed4 */ char jackpotMult;
	/* 2ed5 */ signed char rocketHitMe;
	/* 2ed6 */ char explode;
	/* 2ed7 */ bool deathWasCalled;
	/* 2ed8 */ int hudHealthTimer;
	/* 2edc */ bool pauseOn;
	/* 2edd */ char pauseTimer;
	/* 2ee0 */ int tauntOverrideTimer;
	/* 2ee4 */ char playerType;
	/* 2ee8 */ MobyInstance* flagMoby;
	/* 2eec */ struct HeroPlayerConstants* playerConst;
	/* 2ef0 */ MobyInstance* pMoby;
	/* 2ef4 */ VehicleBase* pVehicle;
	/* 2ef8 */ VehicleBase* pVehiclePending;
	/* 2efc */ struct GAMECAMERA* camera;
	/* 2f00 */ PAD* pPad;
	/* 2f04 */ float cheatX;
	/* 2f08 */ float cheatY;
	/* 2f0c */ float cheatZ;
	/* 2f10 */ int mpIndex;
	/* 2f14 */ int mpTeam;
	/* 2f18 */ int vehicleState;
	/* 2f1c */ int vehicleStateTimer;
	/* 2f20 */ int pointsLastKill;
	/* 2f24 */ float maxHP;
	/* 2f28 */ struct tNW_Player* pNetPlayer;
	/* 2f2c */ struct tNW_PlayerStateMessage newStateMessage;
	/* 2f48 */ int timeOfReceivedStateMsg;
	/* 2f4c */ moby* lastVehicleMoby;
	/* 2f50 */ int iLastVehicleOffTime;
	/* 2f54 */ moby* pLastGrindRail;
	/* 2f58 */ float closestCamDistSqr;
	/* 2f5c */ int bSphereVis;
	/* 2f60 */ float m_shortTermLinkDirtyTime;
	/* 2f64 */ float m_accumLinkDirtyTime;
	static moby* s_pJuggieSoundMoby;
	static int s_sndJuggieConstantSound;
	static char ObjectMemory[0];
	static struct HeroAttackDef PlayerAttackDefs[11];
	static float PlayerWalkSpeedTable[4][2];
	static int PlayerWalkStartFrames[2];
	static char PlayerRunJumpTable[0];
	static float PlayerAnimEnvelopes[25][0];
	static int PlayerMobys[0];
	static int s_juggernautIndex;
	/* 2f70 */ struct vec4 initialPos;
	/* 2f80 */ struct vec4f initialRot;
	/* 2f90 */ float stashedWallCheckHeight;
	/* 2f94 */ float stashedWallCheckDist;
	/* 2f98 */ float stashedWallDist;
	/* 2f9c */ int lookModeTimeout;
	/* 2fa0 */ int lookModeDelay;
	/* 2fa4 */ int baseExperience;
	/* 2fa8 */ int Experience;
	/* 2fac */ int currentAcumXp;
	/* 2fb0 */ float damageMultipler;
	/* 2fb4 */ int armorLevel;
	/* 2fb8 */ bool limitBreakFull;
	/* 2fbc */ float limitBreakPercentage;
	/* 2fc0 */ float movementSpeedModifier;
	/* 2fc4 */ char grindRailWeaponLock;
	/* 2fc5 */ char currArmAnim;
	/* 2fc6 */ short int activePadFrame;
	/* 2fc8 */ char alreadyPlayedNoAmmoClick;
	/* 2fc9 */ char sceneInvis;
	/* 2fca */ char ninjaCheatActive;
	/* 2fcb */ char hadWind;
	/* 2fcc */ moby* pWrenchReplacement;
	/* 2fd0 */ int startLimitBreakDiff;
};

struct SoundDef {
	/*   0 */ float minRange;
	/*   4 */ float maxRange;
	/*   8 */ int minVolume;
	/*   c */ int maxVolume;
	/*  10 */ int minPitch;
	/*  14 */ int maxPitch;
	/*  18 */ char loop;
	/*  19 */ char flags;
	/*  1a */ short int index;
	/*  1c */ int bank_index;
};

typedef /* function */ void** FRONTEND_ACTION_CALLBACK;

struct FrontEndMenuNode {
	/*   0 */ char front_end_text[256];
	/* 100 */ FRONTEND_ACTION_CALLBACK action;
	/* 104 */ bool active;
	/* 108 */ int level;
};

struct BootMemoryMap {
	/*   0 */ unsigned char Plates[854016][4];
};

struct update112 {
	/*   0 */ struct vec4 vel;
	/*  10 */ moby* pParent;
	/*  14 */ int lifeSpan;
	/*  18 */ float maxScale;
	/*  1c */ short int timer;
	/*  1e */ short int maxAlpha;
};

struct update122 {
	/*   0 */ struct vec4 vel;
	/*  10 */ float rotVelX;
	/*  14 */ float rotVelY;
	/*  18 */ short int timer;
	/*  1a */ short int lifeSpan;
	/*  1c */ float maxScale;
	/*  20 */ int randSmoking;
	/*  24 */ int bCollide;
	/*  28 */ short int sParticlesSpawned;
	/*  2a */ short int spad[1];
	/*  2c */ int ipad[1];
};

// warning: multiple differing types with the same name, only one recovered
struct TrackVars {
	/*   0 */ struct vec4f rot;
	/*  10 */ struct vec4 disp;
	/*  20 */ struct vec4f oldTrackRot;
	/*  30 */ struct mtx3* oldMtx;
	/*  34 */ int pad2[2];
	/*  3c */ int flags;
};

// warning: multiple differing types with the same name, only one recovered
enum MediusAccountStatus {
	AccountActive = 0,
	AccountDeactivated = 1,
	ExtraMediusAccountStatus = 16777215
};

// warning: multiple differing types with the same name, only one recovered
enum MediusCallbackStatus {
	MediusBeginSessionFailed = -1000,
	MediusAccountAlreadyExists = -999,
	MediusAccountNotFound = -998,
	MediusAccountLoggedIn = -997,
	MediusEndSessionFailed = -996,
	MediusLoginFailed = -995,
	MediusRegistrationFailed = -994,
	MediusIncorrectLoginStep = -993,
	MediusAlreadyLeaderOfClan = -992,
	MediusWMError = -991,
	MediusNotClanLeader = -990,
	MediusPlayerNotPrivileged = -989,
	MediusDBError = -988,
	MediusDMEError = -987,
	MediusExceedsMaxWorlds = -986,
	MediusRequestDenied = -985,
	MediusSetGameListFilterFailed = -984,
	MediusClearGameListFilterFailed = -983,
	MediusGetGameListFilterFailed = -982,
	MediusNumFiltersAtMax = -981,
	MediusFilterNotFound = -980,
	MediusInvalidRequestMsg = -979,
	MediusInvalidPassword = -978,
	MediusGameNotFound = -977,
	MediusChannelNotFound = -976,
	MediusGameNameExists = -975,
	MediusChannelNameExists = -974,
	MediusGameNameNotFound = -973,
	MediusPlayerBanned = -972,
	MediusClanNotFound = -971,
	MediusClanNameInUse = -970,
	MediusSessionKeyInvalid = -969,
	MediusTextStringInvalid = -968,
	MediusFilterFailed = -967,
	MediusFail = -966,
	MediusFileInternalAccessError = -965,
	MediusFileNoPermissions = -964,
	MediusFileDoesNotExist = -963,
	MediusFileAlreadyExists = -962,
	MediusFileInvalidFilename = -961,
	MediusFileQuotaExceeded = -960,
	MediusCacheFailure = -959,
	MediusDataAlreadyExists = -958,
	MediusDataDoesNotExist = -957,
	MediusMaxExceeded = -956,
	MediusKeyError = -955,
	MediusIncompatibleAppID = -954,
	MediusAccountBanned = -953,
	MediusMachineBanned = -952,
	MediusLeaderCannotLeaveClan = -951,
	MediusFeatureNotEnabled = -950,
	MediusDNASSignatureLoggedIn = -949,
	MediusWorldIsFull = -948,
	MediusNotClanMember = -947,
	MediusServerBusy = -946,
	MediusNumGameWorldsPerLobbyWorldExceeded = -945,
	MediusAccountNotUCCompliant = -944,
	MediusPasswordNotUCCompliant = -943,
	MediusGatewayError = -942,
	MediusTransactionCanceled = -941,
	MediusSessionFail = -940,
	MediusTokenAlreadyTaken = -939,
	MediusTokenDoesNotExist = -938,
	MediusSubscriptionAborted = -937,
	MediusSubscriptionInvalid = -936,
	MediusNotAMember = -935,
	MediusSuccess = 0,
	MediusNoResult = 1,
	MediusRequestAccepted = 2,
	MediusWorldCreatedSizeReduced = 3,
	MediusPass = 4,
	ExtraMediusCallbackStatus = 16777215
};

// warning: multiple differing types with the same name, only one recovered
struct MediusAccountGetProfileResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ enum MediusAccountStatus AccountStatus;
	/*  20 */ char AccountName[32];
	/*  40 */ short int BirthdayMonth;
	/*  42 */ short int BirthdayDay;
	/*  44 */ short int BirthdayYear;
	/*  46 */ char FirstName[32];
	/*  66 */ char LastName[32];
	/*  86 */ char MiddleName[32];
	/*  a6 */ char Address1[32];
	/*  c6 */ char Address2[32];
	/*  e6 */ char Address3[32];
	/* 106 */ char City[32];
	/* 126 */ char State[3];
	/* 129 */ char Province[32];
	/* 149 */ char Country[32];
	/* 169 */ char PostalCode[16];
	/* 179 */ char EmailAddress[80];
};

struct ChunkVars {
	/*   0 */ struct vec4 vel;
	/*  10 */ struct quat rotQuat;
	/*  20 */ struct vec4 CM;
	/*  30 */ struct vec4* vertList;
	/*  34 */ short int timer;
	/*  36 */ short int bangle_num;
	/*  38 */ float bounceDamp;
	/*  3c */ float bounceDrag;
	/*  40 */ float spinDamp;
	/*  44 */ float spinDrag;
	/*  48 */ float gravity;
	/*  4c */ float rotGravity;
	/*  50 */ int rgb;
	/*  54 */ moby* pIgnore;
	/*  58 */ char numVerts;
	/*  59 */ char pivots[3];
	/*  5c */ char numPivots;
	/*  5d */ char chunkType;
	/*  5e */ char sound;
	/*  5f */ char numJoints;
	/*  60 */ int flags;
	/*  64 */ int ipad[3];
};

struct PointLight {
	/*   0 */ struct vec4 color;
	/*  10 */ struct vec4 pos;
};

struct update639 {
	/*   0 */ struct vec4 offset;
	/*  10 */ struct vec4 origpos;
	/*  20 */ moby* parent;
	/*  24 */ unsigned char backlight;
	/*  25 */ unsigned char r_start;
	/*  26 */ unsigned char r_peak;
	/*  27 */ unsigned char r_min;
	/*  28 */ unsigned char r_inc;
	/*  29 */ unsigned char r_dec;
	/*  2a */ unsigned char g_start;
	/*  2b */ unsigned char g_peak;
	/*  2c */ unsigned char g_min;
	/*  2d */ unsigned char g_inc;
	/*  2e */ unsigned char g_dec;
	/*  2f */ unsigned char b_start;
	/*  30 */ unsigned char b_peak;
	/*  31 */ unsigned char b_min;
	/*  32 */ unsigned char b_inc;
	/*  33 */ unsigned char b_dec;
	/*  34 */ float radius_start;
	/*  38 */ float radius_peak;
	/*  3c */ float radius_min;
	/*  40 */ float radius_inc;
	/*  44 */ float radius_dec;
	/*  48 */ int lifetime;
	/*  4c */ unsigned int flags;
	/*  50 */ int pointlight;
	/*  54 */ float r;
	/*  58 */ float g;
	/*  5c */ float b;
	/*  60 */ float radius;
	/*  64 */ int mother;
	/*  68 */ char r_sustain;
	/*  69 */ char g_sustain;
	/*  6a */ char b_sustain;
	/*  6b */ char radius_sustain;
	/*  6c */ short unsigned int r_duty_cycle;
	/*  6e */ short unsigned int g_duty_cycle;
	/*  70 */ short unsigned int b_duty_cycle;
	/*  72 */ short unsigned int radius_duty_cycle;
	/*  74 */ short int r_duty_timer;
	/*  76 */ short int g_duty_timer;
	/*  78 */ short int b_duty_timer;
	/*  7a */ short int radius_duty_timer;
	/*  7c */ char r_sustain_timer;
	/*  7d */ char g_sustain_timer;
	/*  7e */ char b_sustain_timer;
	/*  7f */ char radius_sustain_timer;
};

struct M639_paramInit {
	/*   0 */ struct vec4a offset;
	/*  10 */ unsigned char backlight;
	/*  11 */ unsigned char r_start;
	/*  12 */ unsigned char r_peak;
	/*  13 */ unsigned char r_min;
	/*  14 */ unsigned char r_inc;
	/*  15 */ unsigned char r_dec;
	/*  16 */ unsigned char g_start;
	/*  17 */ unsigned char g_peak;
	/*  18 */ unsigned char g_min;
	/*  19 */ unsigned char g_inc;
	/*  1a */ unsigned char g_dec;
	/*  1b */ unsigned char b_start;
	/*  1c */ unsigned char b_peak;
	/*  1d */ unsigned char b_min;
	/*  1e */ unsigned char b_inc;
	/*  1f */ unsigned char b_dec;
	/*  20 */ float radius_start;
	/*  24 */ float radius_peak;
	/*  28 */ float radius_min;
	/*  2c */ float radius_inc;
	/*  30 */ float radius_dec;
	/*  34 */ int lifetime;
	/*  38 */ unsigned int flags;
	/*  3c */ unsigned char drawDist;
	/*  3d */ unsigned char r_sustain;
	/*  3e */ unsigned char g_sustain;
	/*  3f */ unsigned char b_sustain;
	/*  40 */ short int r_duty_cycle;
	/*  42 */ short int g_duty_cycle;
	/*  44 */ short int b_duty_cycle;
	/*  46 */ short int radius_duty_cycle;
	/*  48 */ unsigned char radius_sustain;
	/*  49 */ unsigned char delay;
	/*  4a */ unsigned char pad2[2];
	/*  4c */ int pad3;
};

struct npcStep {
	/*   0 */ int offer;
	/*   4 */ short int scene;
	/*   6 */ short int dest;
	/*   8 */ short int cond_type;
	/*   a */ short int cond_val;
	/*   c */ short int true_dest;
	/*   e */ short int false_dest;
	/*  10 */ short int flags;
	/*  12 */ short int pad[5];
};

struct ArmorVars {
	/*   0 */ char bPercents[15];
	/*   f */ char flags;
	/*  10 */ float oldHitPoints;
	/*  14 */ short int armorBits;
	/*  16 */ short int pad[5];
};

struct update775 {
	/*   0 */ float minSize;
	/*   4 */ float maxSize;
	/*   8 */ float initZ;
	/*   c */ int startFrame;
	/*  10 */ char alternateMotion;
	/*  11 */ char pad[15];
};

struct Weapon_ThirdPerson {
	/*   0 */ float maxYaw;
	/*   4 */ float maxElv;
	/*   8 */ float maxRange;
	/*   c */ float scaleElv;
	/*  10 */ float scaleAng;
	/*  14 */ float blendFactorLimit;
};

struct Weapon_Interface_t {
	/*   0 */ /* function */ void** SetSoftAim;
	/*   4 */ /* function */ void** GetSoftAim;
};

struct actuatorWave {
	/*   0 */ char type;
	/*   1 */ char loop;
	/*   2 */ char side;
	/*   3 */ char scale;
	/*   4 */ short int delay;
	/*   6 */ short int lifeSpan;
	/*   8 */ short int timer;
	/*   a */ short int on;
	/*   c */ short int off;
	/*   e */ char power;
	/*   f */ char minpower;
};

struct update4244 {
	/*   0 */ struct vec4 barrelPosTop;
	/*  10 */ struct vec4 fireDir;
	/*  20 */ struct vec4 vAimPos;
	/*  30 */ struct vec4 targetPos;
	/*  40 */ short int elecTimer;
	/*  42 */ short int M4244_ButtonTimer;
	/*  44 */ int actuatorIdx;
	/*  48 */ struct Hero* pUser;
	/*  4c */ unsigned int targetUid;
	/*  50 */ int M4244_PointLight;
	/*  54 */ short int M4244_FireFromTopBarrel;
	/*  56 */ short int M4244_OutAmmoFirstTime;
	/*  58 */ float M4244_ScopeAng1;
	/*  5c */ int offButtonTimer;
	/*  60 */ moby* pTarget;
	/*  64 */ moby* pOtherGun;
	/*  68 */ unsigned char cIsMainGun;
	/*  69 */ char cpad[3];
	/*  6c */ int ipad[1];
};

typedef long int int64;
typedef float fSpeed_mps;
typedef float fAccel_mps;
typedef float fSpeed_dps;
typedef float fAccel_dps;
typedef int pathlink;

// warning: multiple differing types with the same name, only one recovered
struct Tweaker {
	/*   0 */ struct Manipulator manip;
	/*  40 */ struct vec4f rot;
	/*  50 */ struct vec4f speed;
	/*  60 */ struct vec4f target;
	/*  70 */ float scale;
	/*  74 */ int joint;
	/*  78 */ moby* pMoby;
	/*  7c */ int pad[1];
};

// warning: multiple differing types with the same name, only one recovered
struct MoveVars {
	/*   0 */ float collRadius;
	/*   4 */ float kneeHeight;
	/*   8 */ float maxStepUp;
	/*   c */ float maxStepDown;
	/*  10 */ float slopeLimit;
	/*  14 */ fAccel_dps turnAccel;
	/*  18 */ fAccel_dps turnDeccel;
	/*  1c */ fSpeed_dps turnLimit;
	/*  20 */ fAccel_mps accel;
	/*  24 */ fAccel_mps deccel;
	/*  28 */ fSpeed_mps maxSpeed;
	/*  2c */ fAccel_mps gravity;
	/*  30 */ float rotThresh;
	/*  34 */ float distThresh;
	/*  38 */ int flags;
	/*  3c */ pathlink boundPath;
	/*  40 */ int* nearbyOClasses;
	/*  44 */ int numInNearbyOClasses;
	/*  48 */ struct Tweaker* pHeadTweak;
	/*  4c */ struct Tweaker* pTorsoTweak;
	/*  50 */ struct vec4 floorNormal;
	/*  60 */ struct vec4 bumpPoint;
	/*  70 */ struct vec4 push;
	/*  80 */ int arrestedTimer;
	/*  84 */ moby* pBumpMoby;
	/*  88 */ moby* pGroundMoby;
	/*  8c */ int poly;
	/*  90 */ float groundZ;
	/*  94 */ int resultFlags;
	/*  98 */ int prevResultFlags;
	/*  9c */ int internalFlags;
	/*  a0 */ struct vec4 vel;
	/*  b0 */ float realSpeed;
	/*  b4 */ float turnSpeed;
	/*  b8 */ int bumpTimer;
	/*  bc */ int lastUpdateFrame;
	/*  c0 */ short int onGood;
	/*  c2 */ short int offGood;
	/*  c4 */ struct Path* lastFollowPath;
	/*  c8 */ short int curNode;
	/*  ca */ short int destNode;
	/*  cc */ float distToPoint;
	/*  d0 */ float actualAnimSpeed;
	/*  d4 */ float animAdjustLimit;
	/*  d8 */ int hotSpot;
	/*  dc */ float swarmOfsAmp;
	/*  e0 */ short int swarmOfsTimer;
	/*  e2 */ short int swarmOfsMinTime;
	/*  e4 */ short int swarmOfsMaxTime;
	/*  e6 */ char turnLeftAnim;
	/*  e7 */ char turnRightAnim;
	/*  e8 */ char walkAnim;
	/*  e9 */ char runAnim;
	/*  ea */ char cachedAnim;
	/*  eb */ char padSec3[1];
	/*  ec */ float fwdOfs;
};

struct CameraControlCollision {
	/*   0 */ struct mtx3 collRotMtx;
	/*  30 */ struct vec4 collTargHero;
	/*  40 */ struct vec4 collLastPnt[2];
	/*  60 */ float collVecAngOfs;
	/*  64 */ float collVecCurrAng;
	/*  68 */ float collVecLen;
	/*  6c */ short int collFlag;
	/*  6e */ short int collStatus;
};

struct Gadget_HackerRayTargetInterface_t {
	/*   0 */ /* function */ void** ActivateTarget;
	/*   4 */ /* function */ void** TurnOffTarget;
	/*   8 */ /* function */ void** TurnOnTarget;
	/*   c */ /* function */ void** IsTargetFullyActivated;
	/*  10 */ /* function */ void** IsTargetBeingActivated;
	/*  14 */ /* function */ void** IsTargetOff;
	/*  18 */ /* function */ void** GetTargetCompleteRatio;
	/*  1c */ /* function */ void** SetTargetFullyActivated;
	/*  20 */ /* function */ void** IsTargetRequredForObjective;
	/*  24 */ /* function */ void** GetValidHackingPosition;
};

struct tDR_Profile {
	/*   0 */ float LinearPredictionCutoff;
	/*   4 */ float LinearConvergenceThreshold;
	/*   8 */ float MaxLinearConvergenceDelta;
	/*   c */ float MinLinearConvergenceDelta;
	/*  10 */ float MinSmoothConvergenceDelta;
	/*  14 */ float PositionErrorThreshold;
	/*  18 */ float MaxTrackSpeed;
	/*  1c */ float MaxConvergeSpeed;
	/*  20 */ float Accel;
	/*  24 */ float Decel;
};

struct tDR_PositionHistory {
	/*   0 */ struct vec4 Pos[2];
	/*  20 */ int Time[2];
	/*  28 */ int Oldest;
	/*  2c */ int pad[1];
};

struct tDR_Vars {
	/*   0 */ struct tDR_PositionHistory Pos_History;
	/*  30 */ struct vec4 Velocity_Tracking;
	/*  40 */ struct vec4 Accel_Tracking;
	/*  50 */ struct vec4 Velocity_Converge;
	/*  60 */ struct vec4 Accel_Converge;
	/*  70 */ struct vec4 Pos_Start;
	/*  80 */ struct vec4 Pos_Converge;
	/*  90 */ struct vec4 Pos_Current;
	/*  a0 */ struct vec4 Velocity_Current;
	/*  b0 */ struct vec4 Accel_Current;
	/*  c0 */ struct vec4 Pos_Start_Minus_One;
	/*  d0 */ struct vec4 Pos_Converge_Plus_One;
	/*  e0 */ int Time_Start_Minus_One;
	/*  e4 */ int Time_Converge_Plus_One;
	/*  e8 */ int Time_StartStopping;
	/*  ec */ float Dist_Converge;
	/*  f0 */ struct tDR_Profile* pProfile;
	/*  f4 */ int Time_Start;
	/*  f8 */ int Time_Converge;
	/*  fc */ int Time_Current;
	/* 100 */ struct vec4 Pos_Actual;
	/* 110 */ struct tDR_PositionHistory Pos_PendingUpdates;
	/* 140 */ int Time_ProcessPendingUpdate;
	/* 144 */ int Interval_Latency_Offset;
	/* 148 */ unsigned int flags;
	/* 14c */ int pad;
	/* 150 */ int prevKnownSyncedTime;
	/* 154 */ int KnownSyncedTime;
	/* 158 */ int PreviousUpdateTime;
	/* 15c */ int PendingSyncTime;
	/* 160 */ struct vec4 PendingSyncedPos;
	/* 170 */ struct vec4 KnownSyncedPos;
	/* 180 */ struct vec4 prevKnownSyncedPos;
};

struct pad_frame {
	/*   0 */ unsigned char data[2];
};

enum FX_QuadSTSetup_e {
	FXQSTS_UPSIDE_DOWN = 0,
	FXQSTS_RIGHT_90_DEGREES = 1,
	FXQSTS_LEFT_90_DEGREES = 2,
	FXQSTS_RIGHT_SIDE_UP = 3,
	FXQSTS_MIRRORED = 4,
	FXQSTS_MIRRORED_UPSIDE_DOWN = 5,
	FXQSTS_MIRRORED_RIGHT_90 = 6,
	FXQSTS_MIRRORED_LEFT_90 = 7,
	FXQSTS_NUM_SETTINGS = 8
};

struct update4246 {
	/*   0 */ short int targeting;
	/*   2 */ short int shotTimer;
	/*   4 */ float spawnTimer;
	/*   8 */ float init_FOV;
	/*   c */ float FOV;
	/*  10 */ float fRailTspeed[2];
	/*  18 */ float fRailT[2];
	/*  20 */ int pointlight;
	/*  24 */ int pointlightTimer;
	/*  28 */ int actuatorIdx;
	/*  2c */ char cPointedAtMoby;
	/*  2d */ char cZoomSoundPlayed;
	/*  2e */ short int targetTimer;
	/*  30 */ moby* pTarget;
	/*  34 */ short int shotFXTimer;
	/*  36 */ unsigned char cZoomMode;
	/*  37 */ char cWasInLookModeLastFrame;
	/*  38 */ unsigned char cRailAlpha[2];
	/*  3a */ unsigned char cRailTex[2];
	/*  3c */ unsigned char cRailSTtimer[2];
	/*  3e */ char cRailST[2];
	/*  40 */ struct Hero* pUser;
	/*  50 */ struct vec4 fireDir;
	/*  60 */ bool earlyDrawn;
};

typedef /* function */ void** ShotSpawnFunction;

struct Vehicle : /* 0 */ struct Guber {
	static struct Vehicle ObjectMemory[0];
};

struct VehicleBase : /* 0 */ struct Vehicle {
	/*  20 */ struct tDR_Vars drVars;
	/* 1b0 */ struct mtx4 invMtx;
	/* 1f0 */ struct vec4 netLocalPos;
	/* 200 */ struct vec4f netLocalRot;
	/* 210 */ struct vec4 netUpdatedPos;
	/* 220 */ struct vec4f netUpdatedRot;
	/* 230 */ struct vec4f netLocalPassengerRot;
	/* 240 */ struct vec4f netUpdatedPassengerRot;
	/* 250 */ struct vec4 vel;
	/* 260 */ struct vec4f rotSpeed;
	/* 270 */ struct vec4 initPos;
	/* 280 */ struct vec4f initRot;
	/* 290 */ struct vec4 comeToRestStart;
	/* 2a0 */ struct vec4 comeToRestTotal;
	/* 2b0 */ MobyInstance* pMoby;
	/* 2b4 */ MobyInstance* pTarget;
	/* 2b8 */ struct Hero* pDriver;
	/* 2bc */ struct Hero* pPassenger;
	/* 2c0 */ int netUpdatedTimeStamp;
	/* 2c4 */ int netUpdatedPassengerTimeStamp;
	/* 2c8 */ int explodeTime;
	/* 2cc */ int noRiderTimer;
	/* 2d0 */ int resurrectTimer;
	/* 2d4 */ int resurrectTimeTotal;
	/* 2d8 */ unsigned int flags;
	/* 2dc */ short int vehicleType;
	/* 2de */ char whichGun;
	/* 2df */ char whichGun2;
	/* 2e0 */ char inAir;
	/* 2e1 */ char masterInAir;
	/* 2e2 */ short int inAirTimer;
	/* 2e4 */ short int vehicleMobyUID;
	/* 2e6 */ short int exitToggle;
	/* 2e8 */ float hitPoints;
	/* 2ec */ float maxHP;
	/* 2f0 */ float speed;
	/* 2f4 */ int comeToRestTime;
	/* 2f8 */ int waitDriverTime;
	/* 2fc */ char bDriverInValidState;
	/* 2fd */ char bPassengerInValidState;
	/* 2fe */ char bDoPostSinkingCameraRaise;
	/* 2ff */ char cPad[1];
	/* 300 */ int waitPassengerTime;
	/* 304 */ int explodeRequestSent;
	/* 308 */ int justExited;
	/* 30c */ int teamNum;
	/* 310 */ int iLastExplodedTime;
	/* 314 */ int iLastDamageTime;
	/* 318 */ float fDriverAttackDamage;
	/* 31c */ float fPassengerAttackDamage;
	/* 320 */ int timeSinceLastMessage;
	/* 324 */ VehicleInterface_t* pInterface;
	/* 328 */ struct Hero* pCutSceneDriver;
	/* 32c */ struct Hero* pCutScenePassenger;
	/* 330 */ moby* pSpawningEffect;
	/* 334 */ moby* pSpawningPad;
	/* 338 */ float fRunOverDamageMultiplier;
	/* 33c */ int iPad[1];
};

struct VehicleInterface_t {
	/*   0 */ int iVehicleType;
	/*   4 */ bool bArialVehicle;
	/*   8 */ float fVehicleRadius;
	/*   c */ unsigned int iVehicleInitFlags;
	/*  10 */ int iRespawnTime;
	/*  14 */ float fPlayerRunOverMinSpeed;
	/*  18 */ float fPlayerRunOverKillSpeed;
	/*  1c */ int iShotPrimaryType;
	/*  20 */ ShotSpawnFunction SpawnShotPrimary;
	/*  24 */ int iShotSecondaryType;
	/*  28 */ ShotSpawnFunction SpawnShotSecondary;
	/*  2c */ float fVehicleTopHeight;
	/*  30 */ float fPlayerExitRadius;
	/*  34 */ int iSeatSwitchButton;
	/*  38 */ int iMPHelpMessage;
	/*  3c */ int iMPRadarIcon;
	/*  40 */ int iDriverMessage;
	/*  44 */ int iPassengerMessage;
	/*  50 */ struct vec4a vDriverCameraOfs;
	/*  60 */ struct tDR_Profile DRProfile;
	/*  88 */ /* function */ void** GetVehicleBase;
	/*  8c */ /* function */ void** SetAsUnspawned;
	/*  90 */ /* function */ void** ReinitPhysics;
	/*  94 */ /* function */ void** UpdatePhysics;
	/*  98 */ /* function */ void** DamageReact;
	/*  9c */ /* function */ void** UpdateLocalDriverAttack;
	/*  a0 */ /* function */ void** UpdatePassenger;
	/*  a4 */ /* function */ void** UpdateRemoteVehicle;
	/*  a8 */ /* function */ void** UpdateVisuals;
	/*  ac */ /* function */ void** GetExitGroundHeight;
	/*  b0 */ /* function */ void** CheckSpecialEnterRules;
	/*  b4 */ /* function */ void** CheckSpecialExitRules;
	/*  b8 */ /* function */ void** GetJustExitedPlayer;
	/*  bc */ /* function */ void** SetAutoSpawn;
	/*  c0 */ /* function */ void** GetCamera29Pitch;
	/*  c4 */ /* function */ void** HandleSpecialDamageRules;
	/*  c8 */ /* function */ void** IsPlayerLockedIn;
};

typedef int grouplink;

enum FX_TEXTURE_ENUM {
	FX_TEXTURE_FIRST_SPECIAL = -8,
	FX_BACK_ALPHA_CLUT = -8,
	FX_RAW_FRONT_BUFFER = -7,
	FX_RAW_BACK_BUFFER = -6,
	FX_RAW_Z_BUFFER = -5,
	FX_BACK_BUFFER_RECOPY64 = -4,
	FX_BACK_BUFFER_COPY64 = -3,
	FX_BACK_BUFFER_RECOPY = -2,
	FX_BACK_BUFFER_COPY = -1,
	FX_LAME_SHADOW = 0,
	FX_GROUND_OUTER_RETICULE = 1,
	FX_GROUND_INNER_RETICULE = 2,
	FX_CENTER_SCREEN_RETICULE1 = 3,
	FX_CENTER_SCREEN_RETICULE2 = 4,
	FX_GENERIC_RETICULE = 5,
	FX_CMD_ATTACK = 6,
	FX_CMD_DEFEND = 7,
	FX_CMD_EMP = 8,
	FX_CMD_SHIELD = 9,
	FX_CMD_MINE = 10,
	FX_JP_THRUST_GLOW = 11,
	FX_JP_THRUST_HIGHLIGHT = 12,
	FX_JP_THRUST_FIRE = 13,
	FX_LIGHTNING1 = 14,
	FX_ENGINE = 15,
	FX_GLOW_PILL = 16,
	FX_LENS_FLARE_2 = 17,
	FX_SHIP_SHADOW = 18,
	FX_SPARKLE = 19,
	FX_WRENCH_BLUR = 20,
	FX_SUCK_TORNADO = 21,
	FX_WHITE = 22,
	FX_ALPHA_SPARK = 23,
	FX_HOLOGRAM = 24,
	FX_TV_HIGHLIGHT = 25,
	FX_TV_SMALLSCAN = 26,
	FX_HALO = 27,
	FX_TV_SCANLINES = 28,
	FX_TV_SHINE = 29,
	FX_TARGET_RETICULE = 30,
	FX_CONE_FIRE01_SLIM = 31,
	FX_SANDSTORM = 32,
	FX_PROGRESSBAR_INNER = 33,
	FX_PROGRESSBAR_OUTER = 34,
	FX_RYNO_RETICULE = 35,
	FX_SWINGSHOT_RETICULE = 36,
	FX_STATIC = 37,
	FX_BLASTER_RETICULE = 38,
	FX_DEVASTATOR_RETICULE = 39,
	FX_TRIANGLE_RETICULE = 40,
	FX_PLASMA_BALL_CORE = 41,
	FX_PLASMA_BALL_AURA = 42,
	FX_PLASMA_LIGHTNING_BOLT = 43,
	FX_PLASMA_BALL_FLARE = 44,
	FX_PLASMA_BALL_GLOW_RING = 45,
	FX_STEAM_SMOKE_GAS = 46,
	FX_FORK_LIGHTNING = 47,
	FX_FORK_LIGHTNING_GLOW_CORE = 48,
	FX_STARRY_FLASH = 49,
	FX_LAVA_GLOB = 50,
	FX_MAIN_RET1 = 51,
	FX_MAIN_RET2 = 52,
	FX_MAIN_RET3 = 53,
	FX_SMOKE_RING = 54,
	FX_EXPLOTYPE1 = 55,
	FX_SHOCKWAVE = 56,
	FX_EXPLOSION = 57,
	FX_PLASMA_SHOT = 58,
	FX_HEATMASK2 = 59,
	FX_CONCRETE = 60,
	FX_SHOCKWAVE01_KEITH = 61,
	FX_MUZZLEFLASH1 = 62,
	FX_MUZZLEFLASH2 = 63,
	FX_STREAMER_KEITH = 64,
	FX_MUZZLE_FLOWER = 65,
	FX_RADIALBLUR_SNIPER = 66,
	FX_HOLOSHIELD_BASE = 67,
	FX_SNIPER_OUTER_RETICULE = 68,
	FX_REFRACTOR_BEAM = 69,
	FX_SNIPER_INNER_RETICULE = 70,
	FX_STARBURST1_KEITH = 71,
	FX_STARBURST2_KEITH = 72,
	FX_FIRECIRCLE02_KEITH = 73,
	FX_HALFRING_KEITH = 74,
	FX_WHIRLPOOL_KEITH = 75,
	FX_CORONA_KEITH = 76,
	FX_PINCH_ALPHA_MASK = 77,
	FX_DUCK_FEATHER1 = 78,
	FX_DUCK_FEATHER2 = 79,
	FX_CELL_STREAM01 = 80,
	FX_CELL_STREAM02 = 81,
	FX_BULLET_TRAIL_SLIM = 82,
	FX_LIGHTNING02_KEITH = 83,
	FX_LIGHTNING01_SLIM = 84,
	FX_WARPOUT_SHOCKWAVE = 85,
	FX_N60_RETICULE = 86,
	FX_GROUND1_RETICULE = 87,
	FX_GROUND2_RETICULE = 88,
	FX_HEALTH_BALL = 89,
	FX_DISCBLADE_RETICULE = 90,
	FX_SHOCKBLASTER_RETICULE = 91,
	FX_FOCUS_RATCHET_RED = 92,
	FX_FOCUS_RATCHET_BLUE = 93,
	FX_FOCUS_RATCHET_RED_DEAD = 94,
	FX_FOCUS_RATCHET_BLUE_DEAD = 95,
	FX_LOCK_ON_RETICULE = 96,
	FX_CRACKS = 97,
	FX_LEVEL_0 = 98,
	FX_LEVEL_1 = 99,
	FX_LEVEL_2 = 100,
	FX_LEVEL_3 = 101,
	FX_LEVEL_4 = 102,
	FX_LEVEL_5 = 103,
	FX_LEVEL_6 = 104,
	FX_LEVEL_7 = 105,
	FX_LEVEL_8 = 106,
	FX_LEVEL_9 = 107,
	FX_LEVEL_10 = 108,
	FX_LEVEL_11 = 109,
	FX_LEVEL_12 = 110,
	FX_LEVEL_13 = 111,
	FX_LEVEL_14 = 112,
	FX_LEVEL_15 = 113,
	FX_LEVEL_16 = 114,
	FX_LEVEL_17 = 115,
	FX_LEVEL_18 = 116,
	FX_LEVEL_19 = 117,
	FX_LEVEL_20 = 118,
	FX_LEVEL_21 = 119,
	FX_LEVEL_22 = 120,
	FX_LEVEL_23 = 121,
	FX_LEVEL_24 = 122,
	FX_LEVEL_25 = 123,
	FX_TEXTURE_CNT = 124
};

typedef struct _sound_data SoundData;

struct tNW_ShotSpawnMessage {
	/*   0 */ short int targetPosX;
	/*   2 */ short int targetPosY;
	/*   4 */ short int targetPosZ;
	/*   8 */ int timeStamp;
	/*   c */ unsigned int sourceUID;
	/*  10 */ unsigned int targetUID;
	/*  14 */ unsigned int shotUID;
	/*  18 */ char type;
	/*  19 */ char miscInfo;
};

enum FX_BlendModes_e {
	FXBM_ADDITIVE = 0,
	FXBM_ADDITIVE_BLOOMED = 1,
	FXBM_BLENDED = 2,
	FXBM_BLENDED_BLOOMED = 3,
	FXBM_OPAQUE = 4,
	FXBM_SUBTRACTIVE = 5,
	FXBM_LIGHTEN = 6,
	FXBM_DARKEN = 7,
	FXBM_ALPHA_MASK = 8,
	FXBM_MASKED_ADDITIVE = 9,
	FXBM_MASKED_BLENDED = 10,
	FXBM_MASKED_SUBTRACTIVE = 11,
	FXBM_Z_BUFFER_ONLY = 12,
	FXBM_INVERTED = 13,
	FXBM_NORMAL = 14,
	FXBM_NUM_BLEND_MODES = 15,
	FXBM_UNKNOWN_BLEND_MODE = -1
};

struct MoveVarsAnimCache {
	/*   0 */ long unsigned int actCache[32];
	/* 100 */ long unsigned int reactCache[7];
	/* 138 */ long unsigned int elvCache[5];
	/* 160 */ long unsigned int motCache[3];
	/* 178 */ long unsigned int dirCache[4];
	/* 198 */ long unsigned int grpCache[33];
	/* 2a0 */ long unsigned int alertCache[4];
};

enum FXU_CubicLineStyles_e {
	FXU_CLS_NONE = 0,
	FXU_CLS_LIGHTNING = 1,
	FXU_CLS_BEAM = 2,
	FXU_CLS_NUM_STYLES = 3
};

struct FXU_CubicLineStatic_t {
	/*   0 */ int iNumPoints;
	/*   4 */ enum FX_BlendModes_e coreBlendMode;
	/*   8 */ enum FX_TEXTURE_ENUM coreTexture;
	/*   c */ float fCoreTexturePerPoint;
	/*  10 */ float fCoreTextureOfs;
	/*  14 */ int iCoreScrollFrames;
	/*  18 */ enum FX_BlendModes_e glowBlendMode;
	/*  1c */ enum FX_TEXTURE_ENUM glowTexture;
	/*  20 */ float fGlowTexturePerPoint;
	/*  24 */ float fGlowTextureOfs;
	/*  28 */ int iGlowScrollFrames;
	/*  2c */ float fTangentOccRateMin;
	/*  30 */ float fTangentOccRateMax;
	/*  34 */ float fTangentOccAmpMin;
	/*  38 */ float fTangentOccAmpMax;
	/*  3c */ float fPointRandomOfs;
	/*  40 */ float fCoreWidthMin;
	/*  44 */ float fCoreWidthMax;
	/*  48 */ float fGlowScaleMin;
	/*  4c */ float fGlowScaleMax;
	/*  50 */ float fAlphaScaleMin;
	/*  54 */ float fAlphaScaleMax;
	/*  58 */ int iPad[2];
};

struct FXU_CubicLineEndPoint_t {
	/*   0 */ int iCoreRGBA;
	/*   4 */ int iGlowRGBA;
	/*   8 */ char bFadeEnd;
	/*   9 */ enum FXU_CubicLineStyles_e style;
	/*   a */ unsigned char numEndPoints;
	/*   b */ char bDisabled;
	/*   c */ int iNumSkipPoints;
	/*  10 */ struct vec4 vPos;
	/*  20 */ struct vec4 vTangent;
	/*  30 */ struct quat vTangentOccQuat;
};

struct StickVars {
	/*   0 */ struct vec4 jointSpacePos;
	/*  10 */ struct vec4 hitNormal;
	/*  20 */ struct vec4 vel;
	/*  30 */ moby* pTarget;
	/*  34 */ moby* pTarget2;
	/*  38 */ short int jointIdx;
	/*  3a */ short int sTimer01;
	/*  3c */ short int sTimer02;
	/*  3e */ signed char volumeIdx;
	/*  3f */ char effectTimer;
};

struct update4249 {
	/*   0 */ struct StickVars stickVars;
	/*  40 */ struct vec4 vel;
	/*  50 */ struct vec4 reticulePos;
	/*  60 */ struct vec4 reticuleNormal;
	/*  70 */ int lastTargetMsgTime;
	/*  74 */ int randSeed;
	/*  78 */ float angVelX;
	/*  7c */ float angVelY;
	/*  80 */ short int timer;
	/*  82 */ short int reticuleFlags;
	/*  84 */ float speed;
	/*  88 */ grouplink group;
	/*  8c */ moby* pGround;
	/*  90 */ float fGlowOsc;
	/*  94 */ char inWater;
	/*  95 */ char bomber;
	/*  96 */ short int hopState;
	/*  98 */ moby* pTarget;
	/*  9c */ short int trackingTimer;
	/*  9e */ short int hop_timer;
	/*  a0 */ int spawnTime;
	/*  a4 */ float swingAng1;
	/*  a8 */ float swingAng2;
	/*  ac */ int soundChannel;
	/*  b0 */ float bobAmp;
	/*  b4 */ float bobAng;
	/*  b8 */ unsigned int landTime;
	/*  bc */ int hotSpot;
	/*  c0 */ short int pUserIdx;
	/*  c2 */ short int mineId;
	/*  c4 */ bool expanded;
	/*  c5 */ bool smallExplode;
	/*  c6 */ short int postFXflags;
	/*  c8 */ int ipad[3];
	/*  d4 */ float fPrimaryDamage;
	/*  d8 */ float fSecondaryDamage;
	/*  dc */ int fQuadTimer;
	/*  e0 */ int damageFlags;
	/*  f0 */ struct Manipulator blobManip[2];
	/* 170 */ struct FXU_CubicLineEndPoint_t mineArcEndPoints[2];
	/* 1f0 */ char mineArcTimer;
	/* 1f4 */ moby* pMineArcMoby;
	/* 1f8 */ int original_glow_rgba;
	/* 1fc */ int level10;
	/* 200 */ int step;
	/* 204 */ int pad[13];
};

struct SpiderTankControllerInterface_t {
	/*   0 */ /* function */ void** GetLegsMove;
	/*   4 */ /* function */ void** GetLegsCommands;
	/*   8 */ /* function */ void** GetBodyAimTarget;
	/*   c */ /* function */ void** GetBodyAimPosition;
	/*  10 */ /* function */ void** GetBodyAimAngles;
	/*  14 */ /* function */ void** GetBodyCommands;
	/*  18 */ /* function */ void** GetBodyMortarAimAngles;
	/*  1c */ /* function */ void** GetBodyMortarAimTarget;
	/*  20 */ /* function */ void** GetBodyMortarAimTargetPos;
};

struct SpiderTankMainInterface_t {
	/*   0 */ /* function */ void** CheckStepOnHero;
	/*   4 */ /* function */ void** GetDriverHero;
	/*   8 */ /* function */ void** GetVehicleBase;
	/*   c */ /* function */ void** GetLegsController;
	/*  10 */ /* function */ void** GetControllerInterface;
	/*  14 */ /* function */ void** SetSolidState;
	/*  18 */ /* function */ void** GetAimingYaw;
	/*  1c */ /* function */ void** GetFacingYaw;
	/*  20 */ /* function */ void** GetMortarFiringTorques;
	/*  24 */ /* function */ void** Hide;
	/*  28 */ /* function */ void** SetControllerMoby;
	/*  2c */ /* function */ void** GetNumMortarsCharged;
	/*  30 */ /* function */ void** SetRespawnFlag;
	/*  34 */ /* function */ void** ResetMortarWeapon;
	/*  38 */ /* function */ void** GetAimingPitch;
	/*  3c */ /* function */ void** GetTargetSourcePos;
	/*  40 */ /* function */ void** GetVelocity;
	/*  44 */ /* function */ void** DeleteSpiderTankLegs;
};

struct initStruct9532 {
	/*   0 */ struct vec4a pos;
	/*  10 */ struct vec4a pillarDir;
	/*  20 */ struct vec4a normal;
	/*  30 */ float gravity;
	/*  34 */ float pillarSpeed;
	/*  38 */ float scale;
	/*  3c */ short int sphereFireMax;
	/*  3e */ short int sphereFireMin;
	/*  40 */ short int partTimerMax;
	/*  42 */ short int partTimerMin;
	/*  44 */ short int sphereChunkMax;
	/*  46 */ short int sphereChunkMin;
	/*  48 */ short int sphereChunkTimerMax;
	/*  4a */ short int sphereChunkTimerMin;
	/*  4c */ float sphereChunkScalar;
	/*  50 */ float sphereRadius;
	/*  54 */ float damageHp;
	/*  58 */ float damageRadius;
	/*  5c */ int damageFlags;
	/*  60 */ int sphereFireColor;
	/*  64 */ int sphereChunkColor;
	/*  68 */ int pillarFireColor;
	/*  6c */ short int alphaBlendedSphereFreq;
	/*  6e */ short int alphaBlendedPillarFreq;
	/*  70 */ short int pillarSpawnWait;
	/*  74 */ float pillarFireDensity;
};

struct update8340 {
	/*   0 */ moby* loadedMine;
	/*   4 */ short int nextThrowTimer;
	/*   6 */ short int nextLoadTimer;
	/*   8 */ int mineId;
	/*   c */ struct Hero* pUser;
	/*  10 */ float fLoadDist;
	/*  14 */ float fMineRad;
	/*  18 */ float fShellPulse;
	/*  1c */ char groundArcLifeTimer1;
	/*  1d */ char groundArcLifeTimer2;
	/*  1e */ char groundArcWaitTimer1;
	/*  1f */ char groundArcWaitTimer2;
	/*  20 */ moby* pReticule;
	/*  24 */ int actuatorIdx;
	/*  28 */ int detonateFromRemote;
	/*  2c */ char cFireTriggered;
	/*  2d */ char level10;
	/*  2e */ char trajCollided;
	/*  2f */ char cpad[1];
	/*  30 */ int soundChannel;
	/*  34 */ int pad[3];
	/*  40 */ struct vec4 vMineLoadPos;
	/*  50 */ struct vec4 gunArc[3];
	/*  80 */ struct vec4 airArcA[2];
	/*  a0 */ struct vec4 airArcB[2];
	/*  c0 */ struct GadgetEvent delayedEvent;
	/* 110 */ struct FXU_CubicLineEndPoint_t gun_endPoints[2][3];
	/* 290 */ struct FXU_CubicLineEndPoint_t groundArcA_endPoints[2];
	/* 310 */ struct FXU_CubicLineEndPoint_t groundArcB_endPoints[2];
	/* 390 */ struct FXU_CubicLineEndPoint_t airArcA_endPoints[2];
	/* 410 */ struct FXU_CubicLineEndPoint_t airArcB_endPoints[2];
};

struct Part023 {
	/*   0 */ int rgb;
	/*   4 */ int state;
	/*   8 */ short int rotDir;
	/*   a */ unsigned char initAlpha;
	/*   b */ unsigned char initTimer;
	/*   c */ float scale;
	/*  10 */ struct vec4 vel;
};

enum FXU_Drawn_e {
	FXU_DRAWN_NO = -1,
	FXU_DRAWN_PARTIAL = 0,
	FXU_DRAWN_FULL = 1
};

struct update5025 {
	/*   0 */ float initDistortScale;
	/*   4 */ float endDistortScale;
	/*   8 */ float flashInvTimer;
	/*   c */ float exploScale;
	/*  10 */ short int explodeTimer;
	/*  12 */ short int initTime;
	/*  14 */ short int flashTimer;
	/*  16 */ short int bGroundRing;
	/*  18 */ short int bDistort;
	/*  1a */ short int bScreenFlash1;
	/*  1c */ short int bShell;
	/*  1e */ short int bScreenFlash2;
	/*  20 */ int numMoonRock;
	/*  24 */ int numSliver;
	/*  28 */ int numMoltenRock;
	/*  2c */ int numCloud;
	/*  30 */ short int numPlumes;
	/*  32 */ short int numLines;
	/*  34 */ short int padA;
	/*  36 */ short int bDirtyRing;
	/*  38 */ moby* pPlatform;
	/*  3c */ short int bRandomRing;
	/*  3e */ short int elecTimer;
	/*  40 */ int colorCenterCore1;
	/*  44 */ int colorCenterCore2;
	/*  48 */ int colorMoonRock;
	/*  4c */ int colorMoonRockGlow;
	/*  50 */ int colorSliver;
	/*  54 */ int colorMoltenRock;
	/*  58 */ int colorCloud;
	/*  5c */ int colorShell;
	/*  60 */ int colorRing;
	/*  64 */ int damageFlags;
	/*  68 */ float damageRadius;
	/*  6c */ float damageHp;
	/*  70 */ moby* pDamager;
	/*  74 */ moby* pDamageIgnore;
	/*  78 */ int padB[2];
	/*  80 */ struct vec4 groundRingNormal;
	/*  90 */ struct vec4 randomRingNormal;
};

struct update9475 {
	/*   0 */ struct vec4 pvReticuleNorms[15];
	/*  f0 */ struct vec4 vReticulePos;
	/* 100 */ struct vec4 vReticuleNorm;
	/* 110 */ int iReticuleNormTimer;
	/* 114 */ int ipad[3];
};

enum e_StrandEndPoints {
	M4249L_START = 0,
	M4249L_END = 1
};

struct initStruct8076 {
	/*   0 */ struct vec4a pos;
	/*  10 */ struct vec4a pillarDir;
	/*  20 */ struct vec4a normal;
	/*  30 */ float gravity;
	/*  34 */ float pillarSpeed;
	/*  38 */ float scale;
	/*  3c */ short int sphereFireMax;
	/*  3e */ short int sphereFireMin;
	/*  40 */ short int partTimerMax;
	/*  42 */ short int partTimerMin;
	/*  44 */ short int sphereChunkMax;
	/*  46 */ short int sphereChunkMin;
	/*  48 */ short int sphereChunkTimerMax;
	/*  4a */ short int sphereChunkTimerMin;
	/*  4c */ float sphereChunkScalar;
	/*  50 */ float sphereRadius;
	/*  54 */ float damageHp;
	/*  58 */ float damageRadius;
	/*  5c */ int damageFlags;
	/*  60 */ int sphereFireColor;
	/*  64 */ int sphereChunkColor;
	/*  68 */ int pillarFireColor;
	/*  6c */ short int alphaBlendedSphereFreq;
	/*  6e */ short int alphaBlendedPillarFreq;
	/*  70 */ short int pillarSpawnWait;
	/*  74 */ float pillarFireDensity;
};

struct update8374 {
	/*   0 */ struct vec4 up;
	/*  10 */ struct vec4 vel;
	/*  20 */ short int sTimer01;
	/*  22 */ short int spad[1];
	/*  24 */ int randSeed;
	/*  28 */ int weaponSource;
	/*  2c */ struct Hero* pUser;
	/*  30 */ float damage;
};

struct st_t {
	/*   0 */ float s;
	/*   4 */ float t;
};

typedef int spherelink;
typedef int cylinderlink;

struct cameraShared {
	/*   0 */ float leadStrength;
	/*   4 */ void* pCam;
	/*   8 */ spherelink sphereVolume;
	/*   c */ int cuboidVolume;
	/*  10 */ cylinderlink cylinderVolume;
	/*  14 */ int pathLink;
	/*  18 */ float focusHeight;
	/*  1c */ unsigned char priority;
	/*  1d */ unsigned char blendTypeIn;
	/*  1e */ unsigned char blendTypeOut;
	/*  1f */ unsigned char activationType;
};

struct CamCollGridPrim {
	/*   0 */ struct vec4 bsphere;
	/*  10 */ int type;
	/*  14 */ int index;
	/*  18 */ int flags;
	/*  1c */ int iValue;
	/*  20 */ float fValue;
	/*  24 */ int pad[3];
};

struct CameraControlPosition_0 {
	/*   0 */ struct vec4 ideal;
	/*  10 */ short int pull;
	/*  12 */ short int aTimer;
	/*  14 */ short int bTimer;
	/*  16 */ short int inTimer;
};

struct CameraControlRotation_0 {
	/*   0 */ short int frames;
	/*   2 */ short int hitGrnd;
	/*   4 */ float ofsZ;
	/*   8 */ float height;
	/*   c */ float zSpeed;
	/*  10 */ float hSpeed;
	/*  14 */ float pitch;
	/*  18 */ float pitchSp;
	/*  1c */ float pitchGain;
	/*  20 */ float pitchDamp;
	/*  24 */ float invFrames;
	/*  28 */ float zRotOfs;
	/*  2c */ float reqZRotOfs;
	/*  30 */ float reqZRotOfsSpeed;
	/*  34 */ float reqZRotOfsAccel;
	/*  38 */ float reqZRotOfsDeccel;
	/*  3c */ int pad;
};

struct CameraControlTarget_0 {
	/*   0 */ struct vec4 pos;
	/*  10 */ struct vec4 upPos;
	/*  20 */ struct vec4 upOrg;
	/*  30 */ struct vec4 upTarg;
	/*  40 */ struct vec4 posOfs;
	/*  50 */ struct vec4 posOfsCam;
	/*  60 */ struct vec4 cPos;
	/*  70 */ struct vec4 prevUsedPos;
	/*  80 */ struct vec4 savedPos;
	/*  90 */ struct vec4 cSpeed;
	/*  a0 */ struct vec4 cUpSpeed;
	/*  b0 */ struct vec4 altPosOfs;
	/*  c0 */ struct vec4 aSpeed;
	/*  d0 */ float ofsZ;
	/*  d4 */ float reqOfsZ;
	/*  d8 */ float reqOfsZGain;
	/*  dc */ float reqOfsZSp;
	/*  e0 */ moby* pMoby;
	/*  e4 */ char follHero;
	/*  e5 */ char follHeroFrom;
	/*  e6 */ short int follTimer;
	/*  e8 */ float follTimerMaxInv;
	/*  ec */ float follUpTimerInv;
	/*  f0 */ float follHeight;
	/*  f4 */ short int follUpTimer;
	/*  f6 */ char usecPosState;
	/*  f7 */ char follHeroColl;
	/*  f8 */ char cPosTimer;
	/*  f9 */ char usecPos;
	/*  fa */ short int reqOfsZFlag;
	/*  fc */ float cpGain;
	/* 100 */ float cpDamp;
	/* 104 */ float cpUpGain;
	/* 108 */ float cpUpDamp;
	/* 10c */ short int cPosTimerMax;
	/* 10e */ char cPosMagnetic;
	/* 10f */ signed char cPosMagneticTimer;
	/* 110 */ float cPosUpDist;
	/* 114 */ int cPosUpFrames;
	/* 118 */ moby* pFloor;
	/* 11c */ float floorLastHeight;
};

struct CameraControlOffset_0 {
	/*   0 */ struct vec4 camOfs;
	/*  10 */ struct vec4 updOfs;
	/*  20 */ struct PolarSm updSpeed;
	/*  2c */ float camDist;
	/*  30 */ float camHeight;
	/*  34 */ float azimuth;
	/*  38 */ float elevation;
	/*  3c */ short int reqDistFlag;
	/*  3e */ short int reqHeightFlag;
	/*  40 */ float reqDist;
	/*  44 */ float reqDistSpeed;
	/*  48 */ float reqDistGain;
	/*  4c */ float reqHeight;
	/*  50 */ float reqHeightSpeed;
	/*  54 */ float reqHeightGain;
	/*  58 */ float defDist;
};

struct CameraControlUser_0 {
	/*   0 */ float padX;
	/*   4 */ float speedX;
	/*   8 */ float padY;
	/*   c */ float speedY;
	/*  10 */ int flags;
	/*  14 */ float azmSpeed;
	/*  18 */ float azmThresh;
	/*  1c */ float azmPad;
	/*  20 */ float azmRot;
	/*  24 */ float elvForce;
};

struct CameraControlCollision_0 {
	/*   0 */ struct vec4 target;
	/*  10 */ struct vec4 speed;
	/*  20 */ struct vec4 lastCollPos;
	/*  30 */ float distOfs;
	/*  34 */ short int distTimer;
	/*  36 */ short int interp;
	/*  38 */ short int lastElvDirColl;
	/*  3a */ short int clearDistOfs;
	/*  3c */ float collSizeMod;
	/*  40 */ float collSegNum;
	/*  44 */ float collRadAdd;
	/*  48 */ int bumpFlags;
	/*  4c */ short int losCollFrames;
	/*  4e */ short int disableLOS;
};

// warning: multiple differing types with the same name, only one recovered
enum NetThresholdMethod {
	NoThreshold = 0,
	ThresholdEquality = 1,
	ThresholdAbsoluteMagnitude = 2,
	ThresholdRatioMagnitude = 3,
	ThresholdAnchorDelta = 4,
	ThresholdCallback = 5,
	ExtraNetThresholdMethod = 16777215
};

typedef /* function */ void** NetTypeErrorThresholdCallback;

// warning: multiple differing types with the same name, only one recovered
struct NetTypeBroadcastSchedule {
	/*   0 */ unsigned int MinUpdateInterval;
	/*   4 */ enum NetThresholdMethod ErrorThresholdType;
	union ThresholdData {
		/*   8 */ float ErrorThresholdMagnitude;
		/*   8 */ NetTypeErrorThresholdCallback pfThresholdCallback;
	} ThresholdData;
	/*   c */ char TransportFlags;
};

// warning: multiple differing types with the same name, only one recovered
struct NetTypeField {
	/*   0 */ int Offset;
	/*   4 */ int ElementSize;
	/*   8 */ int ElementCount;
	/*   c */ int Type;
	/*  10 */ struct NetTypeBroadcastSchedule UpdateSchedule;
};

// warning: multiple differing types with the same name, only one recovered
struct NetTypeStructure {
	/*   0 */ int TotalSize;
	/*   4 */ int FieldCount;
	/*   8 */ char Name[32];
	/*  28 */ struct NetTypeField** ChildFieldType;
	/*  2c */ int* ChildFieldOffset;
};

struct Sphere {
	/*   0 */ struct mtx3 matrix;
	/*  30 */ struct vec4 pos;
	/*  40 */ struct mtx3 imatrix;
	/*  70 */ struct vec4 rot;
};

struct M9738_Interface_t {
	/*   0 */ /* function */ void** SetShieldColl;
};

struct PadStream {
	/*   0 */ short unsigned int button_bits[4];
	/*   8 */ short unsigned int analog_stick[4];
	/*  10 */ short unsigned int right_analog_stick[4];
	/*  18 */ unsigned char frames_with_btn_diffs;
	/*  19 */ unsigned char btn_bit_diffs[32];
	/*  3c */ int cur_btn_bit_offset;
	/*  40 */ struct pad_frame prev_frame;
	/*  42 */ unsigned char pad_stream_buf[200][2];
	/* 1d4 */ int totalPadStreamBytes;
	/* 1d8 */ int curFrame;
	/* 1dc */ int padStreamReady;
};

struct LocalHero : /* 0 */ struct Hero {
	/* 2fe0 */ int frameSentStick;
	/* 2fe4 */ float damageDone;
	/* 2fe8 */ short int numKills;
	/* 2fea */ char slot;
	/* 2fec */ struct PadStream padStream;
	/* 31cc */ unsigned char startGameButtonOffFrames;
	/* 31cd */ unsigned char curPadMsgSequenceNum;
	/* 31ce */ char curPadMsgFrame;
	/* 31cf */ char framesUntilStateRot;
	/* 31d0 */ char mapTimer;
	/* 31d2 */ short int lastMineId;
	/* 31d4 */ struct HeroCommand command;
	/* 31e0 */ MobyInstance* pRespawnDest;
};

struct EnemyTypeTag {
	/*   0 */ short int oClasses[4];
	/*   8 */ short int localizationTag;
	/*   a */ short int localizationDescTag;
	/*   c */ short int localizationSizeTag;
	/*   e */ short int localizationWorldTag;
	/*  10 */ short int barWidths[4];
};

struct CameraControlLook_4 {
	/*   0 */ float userPad;
	/*   4 */ float userSpeed;
	/*   8 */ float userPadUp;
	/*   c */ float userSpeedUp;
	/*  10 */ float curPitch;
	/*  14 */ float fwdPush;
	/*  18 */ float fwdSpeed;
};

struct camera4 {
	/*   0 */ struct cameraShared s;
	/*  20 */ short int swTimer[4];
	/*  28 */ short int camRequested[4];
	/*  30 */ short int centerTimer[4];
	/*  38 */ char overridePad[4];
	/*  3c */ char fpsInit[4];
};

struct CameraControlTarget {
	/*   0 */ struct vec4 targetPos;
	/*  10 */ struct vec4f targetRot;
	/*  20 */ struct vec4 targetUp;
	/*  30 */ struct vec4 targetFwd;
	/*  40 */ int targetType;
	/*  44 */ moby* targetMoby;
	/*  48 */ float targetRotThresh;
	/*  4c */ float targetOfsZ;
	/*  50 */ int targetPathLink;
	/*  54 */ int targetPathNode;
	/*  58 */ float targetUpRotThresh;
	/*  5c */ float targetDownRotThresh;
};

struct CameraControlPosition {
	/*   0 */ struct vec4 posSpeed;
	/*  10 */ float posGain;
	/*  14 */ float posDamp;
	/*  18 */ float posLimit;
	/*  1c */ short int posFlag;
	/*  1e */ short int posInterp;
	/*  20 */ float posAltGain;
	/*  24 */ float posAltDamp;
};

struct CameraControlRotation {
	/*   0 */ struct vec4f rotSpeed;
	/*  10 */ struct vec3 rotIdeal;
	/*  1c */ int disable;
	/*  20 */ float rotGain;
	/*  24 */ float rotDamp;
	/*  28 */ float rotLimit;
	/*  2c */ short int rotFlag;
	/*  2e */ short int rotUpFlag;
	/*  30 */ float quatInterp;
	/*  34 */ float quatInterpSpeed;
	/*  38 */ float quatUpInterp;
	/*  3c */ float quatUpInterpSpeed;
	/*  40 */ float quatInterpFactor;
	/*  44 */ float quatUpInterpFactor;
};

struct CameraControlMobyDriven {
	/*   0 */ int timer;
	/*   4 */ int timerMax;
	/*   8 */ polar polIdeal;
	/*  1c */ polar polCurr;
	/*  30 */ struct vec4 polCenter;
	/*  40 */ int collide;
	/*  44 */ float radCurve1;
	/*  48 */ float radCurve2;
};

struct camera5 {
	/*   0 */ struct cameraShared s;
	/*  20 */ char screenEffect;
	/*  21 */ char pad[31];
};

struct update4234 {
	/*   0 */ struct vec4 reticulePos;
	/*  10 */ struct vec4 reticuleNorm;
	/*  20 */ struct vec4 projectedVel;
	/*  30 */ float refireTimer;
	/*  34 */ int drawReticule;
	/*  38 */ float glowOsc;
	/*  3c */ int actuatorIdx;
	/*  40 */ struct Hero* pUser;
	/*  44 */ moby* pTarget;
	/*  48 */ moby* pGrenade;
	/*  4c */ char cpad[1];
};

struct update8439 {
	/*   0 */ moby* pRail;
	/*   4 */ struct Hero* pUser;
	/*   8 */ int ipad[3];
};

struct sceDevVu0Cnd {
	/*   0 */ long long unsigned int vf[32];
	/* 200 */ u_int status;
	/* 204 */ u_int mac;
	/* 208 */ u_int clipping;
	/* 20c */ u_int r;
	/* 210 */ u_int i;
	/* 214 */ u_int q;
	/* 218 */ short unsigned int vi[16];
};

typedef int cuboidlink;

struct npcstring {
	/*   0 */ char* text[5];
};

struct npcVars {
	/*   0 */ short int type;
	/*   2 */ short int msg;
	/*   4 */ short int prevStep;
	/*   6 */ short int prevMsg;
	/*   8 */ char autoTalk;
	/*   9 */ char init;
	/*   a */ short int pad;
	/*   c */ float talkRange;
	/*  10 */ float hero_dist;
	/*  14 */ float cam_init_height;
	/*  18 */ float cam_init_dist;
	/*  1c */ float cam_init_rot;
	/*  20 */ struct npcstring name;
	/*  34 */ short int scene;
	/*  36 */ short int step;
	/*  38 */ int step_time;
	/*  3c */ struct npcStep* pStep;
};

// warning: multiple differing types with the same name, only one recovered
struct ReactVars {
	/*   0 */ int flags;
	/*   4 */ int lastReactFrame;
	/*   8 */ moby* pInfectionMoby;
	/*   c */ float acidDamage;
	/*  10 */ char eternalDeathCount;
	/*  11 */ char doHotSpotChecks;
	/*  12 */ char unchainable;
	/*  13 */ char isShielded;
	/*  14 */ char state;
	/*  15 */ char deathState;
	/*  16 */ char deathEffectState;
	/*  17 */ char deathStateType;
	/*  18 */ signed char knockbackRes;
	/*  19 */ char padC;
	/*  1a */ char padD;
	/*  1b */ char padE;
	/*  1c */ char padF;
	/*  1d */ char padG;
	/*  1e */ char padH;
	/*  1f */ char padI;
	/*  20 */ float minorReactPercentage;
	/*  24 */ float majorReactPercentage;
	/*  28 */ float deathHeight;
	/*  2c */ float bounceDamp;
	/*  30 */ int deadlyHotSpots;
	/*  34 */ float curUpGravity;
	/*  38 */ float curDownGravity;
	/*  3c */ float shieldDamageReduction;
	/*  40 */ float damageReductionSameOClass;
	/*  44 */ int deathCorn;
	/*  48 */ int deathType;
	/*  4c */ short int deathSound;
	/*  4e */ short int deathSound2;
	/*  50 */ float peakFrame;
	/*  54 */ float landFrame;
	/*  58 */ float drag;
	/*  5c */ short unsigned int effectStates;
	/*  5e */ short unsigned int effectPrimMask;
	/*  60 */ short unsigned int effectTimers[16];
};

struct TransportVars {
	/*   0 */ int bInitForTransport;
	/*   4 */ moby* pTransport;
	/*   8 */ float fTransportScale;
	/*   c */ int pad;
};

struct EffectorVars {
	/*   0 */ char effectorMode;
	/*   1 */ char bunkerType;
	/*   2 */ char padc[2];
	/*   4 */ float strength;
	/*   8 */ int type;
	/*   c */ int pad;
};

struct RoleVars {
	/*   0 */ GC_GroupController* tacticalGroup;
	/*   4 */ GC_Role* tacticalRole;
	/*   8 */ GC_Wave* pWave;
	/*   c */ GC_SpawnReference* pSpawnRef;
	/*  10 */ struct Path* copiedPathInfo;
	/*  14 */ moby* copiedTargetInfo;
	/*  18 */ float copiedRolePriority;
	/*  1c */ int copiedRoleType;
	/*  20 */ char roleIsNew;
	/*  21 */ char roleCompletionState;
	/*  22 */ char roleOverridable;
	/*  23 */ char spawnedMethod;
	/*  24 */ unsigned int flags;
};

struct CommandVars {
	/*   0 */ struct FlashVars* pFlashVars;
	/*   4 */ moby* pDestroy;
	/*   8 */ short int commandType;
	/*   a */ char active;
	/*   b */ char padA;
	/*   c */ cuboidlink spot;
	/*  10 */ float parameter;
};

struct NavigationVars {
	/*   0 */ struct vec4 waypointPos;
	/*  10 */ struct vec4 location;
	/*  20 */ struct vec4 targetLoc;
	/*  30 */ int command;
	/*  34 */ int traversalFlags;
	/*  38 */ float toleranceSqr;
	/*  3c */ short unsigned int edge;
	/*  3e */ short unsigned int nextNode;
	/*  40 */ short int pathCurIndex;
	/*  42 */ short int pathDestIndex;
	/*  44 */ float jumpDistance;
	/*  48 */ int pad[2];
};

// warning: multiple differing types with the same name, only one recovered
typedef struct TargetVars* tVarPtr;
typedef struct npcVars* nVarPtr;
// warning: multiple differing types with the same name, only one recovered
typedef struct TrackVars* trVarPtr;
// warning: multiple differing types with the same name, only one recovered
typedef struct SuckVars* sVarPtr;
// warning: multiple differing types with the same name, only one recovered
typedef struct ReactVars* rVarPtr;
typedef struct ArmorVars* aVarPtr;
// warning: multiple differing types with the same name, only one recovered
typedef struct MoveVars* mVarPtr;
typedef struct BogeyVars* bVarPtr;
typedef ScriptVars* scVarPtr;
typedef struct TransportVars* transVarPtr;
typedef struct EffectorVars* eVarPtr;
typedef struct CommandVars* cmdVarPtr;
typedef struct RoleVars* roleVarPtr;
typedef struct FlashVars* flashVarPtr;
typedef struct MoveVars_V2* m2VarPtr;
typedef struct NavigationVars* navVarPtr;
typedef struct ObjectiveVars* oVarPtr;

struct SubVars {
	/*   0 */ tVarPtr tVars;
	/*   4 */ nVarPtr nVars;
	/*   8 */ trVarPtr trVars;
	/*   c */ bVarPtr bVars;
	/*  10 */ rVarPtr rVars;
	/*  14 */ scVarPtr scVars;
	/*  18 */ mVarPtr mVars;
	/*  1c */ m2VarPtr m2Vars;
	/*  20 */ aVarPtr aVars;
	/*  24 */ transVarPtr transVars;
	/*  28 */ eVarPtr eVars;
	/*  2c */ cmdVarPtr cmdVars;
	/*  30 */ roleVarPtr roleVars;
	/*  34 */ flashVarPtr flashVars;
	/*  38 */ sVarPtr sVars;
	/*  3c */ navVarPtr navVars;
	/*  40 */ oVarPtr oVars;
	/*  44 */ int pad[3];
};

typedef int grindlink;

struct GrindPath {
	/*   0 */ struct vec4 boundSphere;
	/*  10 */ struct Path* pPath;
	/*  14 */ int wrap;
	/*  18 */ int inactive;
	/*  1c */ int pad;
};

struct update8227 {
	/*   0 */ struct SubVars sVars;
	/*  50 */ struct CommandVars cVars;
	/*  64 */ grindlink grindPath;
	/*  68 */ int endPoint0;
	/*  6c */ int endPoint1;
	/*  70 */ struct GrindPath* pGrindPath;
	/*  74 */ int exclusions[4];
	/*  84 */ int endPoint;
	/*  88 */ moby* pAttachMoby;
	/*  8c */ int attachJoint;
	/*  90 */ float animFrame;
	/*  94 */ int oneWay;
	/*  98 */ moby* pSegment[8];
	/*  c0 */ struct vec4 lastSrcPos;
	/*  d0 */ struct vec4 lastEndPos;
	/*  e0 */ struct vec4 initPos;
};

struct update8244 {
	/*   0 */ struct StickVars stickVars;
	/*  40 */ struct vec4 vel;
	/*  50 */ struct vec4 lastPos;
	/*  60 */ char enemyGrenadeMode;
	/*  61 */ char empGrenadeMode;
	/*  62 */ short int bounceTimer;
	/*  64 */ short int spad[2];
	/*  68 */ int ipad[2];
	/*  70 */ moby* pParent;
	/*  74 */ int inWater;
	/*  78 */ int upgLvl;
	/*  7c */ short int velOrientIndex;
	/*  7e */ short int lifeTimer;
};

typedef /* function */ void** UpdatePosFunc;

struct M8244_Interface_t {
	/*   0 */ /* function */ void** AttachPointToJoint;
};

struct update6736 {
	/*   0 */ struct vec4 vel;
	/*  10 */ float rotVelX;
	/*  14 */ float rotVelY;
	/*  18 */ short int timer;
	/*  1a */ short int lifeSpan;
	/*  1c */ short int maxScale;
	/*  1e */ short int gravity;
	/*  20 */ int smokeColors[4];
	/*  30 */ int type;
	/*  34 */ int bCollide;
	/*  38 */ int additiveSmoke;
	/*  3c */ short int initSmokeScale;
	/*  3e */ short int endSmokeScale;
};

enum M6736_Type {
	_6736_TYPE_NONSMOKING = 0,
	_6736_TYPE_SMOKING = 1,
	_6736_TYPE_COLL_SMOKING = 2,
	_6736_TYPE_RAND_SMOKING = 3,
	_6736_TYPE_SMOKE_CRAZY = 4
};

struct update7326 {
	/*   0 */ struct vec4 groundN;
	/*  10 */ struct vec4 groundS;
	/*  20 */ struct vec4 dirtKickPos[8];
	/*  a0 */ float maxRadius;
	/*  a4 */ float maxHeight;
	/*  a8 */ float gravity;
	/*  ac */ short int impactTimer;
	/*  ae */ short int expandTimer;
	/*  b0 */ int stateTimer;
	/*  b4 */ int flags;
	/*  b8 */ float partScale;
	/*  bc */ char initAlpha;
	/*  bd */ char endAlpha;
	/*  be */ char mode;
	/*  bf */ char pad1;
	/*  c0 */ float damage;
	/*  c4 */ float pad[3];
};

enum FXU_CyclicalFadeTypes_e {
	FXU_CFT_NO_FADE = 0,
	FXU_CFT_SAW_WAVE = 1,
	FXU_CFT_REVERSE_SAW_WAVE = 2,
	FXU_CFT_SIN_WAVE = 3,
	FXU_CFT_COS_WAVE = 4,
	FXU_CFT_SQUARE_WAVE = 5,
	FXU_CFT_TRIANGLE_WAVE = 6,
	FXU_CFT_HALF_TRIANGLE_WAVE = 7,
	FXU_CFT_REVERSE_HALF_TRIANGLE_WAVE = 8,
	FXU_CFT_NUM_FADE_TYPES = 9
};

struct FXU_CubicLineSet_t {
	/*   0 */ int iCycleFrames;
	/*   4 */ int iCycleOffset;
	/*   8 */ enum FXU_CyclicalFadeTypes_e fadeType;
	/*   c */ /* function */ void** LineReinitCallback;
	/*  10 */ struct FXU_CubicLineEndPoint_t* pLineEndPoints[32];
	/*  90 */ float fFadeTypeScale;
	/*  94 */ float fFadeScale;
	/*  98 */ float fFadeShift;
	/*  9c */ float fFadeMinValue;
	/*  a0 */ float fFadeMaxValue;
	/*  a4 */ int iNumLines;
	/*  a8 */ int iSetInitFrame;
	/*  ac */ int bDeactivating;
	/*  b0 */ int iMinStartSkipPoints;
	/*  b4 */ int iMaxStartSkipPoints;
	/*  b8 */ int iMinEndSkipPoints;
	/*  bc */ int iMaxEndSkipPoints;
};

struct FXUtilsInterface {
	static struct vec4a vDefaultUp;
	static float fCircleCos[65];
	static float fCircleSin[65];
	static float fShellCircleCos[11];
	static float fShellCircleSin[11];
	static struct FXU_CubicLineStatic_t CubicLineStyle_Lightning;
	static struct FXU_CubicLineStatic_t CubicLineStyle_ForceFieldBeam;
	static struct FXU_CubicLineStatic_t* CubicLineStylesTable[3];
};

struct update8263 {
	/*   0 */ moby* targets[8];
	/*  20 */ float targetDistSq[8];
	/*  40 */ struct vec4 impactPos;
	/*  50 */ float scrollTex;
	/*  54 */ int life;
	/*  58 */ float centerGlowFactor;
	/*  5c */ int flashTimer;
	/*  60 */ int shockAlpha;
	/*  64 */ float columnZScale;
	/*  68 */ short int effectTime;
	/*  6a */ short int pinchTimer;
	/*  6c */ float curRadius;
	/*  70 */ float effectRot;
	/*  74 */ float pinchfactor;
	/*  78 */ struct Hero* pUser;
	/*  7c */ struct FXU_CubicLineStatic_t* pStyle;
	/*  80 */ struct FXU_CubicLineSet_t lineSet;
	/* 140 */ struct FXU_CubicLineEndPoint_t lineEndPoints[11][3];
};

struct update8299 {
	/*   0 */ struct SubVars sVars;
	/*  50 */ struct CommandVars cVars;
	/*  64 */ grindlink grindPath;
	/*  68 */ int target;
	/*  6c */ struct GrindPath* pGrindPath;
	/*  70 */ moby* pAttachMoby;
	/*  74 */ int attachJoint;
	/*  78 */ float animFrame;
	/*  7c */ moby* pSegment[8];
	/*  a0 */ struct vec4 lastAttachPos;
	/*  b0 */ struct Hero* pAttachedHero;
	/*  b4 */ int pad[3];
};

struct EnvMonitorData {
	/*   0 */ struct vec4a corners[4];
	/*  40 */ struct vec4a camOffset;
	/*  50 */ struct vec4a camRot;
	/*  60 */ short int startFrame;
	/*  62 */ short int endFrame;
	/*  64 */ short int powerOnFrames;
	/*  66 */ short int powerOffFrames;
	/*  68 */ int targetIndex[4];
};

struct Part074_fixed {
	/*   0 */ int beginColor;
	/*   4 */ int endColor;
	/*   8 */ short int maxScale;
	/*   a */ short int startScale;
	/*   c */ int lifeSpan;
};

struct update167 {
	/*   0 */ int timer;
	/*   4 */ int thruster;
	/*   8 */ moby* pPack;
	/*   c */ int lastRec;
	/*  10 */ struct vec4 lastPos;
	/*  20 */ float scale;
	/*  24 */ float edgeScale;
	/*  28 */ float edgeScaleSm;
	/*  2c */ float scaleSq;
	/*  30 */ float scaleSub;
	/*  34 */ float edgeScaleSub;
	/*  38 */ float edgeScaleSmSub;
	/*  3c */ float scaleSqSub;
	/*  40 */ float txScroll;
	/*  44 */ float txEdgeScroll;
	/*  48 */ int pad[2];
};

struct LinePart {
	/*   0 */ char i_class;
	/*   1 */ char type;
	/*   2 */ char tex;
	/*   3 */ char gs_alpha;
	/*   4 */ int rgba;
	/*   8 */ char pad;
	/*   9 */ char draw_dist;
	/*   a */ short int timer;
	/*   c */ int rgba2;
	/*  10 */ struct vec4 pos;
	/*  20 */ struct vec4 pos2;
	/*  30 */ int update[4];
};

struct update6244 {
	/*   0 */ struct vec4 fireDir;
	/*  10 */ float actionTimer;
	/*  14 */ int fireCount;
	/*  18 */ int stage;
	/*  1c */ int LastCameraState;
	/*  20 */ moby* pTarget;
	/*  24 */ int targetTimer;
	/*  28 */ float targetModZ;
	/*  2c */ short int pointlight;
	/*  2e */ short int pointlighttimer;
	/*  30 */ moby* pCandidate;
	/*  34 */ int candidateTimer;
	/*  38 */ int lookMode;
	/*  3c */ int actuatorIdx;
	/*  40 */ struct Hero* pUser;
	/*  44 */ float blend_fac;
	/*  48 */ int M6244_OutAmmoFirstTime;
	/*  4c */ int level10;
};

struct update4236 {
	/*   0 */ struct StickVars stickVars;
	/*  40 */ struct vec3 lastTargetPos;
	/*  4c */ char cHitTarget;
	/*  4d */ char level10;
	/*  4e */ char cpad[2];
	/*  50 */ moby* pTarget;
	/*  54 */ float targetModZ;
	/*  58 */ float curSpeed;
	/*  5c */ float yRot;
	/*  60 */ float rotSp;
	/*  64 */ short int timer;
	/*  66 */ char useAutoTracking;
	/*  67 */ char exhaustNodeCnt;
	/*  68 */ float curRot;
	/*  6c */ int globalsIdx;
	/*  70 */ struct vec4 fwd;
	/*  80 */ struct vec4 lastCollNorm;
	/*  90 */ struct vec4 ofs;
	/*  a0 */ int externVelOrientIndex;
	/*  a4 */ int shotUID;
	/*  a8 */ struct Hero* pUser;
	/*  ac */ float scale;
	/*  b0 */ float target_strength;
	/*  b4 */ int rocketIndex;
	/*  b8 */ int firingPlayerClientIndex;
	/*  bc */ char remoteState;
	/*  bd */ char iAmTheTarget;
	/*  be */ char iAlreadyPassedTarget;
	/*  bf */ char pointBlank;
};

struct tNW_ShotHitMessage {
	/*   0 */ char rocketIndex;
	/*   1 */ char rocketState;
	/*   2 */ char firingPlayerClientIndex;
};

struct CML_OUT {
	/*   0 */ struct vec4 ip;
	/*  10 */ struct vec4 normal;
	/*  20 */ MobyInstance* pMoby;
	/*  24 */ float t;
	/*  28 */ int pad[2];
};

struct update9771 {
	/*   0 */ struct vec4 vEndColl[15];
	/*  f0 */ struct Hero* pUser;
	/*  f4 */ unsigned char cTubeTimer01;
	/*  f5 */ unsigned char cNumEndColl;
	/*  f6 */ unsigned char cTracerTimer01;
	/*  f7 */ char bFireTracers;
	/*  f8 */ float fAngle_Meat02;
	/*  fc */ int level10;
	/* 100 */ struct vec4 vulcanBezPnt[15][10];
	/* a60 */ moby* pVulcanTarget[10];
	/* a88 */ int vulcanNumTargets;
	/* a8c */ int vulcanFireAlpha;
	/* a90 */ float vulcanScrollX;
	/* a94 */ int vulcanMistAlpha;
	/* a98 */ int vulcanRes;
	/* a9c */ int pad[1];
};

struct update4231 {
	/*   0 */ struct mtx4 shotMtx;
	/*  40 */ struct Hero* pUser;
	/*  44 */ unsigned char cShotRowsCompleted;
	/*  45 */ unsigned char cNumEndColl;
	/*  46 */ char level10;
	/*  47 */ char cpad[1];
	/*  48 */ moby* pShot;
	/*  4c */ moby* pTargetInRet;
	/*  50 */ int actuatorIdx;
	/*  60 */ struct vec4 remoteFireDir;
	/*  70 */ float lensTimerInv;
	/*  74 */ float shockwaveTimerInv;
	/*  78 */ float shockwaveAng1;
	/*  7c */ float shockwaveAng2;
	/*  80 */ int flashTimer;
	/*  84 */ float flashTimerInv;
	/*  88 */ short int lensTimer;
	/*  8a */ short int shockwaveTimer;
	/*  8c */ float lensAngOfs;
};

struct M4231_ShotStats {
	/*   0 */ float fYaw;
	/*   4 */ float fPitch;
	/*   8 */ float fRange;
	/*   c */ int iBaseWidth;
};

struct update4261 {
	/*   0 */ struct vec4 reticulePos;
	/*  10 */ struct vec4 reticuleNorm;
	/*  20 */ struct vec4 vShotDir;
	/*  30 */ struct vec4 vTargetPos;
	/*  40 */ int launchTimer;
	/*  44 */ int drawReticule;
	/*  48 */ int canThrow;
	/*  4c */ int throwForbidden;
	/*  50 */ int actuatorIdx;
	/*  54 */ struct Hero* pUser;
	/*  58 */ float fxRot;
	/*  5c */ int cantPlayNoFireSound;
	/*  60 */ int pad[1];
};

struct M3303_RISING_SPARKLE_EMITTER {
	/*   0 */ struct vec4 pos;
	/*  10 */ float theta;
	/*  14 */ float thetaSpeed;
	/*  18 */ int life;
	/*  1c */ MobyInstance* pParent;
	/*  20 */ float perpDist;
	/*  24 */ int pad[3];
};

struct M3303_RISING_SPARKLE_PARTICLE {
	/*   0 */ struct vec4 pos;
	/*  10 */ struct vec4 vel;
	/*  20 */ float in_size;
	/*  24 */ float out_size;
	/*  28 */ float rotSpeed;
	/*  2c */ float rot;
	/*  30 */ int startAlpha;
	/*  34 */ int alpha;
	/*  38 */ int color;
	/*  3c */ int life;
	/*  40 */ int maxLife;
	/*  44 */ MobyInstance* pParent;
	/*  48 */ int pad[2];
};

struct M3303_BOLT_EXP {
	/*   0 */ struct vec4 c1;
	/*  10 */ struct vec4 c2;
	/*  20 */ struct vec4 p1;
	/*  30 */ struct vec4 p2;
	/*  40 */ struct vec4 targPos;
	/*  50 */ float cycle_x;
	/*  54 */ float cycle_y;
	/*  58 */ float cycle_z;
	/*  5c */ float rate_x;
	/*  60 */ float rate_y;
	/*  64 */ float rate_z;
	/*  68 */ float wl_x;
	/*  6c */ float wl_y;
	/*  70 */ float wl_z;
	/*  74 */ float cycle_x2;
	/*  78 */ float cycle_y2;
	/*  7c */ float cycle_z2;
	/*  80 */ float rate_x2;
	/*  84 */ float rate_y2;
	/*  88 */ float rate_z2;
	/*  8c */ float wl_x2;
	/*  90 */ float wl_y2;
	/*  94 */ float wl_z2;
	/*  98 */ int timer;
	/*  9c */ MobyInstance* pParent;
	/*  a0 */ int interpTimer;
	/*  a4 */ int maxInterpTimer;
	/*  a8 */ int struck;
	/*  ac */ int pad[1];
};

struct update3303 {
	/*   0 */ int partReferences_0;
	/*   4 */ int timer;
	/*   8 */ MobyInstance* pShineA;
	/*   c */ MobyInstance* pShineB;
	/*  10 */ int pointLight;
	/*  14 */ float surgeRadius;
	/*  18 */ int miniMode;
	/*  1c */ struct Hero* pHero;
};

struct M9454_RISING_SPARKLE_EMITTER {
	/*   0 */ struct vec4 pos;
	/*  10 */ float theta;
	/*  14 */ float thetaSpeed;
	/*  18 */ int life;
	/*  1c */ MobyInstance* pParent;
	/*  20 */ float perpDist;
	/*  24 */ int pad[3];
};

struct M9454_RISING_SPARKLE_PARTICLE {
	/*   0 */ struct vec4 pos;
	/*  10 */ struct vec4 vel;
	/*  20 */ float in_size;
	/*  24 */ float out_size;
	/*  28 */ float rotSpeed;
	/*  2c */ float rot;
	/*  30 */ int startAlpha;
	/*  34 */ int alpha;
	/*  38 */ int color;
	/*  3c */ int life;
	/*  40 */ int maxLife;
	/*  44 */ MobyInstance* pParent;
	/*  48 */ int pad[2];
};

struct update9454 {
	/*   0 */ int partReferences_0;
	/*   4 */ int timer;
	/*   8 */ MobyInstance* pShineA;
	/*   c */ MobyInstance* pShineB;
	/*  10 */ int pointLight;
	/*  14 */ int gadgetOClass;
	/*  18 */ moby* pGadget;
	/*  1c */ char* pNoWeaponSwitching;
};

struct update9456 {
	/*   0 */ struct StickVars stickVars;
	/*  40 */ struct Hero* pUser;
	/*  44 */ int lifeTime;
	/*  48 */ int light;
	/*  4c */ char bigExplo;
	/*  4d */ char lightningTimer;
	/*  4e */ char screenInvFlash;
	/*  4f */ char gadgetId;
	/*  50 */ moby* pHits[16];
};

struct update9450 {
	/*   0 */ struct vec4 vel;
	/*  10 */ struct quat rotQuat;
	/*  20 */ struct vec4 groundNormal;
	/*  30 */ struct vec4 restCenter;
	/*  40 */ float stateParam;
	/*  44 */ float swarmAng;
	/*  48 */ float swarmElv;
	/*  4c */ int value;
	/*  50 */ struct Hero* pHero;
	/*  54 */ char reverse;
	/*  55 */ char framesAirborneColliding;
};

struct DeathEffectData {
	/*   0 */ MobyInstance* pMoby;
	/*   4 */ int baseLights;
	/*   8 */ int type;
	/*   c */ float interp;
	/*  10 */ void* func;
	/*  14 */ int pad[3];
};

struct update6295 {
	/*   0 */ float damage;
	/*   4 */ moby* pTarget;
	/*   8 */ short int timeLeft;
	/*   a */ short int weaponSource;
	/*   c */ int soundTimer;
	/*  10 */ struct vec4 vel;
};

struct update3709 {
	/*   0 */ struct SubVars subVars;
	/*  50 */ struct TargetVars tVars;
	/*  e0 */ struct MoveVars_V2 mVars;
	/* 290 */ struct FlashVars fVars;
	/* 2a0 */ moby* pMorphed;
	/* 2a4 */ int lifetime;
	/* 2a8 */ float origScale;
	/* 2ac */ float morphScale;
	/* 2b0 */ int death;
	/* 2b4 */ int formerPlayerIdx;
	/* 2b8 */ int iSoundLoopHandle;
	/* 2bc */ int flameOn;
	/* 2c0 */ moby* pTargetMoby;
	/* 2c4 */ int pad[2];
	/* 2d0 */ struct vec4 target;
};

struct M9532_PillarInfo {
	/*   0 */ char isActive;
	/*   1 */ char cpad[3];
	/*   4 */ float fpad[1];
	/*   8 */ float distTravelled;
	/*   c */ float distPerFrame;
	/*  10 */ struct vec4 pillarPos;
	/*  20 */ struct vec4 pillarVel;
};

struct update9532 {
	/*   0 */ struct vec4 normal;
	/*  10 */ short int partTimerMin;
	/*  12 */ short int partTimerMax;
	/*  14 */ float gravity;
	/*  18 */ char numPillars;
	/*  19 */ char numActive;
	/*  1a */ short int sParticlesSpawned;
	/*  1c */ int pillarFireColor;
	/*  20 */ float useScale;
	/*  24 */ short int alphaBlendedSphereFreq;
	/*  26 */ short int alphaBlendedPillarFreq;
	/*  28 */ float pillarLength;
	/*  2c */ float pillarSaveParticle;
	/*  30 */ float pillarFireDensity;
	/*  34 */ float fStep;
	/*  38 */ char cGround;
	/*  39 */ char cpad[3];
	/*  3c */ float fpad[1];
	/*  40 */ float fDistortHeight[4];
	/*  50 */ float fDistortInterp[4];
	/*  60 */ float fDistortSpeed[4];
	/*  70 */ struct M9532_PillarInfo pillars[1];
};

struct CameraControlFOV_19 {
	/*   0 */ short int frame[8];
	/*  10 */ float FOV[8];
	/*  30 */ float initFov;
};

struct update4247 {
	/*   0 */ struct vec4 vVel;
	/*  10 */ struct vec4 vShotFromPos;
	/*  20 */ struct vec4 vShotFromFakePos;
	/*  30 */ struct vec4 vUp;
	/*  40 */ char cBarrelIdx;
	/*  41 */ char level10;
	/*  42 */ short int lifetime;
	/*  44 */ short int timer01;
	/*  46 */ short int timer02;
	/*  48 */ char type;
	/*  49 */ char scoreHits;
	/*  4a */ char tubeIdx;
	/*  4b */ char sentShotMsg;
	/*  4c */ float fTexScroll;
	/*  50 */ float fOuterMaxRot;
	/*  54 */ float fInnerMaxRot;
	/*  58 */ int lightningTimer;
	/*  5c */ float tubeRot;
	/*  60 */ float fStep;
	/*  64 */ struct Hero* pUser;
	/*  68 */ moby* pTarget;
	/*  6c */ moby* pGun;
	/*  70 */ struct FXU_CubicLineEndPoint_t arc_endPoints[2][3];
};

struct update9396 {
	/*   0 */ struct Hero* pUser;
	/*   4 */ char cNumTargets;
	/*   5 */ char cpad[3];
	/*   8 */ int ipad[2];
	/*  10 */ short int sTargetOclass[8];
	/*  20 */ moby* pTarget[8];
	/*  40 */ struct vec4 vEndPos;
	/*  50 */ struct vec4 vPrevPos;
	/*  60 */ struct FXU_CubicLineEndPoint_t lineEndPoints[2];
};

struct update9479 {
	/*   0 */ struct vec4 vel;
	/*  10 */ struct vec4 rotVel;
	/*  20 */ float groundZ;
	/*  24 */ int fading;
	/*  28 */ float colorT;
	/*  2c */ float scale;
};

typedef unsigned int size_t;
typedef /* function */ void** NetTypeMessageParser;
typedef unsigned int HSTREAM;

struct Stream {
	/*   0 */ u_int m_989_handle;
	/*   4 */ short unsigned int m_track_id;
	/*   6 */ unsigned char m_type;
	/*   7 */ unsigned char m_command;
	/*   8 */ unsigned char m_state;
	/*   9 */ unsigned char m_last_state;
	/*   a */ unsigned char m_internal_flags;
	/*   b */ unsigned char pad8_0[1];
	/*   c */ short unsigned int m_sound_handle;
	/*   e */ short unsigned int pad16_0[1];
	/*  10 */ short unsigned int m_unique_id;
	/*  12 */ short unsigned int m_flags;
	/*  14 */ MobyInstance* m_owner;
	/*  18 */ unsigned int m_stream_handle;
	/*  1c */ unsigned int pad32_0[1];
	/*  20 */ float m_master_gain;
	/*  24 */ float m_fade_gain;
	/*  28 */ float m_fade_time_remaining;
	/*  2c */ float m_inv_fade_time;
	/*  30 */ unsigned int m_sd[8];
};

struct StreamInterface {
	static short unsigned int ms_unique_id;
	static short unsigned int UID_NULL;
	static struct Stream m_streams[3];
	static int m_num_open_streams;
};

typedef unsigned int UINT;
typedef unsigned int TIME;

struct Channel4f {
	/*   0 */ float x;
	/*   4 */ float y;
	/*   8 */ float z;
	/*   c */ float w;
};

// warning: multiple differing types with the same name, only one recovered
struct iBehavior {
	/*   0 */ bool mAlive;
	/*   4 */ __vtbl_ptr_type* $vf9885;
};

struct BindingNode {
	/*   0 */ struct iBehavior* pBehavior;
	/*   4 */ struct Channel4f* pChannel;
};

// warning: multiple differing types with the same name, only one recovered
struct TimeLine {
	/*   0 */ UINT mTimeLineId;
	/*   4 */ TIME mCurrentTime;
	/*   8 */ TIME mTimeLength;
	/*   c */ int mPlaybackDirection;
	/*  10 */ /* function */ void** mBehaviorDoneCB;
	/*  14 */ bool mWeAreDone;
	/*  18 */ struct BindingNode mBehaviorList[32];
	/* 118 */ int mCurrentArraySize;
	/* 11c */ bool mCycleForever;
};

typedef unsigned int HANDLE_ID;

enum eDataSourceTypes {
	DATASOURCE_ICON_TYPE = 0,
	DATASOURCE_IMAGEBUFFER_TYPE = 1,
	DATASOURCE_WIDGET3D_TYPE = 2
};

// warning: multiple differing types with the same name, only one recovered
struct DataSource {
	/*   0 */ int m_state;
	/*   4 */ __vtbl_ptr_type* $vf10125;
};

// warning: multiple differing types with the same name, only one recovered
struct iObject {
	static unsigned int id;
	/*   0 */ unsigned int refCount;
	/*   4 */ unsigned char m_control_flags;
	/*   8 */ __vtbl_ptr_type* $vf10215;
};

struct Channel2f {
	/*   0 */ float m_x;
	/*   4 */ float m_y;
	static unsigned int id;
};

struct Channel1f {
	/*   0 */ float m_t;
	static unsigned int id;
};

struct ChannelARGB {
	/*   0 */ unsigned int m_argb;
	static unsigned int id;
};

struct ArrayList<int> {
	/*   0 */ int m_current_number_of_entries;
	/*   4 */ int m_data[8];
	static int m_null_ref;
};

typedef struct ArrayList<int> tBehaviorList;

enum ePlayDirection {
	kFORWARD_PLAY = 1,
	kBACKWARDS_PLAY = -1,
	kUNDEFINED_PLAY = 0
};

enum ePlayControl {
	kDO_ONCE = 0,
	kDO_FOREVER = 1,
	kDO_BOUNCE_FOREVER = 2
};

struct Canvas {
	/*   0 */ CanvasData* mp_data;
};

struct iFrame : /* 0 */ struct iObject {
	static unsigned int id;
	/*   c */ unsigned int mControlFlags;
	/*  10 */ struct Channel1f m_rotation;
	/*  14 */ struct Channel2f Position;
	/*  1c */ struct Channel2f Scale;
	/*  24 */ struct Channel2f m_dropshadow_offset;
	/*  2c */ struct Channel1f Alpha;
	/*  30 */ struct ChannelARGB m_color;
	/*  34 */ struct ChannelARGB m_dropshadow_color;
	/*  38 */ int m_animation_id;
	/*  3c */ EventResponseTOC* m_event_listen_toc;
};

// warning: multiple differing types with the same name, only one recovered
struct WidgetRectangle : /* 0 */ struct iFrame {
	static unsigned int id;
	/*  40 */ struct Channel1f Rotation;
	/*  44 */ struct ChannelARGB color1;
	/*  48 */ struct ChannelARGB color2;
	/*  4c */ struct ChannelARGB color3;
	/*  50 */ short unsigned int mTextureId;
	/*  52 */ short unsigned int m_frame;
	/*  54 */ char m_total_fade_frames;
	/*  55 */ char m_fade_frame;
	/*  56 */ char m_renderstate;
	/*  58 */ struct DataSource* mp_datasource;
};

struct Event {
	/*   0 */ HANDLE_ID mTargetWidget;
	/*   4 */ unsigned int mEventType;
	/*   8 */ unsigned int mData;
};

struct EventArray {
	/*   0 */ struct Event m_events[16];
};

struct EventResponseTOC {
	/*   0 */ struct EventArray* m_array[48];
};

struct EventQue {
	/*   0 */ int mHead;
	/*   4 */ int mTail;
	/*   8 */ int mNumEvents;
	/*   c */ int mUnamangedCounter;
	/*  10 */ struct Event mEvents[64];
};

typedef /* function */ void* GUI_CALLBACK;

enum eEngineState {
	kIDLE = 0,
	kREADY = 1,
	kPAUSED = 2
};

struct GuiState {
	/*   0 */ enum eEngineState mCurrentState;
	/*   4 */ GUI_CALLBACK* m_finit;
	/*   8 */ GUI_CALLBACK* m_fdeinit;
	/*   c */ GUI_CALLBACK* m_fupdate;
	/*  10 */ GUI_CALLBACK* m_fpre_render;
	/*  14 */ GUI_CALLBACK* m_fpost_render;
};

struct NetEvent {
	/*   0 */ unsigned int eventID;
	/*   0 */ unsigned int netDataSize;
	/*   1 */ unsigned int originClientIdx;
	/*   1 */ unsigned int relDispatchTime;
	/*   4 */ int createTime;
	/*   8 */ unsigned int objUID;
	/*   c */ char netData[64];
};

struct GuberEvent {
	static struct GuberEvent* sFreeEventList;
	static struct GuberEvent* sUsedEventList;
	static struct GuberEvent* sDispatchEventList;
	static struct GuberEvent sEventBuffer[256];
	/*   0 */ struct NetEvent netEvent;
	/*  4c */ int netSendTime;
	/*  50 */ int netSendTo;
	/*  54 */ unsigned char netDataOffset;
	/*  55 */ bool msgSendPending;
	/*  58 */ struct GuberEvent* nextEvent;
};

struct master6908 {
	/*   0 */ int stateChange;
	/*   4 */ unsigned int playerUID;
	/*   8 */ int createTime;
	/*   c */ int gadgetBitArray;
	/*  10 */ int upgradeBitArray;
	/*  14 */ int pad[3];
};

struct update6908 {
	/*   0 */ struct master6908 masterVars;
	/*  20 */ int pickupTime;
	/*  24 */ int autoRespawnTime;
	/*  28 */ float iconLerp;
	/*  2c */ int heroUID;
	/*  30 */ float waitTimer;
	/*  34 */ int waitTimer2;
	/*  38 */ int pad[2];
};

struct M6908_Interface_t {
	/*   0 */ /* function */ void** SpawnMoby;
	/*   4 */ /* function */ void** Icon_Update;
	/*   8 */ /* function */ void** Icon_Hide;
};

struct WPN_ProjectileCollisionParams {
	/*   0 */ struct vec4 v0;
	/*  10 */ struct vec4 v1;
	/*  20 */ struct vec4 v2;
	/*  30 */ MobyInstance* pMoby;
	/*  34 */ int* oClassIgnore;
	/*  38 */ int num_oClassIgnore;
	/*  3c */ float radius;
	/*  40 */ float cor;
	/*  44 */ float gravAngEps;
	/*  48 */ int useVelEps;
	/*  4c */ int collFlag;
	/*  50 */ int ignoreVelEpsOnEnemies;
	/*  54 */ int hotspot;
	/*  58 */ int correctSphere;
	/*  5c */ float sphereShift;
};

struct update7257 {
	/*   0 */ struct vec4 vel;
	/*  10 */ struct quat rotVel;
	/*  20 */ short int timer;
	/*  22 */ short int invTimer;
	/*  24 */ int upgrade;
	/*  28 */ int velOrientIndex;
	/*  2c */ int bRocketRPG;
};

struct update9458 {
	/*   0 */ struct vec4 reticulePos;
	/*  10 */ struct vec4 reticuleNorm;
	/*  20 */ struct vec4 projectedVel;
	/*  30 */ int drawReticule;
	/*  34 */ float glowOsc;
	/*  38 */ int actuatorIdx;
	/*  3c */ int ipad[1];
	/*  40 */ struct Hero* pUser;
	/*  44 */ moby* pTarget;
	/*  48 */ moby* pTurret;
	/*  4c */ char cRefTimer;
	/*  4d */ char cButtonWasDown;
	/*  4e */ char cWallShot;
	/*  4f */ char cpad[2];
};

struct update9747 {
	/*   0 */ struct vec4 vTargetPos[6];
	/*  60 */ struct vec4 vFireDir;
	/*  70 */ struct vec4 vFirePos;
	/*  80 */ float actionTimer;
	/*  84 */ int fireCount;
	/*  88 */ struct Hero* pUser;
	/*  8c */ float blend_fac;
	/*  90 */ moby* pTarget;
	/*  94 */ float targetModZ;
	/*  98 */ short int pointlight;
	/*  9a */ short int pointlighttimer;
	/*  9c */ int ipad[1];
	/*  a0 */ int candidateTimer;
	/*  a4 */ int lookMode;
	/*  a8 */ int actuatorIdx;
	/*  ac */ char cFlapTimer;
	/*  ad */ char cCurShown;
	/*  ae */ char targetTimer;
	/*  af */ char cFireTimer;
};

enum FXU_LerpStyle_e {
	FXU_LS_LINEAR = 0,
	FXU_LS_EXP_IN = 1,
	FXU_LS_EXP_OUT = 2,
	FXU_LS_EXP_IN_XTREME = 3,
	FXU_LS_EXP_OUT_XTREME = 4
};

struct FXU_ContrailDataPoint_t {
	/*   0 */ struct vec3 vPos;
	/*   c */ float fDistToPrevPos;
};

struct FXU_ContrailStyle_t {
	/*   0 */ float fMaxLength;
	/*   4 */ float fMaxDistBetweenPoints;
	/*   8 */ float fAddPointSideDistThreshold;
	/*   c */ float fAddPointDotProductThreshold;
	/*  10 */ int iStartColor;
	/*  14 */ float fStartWidth;
	/*  18 */ int iEndColor;
	/*  1c */ float fEndWidth;
	/*  20 */ enum FX_TEXTURE_ENUM texture;
	/*  21 */ enum FX_BlendModes_e blendMode;
	/*  22 */ enum FXU_LerpStyle_e centerFadStyle;
	/*  23 */ enum FXU_LerpStyle_e endFadeStyle;
	/*  24 */ char bSAlongTrail;
	/*  25 */ char bMoveTextureWithHead;
	/*  26 */ char bColorizeByDistFromEnd;
	/*  27 */ char bWidthByDistFromEnd;
	/*  28 */ float fTextureAdvancePerMeter;
	/*  2c */ float fTextureScrollPerFrame;
	/*  30 */ float fContractSpeed;
	/*  34 */ int iOptionalDataPointFadeFrames;
	/*  38 */ float fOptionalDataPointFadeWidthMod;
	/*  3c */ int iCenterColor;
	/*  40 */ float fCenterWidth;
	/*  44 */ float fMaxCenterDistBack;
	/*  48 */ float fMaxCenterFracBack;
	/*  4c */ float fAddPointSideDistThresholdSquared;
	/*  50 */ float fDataPointFadeFramesFactor;
	/*  54 */ int iPad[3];
};

struct FXU_ContrailInstance_t {
	/*   0 */ struct FXU_ContrailStyle_t* pStyle;
	/*   4 */ struct FXU_ContrailDataPoint_t* pDataPoints;
	/*   8 */ unsigned char* pcDataPointFades;
	/*   c */ int iNumDataPoints;
	/*  10 */ int iNumContrailPoints;
	/*  14 */ int iLastAddedPoint;
	/*  18 */ float fHeadTextureOfs;
	/*  1c */ int iPad[1];
	/*  20 */ float fTotalLength;
	/*  24 */ float fCenterBackOfs;
	/*  28 */ float fFrontFracFactor;
	/*  2c */ float fEndFracFactor;
	/*  30 */ struct vec4 vLastUpdatePos;
	/*  40 */ struct vec4 vCenterLineDir;
};

struct update9923 {
	/*   0 */ struct vec4 vTarget;
	/*  10 */ struct vec4 vTargetDir;
	/*  20 */ struct vec4 vLaserPos;
	/*  30 */ struct vec3 lastTargetPos;
	/*  3c */ char cHitTarget;
	/*  3d */ char cFadeTimer;
	/*  3e */ char cLaserTimer;
	/*  3f */ char cDelayTimer;
	/*  40 */ moby* pTarget;
	/*  44 */ float targetModZ;
	/*  48 */ float curSpeed;
	/*  4c */ float yRot;
	/*  50 */ float rotSp;
	/*  54 */ short int sLifeTimer;
	/*  56 */ char useAutoTracking;
	/*  57 */ char exhaustNodeCnt;
	/*  58 */ float curRot;
	/*  5c */ int globalsIdx;
	/*  60 */ struct vec4 fwd;
	/*  70 */ struct vec4 lastCollNorm;
	/*  80 */ struct vec4 ofs;
	/*  90 */ int externVelOrientIndex;
	/*  94 */ int shotUID;
	/*  98 */ struct Hero* pUser;
	/*  9c */ float scale;
	/*  a0 */ float target_strength;
	/*  a4 */ int rocketIndex;
	/*  a8 */ int firingPlayerClientIndex;
	/*  ac */ char remoteState;
	/*  ad */ char iAmTheTarget;
	/*  ae */ char iAlreadyPassedTarget;
	/*  af */ char pointBlank;
	/*  b0 */ struct FXU_ContrailDataPoint_t trailPoints[32];
	/* 2b0 */ struct FXU_ContrailInstance_t trail;
	/* 300 */ unsigned char cTrailFadeFrames[32];
};

struct update428 {
	/*   0 */ struct vec4 vel;
	/*  10 */ float ang1;
	/*  14 */ float ang2;
	/*  18 */ float amp1;
	/*  1c */ int lifetime;
	/*  20 */ float terminalVel;
	/*  24 */ int yAngDir;
	/*  28 */ float rotZspeed;
	/*  2c */ float rotYspeed;
};

struct fxPillarInfo {
	/*   0 */ char isActive;
	/*   1 */ char cpad[3];
	/*   4 */ float fpad[1];
	/*   8 */ float distTravelled;
	/*   c */ float distPerFrame;
	/*  10 */ struct vec4 pillarPos;
	/*  20 */ struct vec4 pillarVel;
};

struct update8076 {
	/*   0 */ struct vec4 normal;
	/*  10 */ short int partTimerMin;
	/*  12 */ short int partTimerMax;
	/*  14 */ float gravity;
	/*  18 */ char numPillars;
	/*  19 */ char numActive;
	/*  1a */ char cpad[2];
	/*  1c */ int pillarFireColor;
	/*  20 */ float useScale;
	/*  24 */ short int alphaBlendedSphereFreq;
	/*  26 */ short int alphaBlendedPillarFreq;
	/*  28 */ float pillarLength;
	/*  2c */ float pillarSaveParticle;
	/*  30 */ float pillarFireDensity;
	/*  34 */ float fpad[3];
	/*  40 */ struct fxPillarInfo pillars[1];
};

struct update6298 {
	/*   0 */ struct vec4 vParentPos;
	/*  10 */ int targettedHeroIndex;
	/*  14 */ int light;
	/*  18 */ int hpToGive;
	/*  1c */ char reachedHero;
	/*  1d */ char bigHealth;
	/*  1e */ char done;
	/*  1f */ char cNumTracers;
	/*  20 */ short int lifeTime;
	/*  22 */ short int spad[1];
	/*  24 */ int ipad[3];
	/*  30 */ float velZ;
	/*  34 */ float attractSpeed;
	/*  38 */ float heroEffectT;
	/*  3c */ moby* pPlatform;
	/*  40 */ part* pStar[8];
	/*  60 */ struct vec4 platOfs;
	/*  70 */ struct vec4 center;
};

struct M8454_WhipParameters {
	/*   0 */ float SegmentLength;
	/*   4 */ float Gravity;
	/*   8 */ float Damping;
	/*   c */ float CollideRadius;
	/*  10 */ float ParentCollideRadius;
	/*  14 */ char NumIterations;
	/*  15 */ char NumControlledVerts;
	/*  16 */ char NumNonParentCollideableVerts;
	/*  17 */ char ConstraintOverlap;
	/*  18 */ float ControlledSegmentLength;
	/*  1c */ int pad[1];
};

struct update8454 {
	/*   0 */ struct vec4 WhipVerts[24];
	/* 180 */ struct vec4 WhipVertsPrev[24];
	/* 300 */ struct vec4 collisionCenter;
	/* 310 */ struct vec4 vLastCollPos;
	/* 320 */ struct M8454_WhipParameters* CurrentWhipTypeSource;
	/* 324 */ struct M8454_WhipParameters* CurrentWhipTypeTarget;
	/* 328 */ char attachJoint;
	/* 329 */ char doneShake;
	/* 32a */ char doShockWaveDamage;
	/* 32b */ char numHits;
	/* 32c */ float damage;
	/* 330 */ float scrollX;
	/* 334 */ int soundChannel;
	/* 338 */ float groundZ;
	/* 33c */ moby* myBall;
	/* 340 */ float ballScale;
	/* 344 */ struct Hero* pUser;
	/* 348 */ int lastUpdateTime;
	/* 34c */ float colorInterp;
	/* 350 */ int ringIndex;
	/* 354 */ int ringSize;
	/* 358 */ float scrollTex;
	/* 35c */ int lifetime;
	/* 360 */ struct vec4 impactPoint;
	/* 370 */ float shockwaveSize;
	/* 374 */ int actuatorIdx;
	/* 378 */ int draggingSoundChannel;
	/* 37c */ short int sFireTimer;
	/* 37e */ short int level10;
	/* 380 */ struct FXU_ContrailInstance_t trail;
	/* 3d0 */ struct FXU_ContrailDataPoint_t trailPoints[32];
	/* 5d0 */ unsigned char cTrailFadeFrames[32];
	/* 5f0 */ struct vec4 lastHitPos;
};

struct Part045 {
	/*   0 */ struct vec4 vel;
	/*  10 */ float expandSpeed;
	/*  14 */ float* zHeight;
};

struct ST_SkillPointMobyInterface {
	/*   0 */ /* function */ void** InitMissionStartStats;
	/*   4 */ /* function */ void** RegisterKill;
	/*   8 */ /* function */ void** RegisterComplete;
	/*   c */ /* function */ void** RegisterDestroy;
	/*  10 */ /* function */ void** RegisterBotKill;
	/*  14 */ /* function */ void** RegisterEmp;
	/*  18 */ /* function */ void** RegisterTurn;
	/*  1c */ /* function */ void** RegisterMorph;
	/*  20 */ /* function */ void** RegisterInfect;
	/*  24 */ /* function */ void** RegisterHoloshieldUse;
};

struct update4265 {
	/*   0 */ struct vec4 vel;
	/*  10 */ float rot;
	/*  14 */ short int timeOut;
	/*  16 */ char mpIndex;
	/*  17 */ char iGadgetLevel;
	/*  18 */ float sideGrow;
	/*  1c */ float upGrow;
	/*  20 */ short int soundChannel;
	/*  22 */ char magneGrav;
	/*  23 */ signed char cBlinkCounter;
	/*  24 */ int pointLight;
	/*  28 */ int hitCounter;
	/*  2c */ short int level99;
	/*  2e */ short int pad;
	/*  30 */ short int hitTimer;
	/*  32 */ char cSettledDown;
	/*  33 */ char team;
	/*  34 */ float fHitRot[2];
	/*  3c */ float fRotSpeed;
	/*  40 */ moby* pTarget;
	/*  44 */ float ringScroll1;
	/*  48 */ float ringScroll2;
	/*  4c */ float ringScroll3;
	/*  50 */ struct vec4 vTargetPos;
	/*  60 */ struct vec4 firedFromGrav;
	/*  70 */ float baseScroll;
	/*  74 */ float shieldScroll;
	/*  78 */ float scanScroll;
	/*  7c */ float extraScroll;
};

struct update6249 {
	/*   0 */ struct vec4 startPos;
	/*  10 */ struct vec4 endPos;
	/*  20 */ struct vec4 dir;
	/*  30 */ float frame;
	/*  34 */ float length;
	/*  38 */ float lifetime;
	/*  3c */ float damage;
	/*  40 */ float scrollTex;
	/*  44 */ int activePostFX;
	/*  48 */ int numImpactMods;
	/*  4c */ float pad[1];
};

enum CommandTypes {
	CMD_NONE = 0,
	CMD_REGROUP = 1,
	CMD_DESTROY = 2,
	CMD_HEAL = 3,
	CMD_EMP = 4,
	CMD_HACK = 5,
	CMD_GRIND_CABLE = 6,
	CMD_DRAW_FIRE = 7,
	CMD_STAND = 8,
	CMD_REVIVE = 9,
	CMD_BOLT_CRANK = 10,
	CMD_SHIELD = 11,
	CMD_LIMIT_BREAK = 12,
	CMD_COUNT = 13
};

struct IssuedCommand {
	/*   0 */ enum CommandTypes commandType;
	/*   4 */ moby* pMoby;
	/*   8 */ int playerNum;
	/*   c */ int timeIssued;
	/*  10 */ moby* pTaker;
	/*  14 */ int spot;
};

struct FXU_DistortionShellStyle_t {
	/*   0 */ int iDivisions;
	/*   4 */ int iCenterColor;
	/*   8 */ int iEdgeColor;
	/*   c */ float fCenterAmp;
	/*  10 */ float fEdgeAmp;
	/*  14 */ float fEdgeOfs;
	/*  18 */ float fEdgeScale;
	/*  1c */ int iRandTableSize;
	/*  20 */ float fRandStep;
	/*  24 */ bool bFrontSide;
	/*  28 */ int iNumFadeRows;
	/*  2c */ float fEdgeAmpFadeTarget;
	/*  30 */ float fCenterAmpFadeTarget;
	/*  34 */ int iCenterColorFadeTarget;
	/*  38 */ int iEdgeColorFadeTarget;
};

struct update9738 {
	/*   0 */ struct Hero* pUser;
	/*   4 */ moby* pMobyUser;
	/*   8 */ moby* pTarget;
	/*   c */ short int sUID;
	/*   e */ char firedLastFrame;
	/*   f */ char active;
	/*  10 */ float power;
	/*  14 */ int hSoundGun;
	/*  18 */ int hSoundShield;
	/*  1c */ moby* pColl;
};

struct update9867 {
	/*   0 */ struct SubVars sVars;
	/*  50 */ struct TargetVars tVars;
	/*  e0 */ struct MoveVars_V2 mVars;
	/* 290 */ struct ReactVars rVars;
	/* 310 */ struct BogeyVars bVars;
	/* 3a0 */ struct EffectorVars eVars;
	/* 3b0 */ struct CommandVars cVars;
	/* 3d0 */ struct NavigationVars navVars;
	/* 420 */ struct FlashVars fVars;
	/* 430 */ struct Tweaker headTweak;
	/* 4b0 */ struct Tweaker leftArmTweak;
	/* 530 */ struct Tweaker rightArmTweak;
	/* 5b0 */ struct Tweaker spineTweak;
	/* 630 */ struct Manipulator tailManip;
	/* 670 */ char doNotInterrupt;
	/* 671 */ char hold;
	/* 672 */ char botIndex;
	/* 673 */ char iconType;
	/* 674 */ char currentWeapon;
	/* 675 */ char needFormation;
	/* 676 */ char noFire;
	/* 677 */ char shotsToFire;
	/* 678 */ char moveState;
	/* 679 */ char voice;
	/* 67a */ char completed;
	/* 67b */ char startCaptured;
	/* 67c */ char nextWeapon;
	/* 67d */ char beamFade;
	/* 67e */ char atkCnt;
	/* 67f */ char numAttacking;
	/* 680 */ char coverCnt;
	/* 681 */ char dmgCnt;
	/* 682 */ char initVO;
	/* 683 */ char curHead;
	/* 684 */ char curPaintjob;
	/* 685 */ char moveTrigger;
	/* 686 */ char prevMoveState;
	/* 687 */ char lastNumAttacking;
	/* 688 */ char silent;
	/* 689 */ char damagedMode;
	/* 68a */ char padA[6];
	/* 690 */ char lastAffirmVO;
	/* 691 */ char lastKillVO;
	/* 692 */ char lastEmpVO;
	/* 693 */ char lastVictoryVO;
	/* 694 */ char lastReviveVO;
	/* 695 */ char lastAttackedVO;
	/* 696 */ char lastCompleteVO;
	/* 697 */ char lastDamageVO;
	/* 698 */ char lastDeathVO;
	/* 699 */ char lastAttackingVO;
	/* 69a */ char padB[6];
	/* 6a0 */ short int alertTimer;
	/* 6a2 */ short int shootTimer;
	/* 6a4 */ short int iconTimer;
	/* 6a6 */ short int recallTimer;
	/* 6a8 */ short int updateTimer;
	/* 6aa */ short int grenadeTimer;
	/* 6ac */ short int drawFireTimer;
	/* 6ae */ short int cmdTimer;
	/* 6b0 */ short int cmdTotalTime;
	/* 6b4 */ float cmdDistThreshold;
	/* 6b8 */ int cmdColor;
	/* 6bc */ struct IssuedCommand* pCommand;
	/* 6c0 */ moby* pVehicle;
	/* 6c4 */ moby* pCover;
	/* 6c8 */ moby* pGun;
	/* 6cc */ moby* pGrenade;
	/* 6d0 */ moby* pFunkyHead;
	/* 6d4 */ int curVO;
	/* 6d8 */ int moveTimer;
	/* 6dc */ int teleportTimer;
	/* 6e0 */ struct vec4 moveTarget;
	/* 6f0 */ struct vec4 moveDest;
	/* 700 */ struct vec4 source;
	/* 710 */ struct vec4 formation;
	/* 720 */ struct vec4 avoidPos;
	/* 730 */ int boltCrankSoundHandle;
	/* 734 */ int reviveSoundHandle;
	/* 738 */ int jetSoundHandle;
	/* 73c */ int healSoundHandle;
	/* 740 */ int alternateStart;
	/* 744 */ int alternateExit;
	/* 748 */ int activateCuboid;
	/* 74c */ float tailAngle;
	/* 750 */ float wrenchFitT;
	/* 754 */ float moveHeight;
	/* 758 */ float moveHeightTarget;
	/* 75c */ float moveSpeed;
	/* 760 */ float bobHeight;
	/* 764 */ float reviveAnimFrame;
	/* 768 */ int reviveEffectLight;
	/* 76c */ char reviveEffectTimer;
	/* 76d */ char isShielded;
	/* 76e */ short int attackTimer;
};

typedef unsigned int u32;
typedef short int s16;
typedef i32 BOOL;
typedef /* function */ void** FN_PROCCOMPLETE;

struct Status {
	/*   0 */ unsigned int pad32_0[1];
};

struct CreateParams {
	/*   0 */ u32 num_streams;
	/*   4 */ u32 segment_size;
	/*   8 */ u32 segments_per_buffer_half;
	/*   c */ u32 device;
	/*  10 */ unsigned int pad32_1[4];
};

struct PlayParams {
	/*   0 */ u32 queue_handle;
	/*   4 */ int lsns[2];
	/*   c */ s16 volume;
	/*   e */ s16 group;
	/*  10 */ u32 flags;
	/*  14 */ unsigned int pad32_0[3];
	/*  20 */ char filename[64];
};

struct astrmCallback {
	/*   0 */ FN_PROCCOMPLETE fn_complete;
	/*   4 */ void* p_cb_data;
	/*   8 */ unsigned int b_used;
	/*   8 */ unsigned int stage;
	/*   8 */ unsigned int pad29_0;
	/*   c */ void* p_instance;
	/*  10 */ unsigned int handle;
	/*  14 */ unsigned int pad32_0[2];
};

enum Device {
	DEVICE_CDDVD = 0,
	DEVICE_HOST = 1
};

typedef u32 HANDLE;

struct _CdDvd {
	/*   0 */ u32 lsn;
	/*   4 */ u32 offset;
	/*   8 */ unsigned int pad32_2_0[2];
	/*  10 */ unsigned int pad32_2_1[16];
};

struct FileDesc {
	/*   0 */ enum Device device;
	/*   4 */ unsigned int pad32_0[3];
	union  {
		/*  10 */ struct _Host Host;
		/*  10 */ struct _CdDvd CdDvd;
	} ;
};

struct RequestDesc {
	/*   0 */ void* p_mem_target_addr;
	/*   4 */ u32 bytes_to_read;
	/*   7 */ u32 flags;
	/*   7 */ u32 priority;
	/*   7 */ u32 pad1_0;
	/*   8 */ i32 segment_complete_sema;
	/*   c */ u32 buffer_offset;
	/*   f */ u32 mem_target;
	/*   f */ u32 pad5_0;
	/*  10 */ struct FileDesc file_desc;
};

struct sceGsLoadImage {
	/*   0 */ struct sceGifTag giftag0;
	/*  10 */ struct sceGsBitbltbuf bitbltbuf;
	/*  18 */ long int bitbltbufaddr;
	/*  20 */ struct sceGsTrxpos trxpos;
	/*  28 */ long int trxposaddr;
	/*  30 */ struct sceGsTrxreg trxreg;
	/*  38 */ long int trxregaddr;
	/*  40 */ struct sceGsTrxdir trxdir;
	/*  48 */ long int trxdiraddr;
	/*  50 */ struct sceGifTag giftag1;
};

struct PifHeader {
	/*   0 */ int pifID;
	/*   4 */ int fileSize;
	/*   8 */ int uSize;
	/*   c */ int vSize;
	/*  10 */ int texFormat;
	/*  14 */ int clutFormat;
	/*  18 */ int clutOrder;
	/*  1c */ int mipLevels;
};

struct PifParser {
	/*   0 */ void* pClut;
	/*   4 */ void* pTex[4];
	/*  14 */ int cSize;
	/*  18 */ int tSize[4];
	/*  28 */ int cPos;
	/*  2c */ int tPos[4];
	/*  3c */ int tbw[4];
	/*  4c */ int uLog;
	/*  50 */ int vLog;
};

struct ImportCamera {
	/*   0 */ struct vec3 pos;
	/*   c */ int type;
	/*  10 */ struct vec3 rot;
	/*  1c */ void* pVar;
};

struct CamCollGridEntry {
	/*   0 */ int nEntries;
	/*   4 */ int pad[3];
	/*  10 */ struct CamCollGridPrim objects[0];
};

struct CameraTweaks {
	/*   0 */ float dist;
	/*   4 */ float height;
	/*   8 */ float zOfs;
	/*   c */ float elv;
	/*  10 */ float fov;
	/*  14 */ float slideFac;
	/*  18 */ char strafe;
	/*  19 */ char lag;
	/*  1a */ short int disableUserCam;
	/*  1c */ char priority;
	/*  1d */ char active;
	/*  1e */ char lookDirLock;
	/*  1f */ char lookDirRelease;
	/*  20 */ struct vec4 dir;
	/*  30 */ short int lockTimer;
	/*  32 */ short int lockTimerDefault;
	/*  34 */ int lookStr;
	/*  38 */ int timeout;
	/*  3c */ int disableLookCam;
};

union CamCtrl {
	/*   0 */ unsigned char data[640];
};

struct CAMERA {
	/*   0 */ struct mtx4 rMtx;
	/*  40 */ struct mtx4 fMtx;
	/*  80 */ struct mtx4 nfMtx;
	/*  c0 */ struct mtx4 hMtx;
	/* 100 */ struct mtx4 hsMtx;
	/* 140 */ struct vec4 pos;
	/* 150 */ struct vec4f rot;
	/* 160 */ struct mtx3 uMtx;
	/* 190 */ struct mtx4 uvMtx;
};

struct LENSFLARE {
	/*   0 */ moby* pMoby;
	/*   4 */ int state;
	/*   8 */ float visibilityCheckResult;
	/*   c */ int pad;
	/*  10 */ short int alpha[16];
	/*  30 */ short int tex[16];
	/*  50 */ int rgba[16];
	/*  90 */ float linePos[16];
	/*  d0 */ float scale[16];
};

struct SUB_RETICULE {
	/*   0 */ struct vec4 targetPos;
	/*  10 */ float scale;
	/*  14 */ int rgba;
	/*  18 */ int fxTex;
	/*  1c */ float rotAmt;
	/*  20 */ moby* pMoby;
	/*  24 */ char type;
	/*  25 */ char cameraIndex;
	/*  26 */ short int segments;
	/*  28 */ float segment_rot;
	/*  2c */ int draw_style;
	/*  30 */ float retX;
	/*  34 */ float retY;
	/*  38 */ float retWidth;
	/*  3c */ float retHeight;
};

struct RETICULE {
	/*   0 */ struct SUB_RETICULE instance[14];
	/* 380 */ int numActive;
	/* 384 */ int pad[3];
};

struct Cylinder {
	/*   0 */ struct mtx3 matrix;
	/*  30 */ struct vec4 pos;
	/*  40 */ struct mtx3 imatrix;
	/*  70 */ struct vec4 rot;
};

struct Pill {
	/*   0 */ struct mtx3 matrix;
	/*  30 */ struct vec4 pos;
	/*  40 */ struct mtx3 imatrix;
	/*  70 */ struct vec4 rot;
	/*  80 */ float radius;
	/*  84 */ int pad[3];
};

struct camera3 {
	/*   0 */ struct cameraShared s;
	/*  20 */ int camPath;
	/*  24 */ grindlink indexPath;
	/*  28 */ int camRefPath;
	/*  2c */ int indexRefPath;
	/*  30 */ int followType;
	/*  34 */ short int inited;
	/*  36 */ short int dir;
	/*  38 */ float closestOfs;
	/*  3c */ char grindZip;
	/*  3d */ char pad[3];
};

// warning: multiple differing types with the same name, only one recovered
struct _sif_receive_data {
	/*   0 */ struct _sif_rpc_data rpcd;
	/*  10 */ void* src;
	/*  14 */ void* dest;
	/*  18 */ int size;
};

typedef struct _sif_receive_data sceSifReceiveData;

struct _checksum {
	/*   0 */ char block;
	/*   1 */ char iop;
	/*   2 */ short unsigned int id;
	/*   4 */ int current;
	/*   8 */ int begin;
	/*   c */ int end;
	/*  10 */ int value;
};

struct checksum_cd {
	/*   0 */ int lsn;
	/*   4 */ short int offset;
	/*   6 */ short int retry;
	/*   8 */ int id;
	/*   c */ int value;
};

struct HelpMsg {
	/*   0 */ char* text;
	/*   4 */ short int id;
	/*   6 */ short int shortid;
	/*   8 */ short int thirdpersonid;
	/*   a */ short int coopid;
	/*   c */ short int vag;
	/*   e */ short int character;
};

struct LetterSub {
	/*   0 */ float cutoffs[2];
	/*   8 */ float increments[3];
	/*  14 */ int chooseMode;
	/*  18 */ float lastSub;
	/*  1c */ int pad[1];
};

struct CreditData {
	/*   0 */ void* pHeap[2];
	/*   8 */ int* pText;
	/*   c */ struct HelpMsg* messagePool;
	/*  10 */ int numMessages;
	/*  14 */ int heapSize;
	/*  18 */ int oldGSbase;
	/*  1c */ short int currentBuff;
	/*  1e */ short int currentPicture;
	/*  20 */ short int pictureCounter;
	/*  22 */ short int currentSequence;
	/*  24 */ short int currentTopLine;
	/*  26 */ short int drawState;
	/*  28 */ short int state;
	/*  2c */ int timer;
	/*  30 */ int timerMax;
	/*  34 */ int currentPage;
	/*  38 */ struct LetterSub letters[26];
	/* 378 */ int ts1_LineTimeGap;
	/* 37c */ int ts1_OneLineTime;
	/* 380 */ float ts1_InitialVel;
	/* 384 */ float ts1_SlideTimeFrac;
	/* 388 */ int ts1_NumShadows;
	/* 38c */ float ts1_ShadowTrail;
	/* 390 */ int returnYIncrement;
};

struct CreditSequence {
	/*   0 */ int title;
	/*   4 */ int startSequence;
	/*   8 */ int endSequence;
	/*   c */ int pictureID;
	/*  10 */ int titleYCenter;
	/*  14 */ int nonTitleTop;
	/*  18 */ int textScrollMode;
	/*  1c */ int numLinesOnScreen;
	/*  20 */ int lineYIncrement[10];
	/*  48 */ int timeOnScreen;
};

struct CreditSequenceContainer {
	/*   0 */ struct CreditSequence sequences[64];
	/* 1300 */ int numSequences;
	/* 1304 */ int padding[3];
};

// warning: multiple differing types with the same name, only one recovered
typedef int qword;
typedef unsigned char u8;
typedef unsigned int uint32;

struct SpriteDef {
	/*   0 */ uint64 tex0;
	/*   8 */ int uSize;
	/*   c */ int vSize;
};

struct ViewContext {
	/*   0 */ int headerBase[4][6];
	/*  60 */ qword headerTex;
	/*  70 */ qword headerTexNoFog;
	/*  80 */ qword headerGr;
	/*  90 */ qword headerGrNoFog;
	/*  a0 */ float D;
	/*  a4 */ float F;
	/*  a8 */ float xclipratio;
	/*  ac */ float yclipratio;
	/*  b0 */ float xratio;
	/*  b4 */ float yratio;
	/*  b8 */ float xradpad;
	/*  bc */ float yradpad;
	/*  c0 */ struct mtx4 fMtx;
	/* 100 */ struct mtx4 nfMtx;
	/* 140 */ struct mtx4 hMtx;
	/* 180 */ struct vec4f hmgScale;
	/* 190 */ struct vec4f ihmgScale;
	/* 1a0 */ struct vec4 hvdf;
	/* 1b0 */ struct vec4f unSquish;
	/* 1c0 */ struct vec4f guard;
	/* 1d0 */ struct vec4f iguard;
	/* 1e0 */ struct vec4f sphereCheckA;
	/* 1f0 */ struct vec4f sphereCheckB;
	/* 200 */ struct vec4f sphereCheckC;
	/* 210 */ float xpix;
	/* 214 */ float ypix;
	/* 218 */ float xclip;
	/* 21c */ float yclip;
	/* 220 */ float fog0;
	/* 224 */ float fog1;
	/* 228 */ float fogNearDist;
	/* 22c */ float fogFarDist;
	/* 230 */ float fogMult;
	/* 234 */ float fogAdd;
	/* 238 */ float fogNearIntensity;
	/* 23c */ float fogFarIntensity;
	/* 240 */ int scis_l;
	/* 244 */ int scis_r;
	/* 248 */ int scis_t;
	/* 24c */ int scis_b;
	/* 250 */ int fogR;
	/* 254 */ int fogG;
	/* 258 */ int fogB;
	/* 25c */ int backR;
	/* 260 */ int backG;
	/* 264 */ int backB;
	/* 268 */ int splitScreenMode;
};

struct FrustumDef {
	/*   0 */ float scis_l;
	/*   4 */ float scis_r;
	/*   8 */ float scis_t;
	/*   c */ float scis_b;
	/*  10 */ float size_x;
	/*  14 */ float size_y;
	/*  18 */ float center_x;
	/*  1c */ float center_y;
	/*  20 */ int splitScreenMode;
	/*  24 */ float xratio;
};

struct GifLoad {
	/*   0 */ void* pal;
	/*   4 */ u8 palFmt;
	/*   5 */ u8 texFmt;
	/*   6 */ short int ploc;
	/*   8 */ void* tex;
	/*   c */ char uLog;
	/*   d */ char vLog;
	/*   e */ short int tloc;
};

struct EffectTex {
	/*   0 */ uint64 tex0;
	/*   8 */ short unsigned int ptex;
	/*   a */ short unsigned int ppal;
	/*   c */ char uLog;
	/*   d */ char vLog;
	/*   e */ short int format;
};

struct ScreenVBEffect {
	/*   0 */ bool enabled;
	/*   4 */ uint32 BKG_color;
	/*   8 */ uint64 BKG_alpha;
	/*  10 */ int A_lines;
	/*  14 */ uint32 A_color;
	/*  18 */ uint64 A_alpha;
	/*  20 */ int B_lines;
	/*  24 */ uint32 B_color;
	/*  28 */ uint64 B_alpha;
};

struct ScreenInsertEffect {
	/*   0 */ bool enabled;
	/*   4 */ uint32 color;
	/*   8 */ uint64 alpha;
};

struct VisibilityCheck {
	/*   0 */ struct vec4 position;
	/*  10 */ float* result;
	/*  14 */ unsigned int depth;
	/*  18 */ float depth3D;
	/*  1c */ int flags;
	/*  20 */ short int x;
	/*  22 */ short int y;
	/*  24 */ short int w;
	/*  26 */ short int h;
};

struct MobyAuxDraw {
	/*   0 */ struct vec4a cam_pos;
	/*  10 */ struct vec4a cam_rot;
	/*  20 */ void* mobyList[8];
	/*  40 */ bool mobyListNoMainDraw[8];
};

struct TieInstance {
	/*   0 */ struct BSphere bsphere;
	/*  10 */ short unsigned int occl_index;
	/*  12 */ short unsigned int index;
	/*  14 */ short unsigned int cache_loc;
	/*  16 */ short unsigned int cache_size;
	/*  18 */ short unsigned int dir_lights;
	/*  1a */ short unsigned int point_lights;
	/*  1c */ char draw_dist;
	/*  1d */ char t_class;
	/*  1e */ char flags;
	/*  1f */ char cache_lod;
};

struct ShrubInstance {
	/*   0 */ struct BSphere bsphere;
	/*  10 */ float draw_dist;
	/*  14 */ char pad[2];
	/*  16 */ char flags;
	/*  17 */ char bboard_dist;
	/*  18 */ short int index;
	/*  1a */ char s_class;
	/*  1b */ char dir_lights_upd;
	/*  1c */ short unsigned int dir_lights;
	/*  1e */ short unsigned int point_lights;
};

struct RegisteredDrawRoutine_t {
	/*   0 */ /* function */ void** drawFunc;
	/*   4 */ moby* pMoby;
	/*   8 */ struct RegisteredDrawRoutine_t* pNext;
	/*   c */ struct RegisteredDrawRoutine_t* pListTail;
};

typedef long unsigned int u64;

struct vec2 {
	/*   0 */ float x;
	/*   4 */ float y;
};

enum FX_TexClamp_e {
	FXTC_DONT_CHANGE_CLAMP = 0,
	FXTC_NO_CLAMP = 1,
	FXTC_CLAMPED = 2,
	FXTC_S_CLAMPED = 3,
	FXTC_T_CLAMPED = 4,
	FXTC_NUM_CLAMP_MODES = 5,
	FXTC_UNKNOWN_CLAMP_MODE = -1
};

enum FX_FogMode_e {
	FXFM_DONT_CHANGE = 0,
	FXFM_SET_FOG_FOR_BLEND_MODE = 1,
	FXFM_NORMAL_FOG = 2,
	FXFM_FOG_FOR_ADDITIVE = 3,
	FXFM_NUM_FOG_MODES = 4,
	FXFM_UNKNOWN_FOG_MODE = -1
};

enum FX_StripClipped_e {
	FXSC_NOT_CLIPPED = 0,
	FXSC_CLIPPED = 1
};

struct FXRegistrySystemInterface {
	/*   0 */ struct vec4* stripXYZ;
	/*   4 */ int* stripRGBA;
	/*   8 */ struct st_t* stripST;
	/*   c */ void* pFreeScratchPadMemory;
	static struct vec4a quadSquareCoords[4];
	static struct st_t quadBaseSTValues[4][8];
};

struct _2legAnim {
	/*   0 */ int anim;
	/*   4 */ float stride;
	/*   8 */ float frame0;
	/*   c */ float frames;
	/*  10 */ int fromIdle;
	/*  14 */ int pad[3];
	/*  20 */ float heelRange[2];
	/*  28 */ float heelDown[2];
	/*  30 */ float heelUp[2];
	/*  38 */ float footRange[2];
	/*  40 */ float footDown[2];
	/*  48 */ float footUp[2];
};

struct legData {
	/*   0 */ char jiFoot;
	/*   1 */ char jiHeel;
	/*   2 */ char jiAnkle;
	/*   3 */ char jiHip;
	/*   4 */ float frAct;
	/*   8 */ float frDest;
	/*   c */ float frSpeed;
	/*  10 */ struct Manipulator MAnkle;
	/*  50 */ struct Manipulator MHip;
	/*  90 */ void* _pBHip;
	/*  94 */ float twistLow;
	/*  98 */ float twistHigh;
	/*  9c */ short int idle;
	/*  9e */ short int _2mainIdle;
};

struct _2legData {
	/*   0 */ struct vec4 fpos[5];
	/*  50 */ short int onground;
	/*  52 */ short int state;
	/*  54 */ float yrot;
	/*  58 */ float yrSpeed;
	/*  5c */ short int idle;
	/*  5e */ short int stand;
	/*  60 */ struct _2legAnim walk;
	/*  b0 */ struct _2legAnim run;
	/* 100 */ float speed;
	/* 104 */ int counter;
	/* 108 */ int moveJoint;
	/* 10c */ int pad[1];
	/* 110 */ struct legData legs[2];
};

struct FXRegistrySystemInternal {
	/*   0 */ bool m_bTrackingRegisters;
	/*   4 */ enum FX_BlendModes_e m_currBlendMode;
	/*   8 */ enum FX_TexClamp_e m_currClampMode;
	/*   c */ enum FX_FogMode_e m_currFogMode;
	/*  10 */ enum FX_TEXTURE_ENUM m_currEffectTexture;
	/*  18 */ uint64 m_currRegisterValue_Alpha;
	/*  20 */ uint64 m_currRegisterValue_Clamp;
	/*  28 */ uint64 m_currRegisterValue_FogCol;
	/*  30 */ uint64 m_currRegisterValue_Test;
	/*  38 */ uint64 m_currRegisterValue_Tex1;
	/*  40 */ uint64 m_currRegisterValue_Texture;
	/*  48 */ uint64 m_currRegisterValue_ZBuf;
};

struct FXU_ExplosionStreamerParams_t {
	/*   0 */ float speed;
	/*   4 */ float scale;
	/*   8 */ float grav;
	/*   c */ int iAvgLifeTimer;
	/*  10 */ int iColorStart;
	/*  14 */ int iColorEnd;
};

enum FXS_PartRockColors_e {
	FXS_ROCK_COLOR_DEFAULT = 0,
	FXS_ROCK_COLOR_BROWN01 = 1,
	FXS_ROCK_COLOR_BROWN_DARK01 = 2,
	FXS_ROCK_COLOR_GREY_DARK01 = 3,
	FXS_CFT_NUM_ROCK_COLORS = 4
};

enum FXS_Fire_Styles_e {
	FXS_FIRE_FLAMES = 0,
	FXS_FIRE_ARMOR_UPGRADE = 1,
	FXS_FIRE_TELEPORTY_WATER = 2
};

struct FXSpawningInterface {
};

struct M2491_Interface_t {
	/*   0 */ /* function */ void** CreateTeleportEffect;
};

struct M7721_Interface_t {
	/*   0 */ /* function */ void** CreateDecloakEffect;
};

struct M8207_Interface_t {
	/*   0 */ /* function */ void** CreateLargeGunEffect01;
};

struct M8216_Interface_t {
	/*   0 */ /* function */ void** SpawnLightningEffect;
	/*   4 */ /* function */ void** SpawnLightningEffectFromSourcePVars;
	/*   8 */ /* function */ void** SetStartPos;
	/*   c */ /* function */ void** SetEndPos;
};

struct M8376_Interface_t {
	/*   0 */ /* function */ void** SpawnMuzzleFlash;
	/*   4 */ /* function */ void** AddExhaust;
};

struct M8215_Interface_t {
	/*   0 */ /* function */ void** InitParamStruct;
	/*   4 */ /* function */ void** Spawn_ExplosionStreamer;
};

struct M10080_Interface_t {
	/*   0 */ /* function */ void** CreateVehiclePlayerTeleport;
};

struct M10094_Interface_t {
	/*   0 */ /* function */ void** CreateVehicleSpawnEffect;
};

typedef /* function */ void** FXU_CustomRadialCallBack;
typedef /* function */ void** FXU_CustomRadialColorCallBack;

struct FXU_RingChainEle_t {
	/*   0 */ int iColor;
	/*   4 */ float fRingPos;
	/*   8 */ float fWidth;
	/*   c */ float fHeight;
	/*  10 */ struct st_t stStart;
	/*  18 */ struct st_t stTotalChange;
	/*  20 */ float fEdgeScale;
	/*  24 */ float fEdgeOfs;
	/*  28 */ float fEdgeLengthScale;
};

struct FX_HDB_Laser_t {
	/*   0 */ struct vec4 vStart;
	/*  10 */ struct vec4 vEnd;
	/*  20 */ int iState;
	/*  24 */ int iTimer;
	/*  28 */ int pad[2];
};

struct FX_HDB_DrawInfo_t {
	/*   0 */ int iLifeStartGrowFrames;
	/*   4 */ int iLifeEndShrinkFrames;
	/*   8 */ float fLifeStartGrowMaxSize;
	/*   c */ int iCenterColor;
	/*  10 */ int iSideColor;
	/*  14 */ float fWidth;
	/*  18 */ float fStartSize;
	/*  1c */ float fStartGrowLength;
	/*  20 */ float fColorScrollRate;
	/*  24 */ float fMaskScrollRate;
	/*  28 */ float fSideColorScrollRateMult;
	/*  2c */ float fSideMaskScrollRateMult;
	/*  30 */ float fTextureLengthScale;
	/*  34 */ int iMaxTextureRepPerPoly;
	/*  38 */ float fLodStartDist;
	/*  3c */ float fLodEndDist;
	/*  40 */ struct st_t* pstCenter;
	/*  44 */ struct st_t* pstSide;
	/*  48 */ struct st_t* pstAlpha;
	/*  4c */ int iTexture;
};

struct FX_LightningInstance {
	/*   0 */ struct vec4 endPoints[2];
	/*  20 */ int coreRGBs[2];
	/*  28 */ int glowRGBs[2];
	/*  30 */ struct vec4 tangents[2];
	/*  50 */ struct vec4f tangentAngs[2];
	/*  70 */ struct vec4 tangentOccRates[2];
	/*  90 */ struct vec4 tangentOccAmps[2];
};

struct FX_LightningClass {
	/*   0 */ int numPoints;
	/*   4 */ float textureRepeat;
	/*   8 */ float tangentOccRateMin;
	/*   c */ float tangentOccRateMax;
	/*  10 */ float tangentOccAmpMin;
	/*  14 */ float tangentOccAmpMax;
	/*  18 */ float geometryRandomness;
	/*  1c */ float coreWidthMin;
	/*  20 */ float coreWidthMax;
	/*  24 */ float glowScaleMin;
	/*  28 */ float glowScaleMax;
	/*  2c */ float alphaScaleMin;
	/*  30 */ float alphaScaleMax;
	/*  34 */ int fadeEndPoints[2];
	/*  3c */ int pad;
};

struct ConeData {
	/*   0 */ int faceCnt;
	/*   4 */ int vertCnt;
	/*   8 */ float height;
	/*   c */ int layers;
	/*  10 */ struct vec4 xyzw[62];
	/* 3f0 */ struct vec4 norm[60];
	/* 7b0 */ struct vec4 cntr[60];
	/* b70 */ float st[2][62];
	/* d60 */ int rgba[62];
	/* e58 */ int switch0;
	/* e5c */ int type0;
	/* e60 */ int switch1;
	/* e64 */ int type1;
	/* e68 */ float r[2];
	/* e70 */ int pad[2];
};

struct update3652 {
	/*   0 */ struct vec4 startPos;
	/*  10 */ struct vec4 startPosOfs;
	/*  20 */ struct vec4 endPos;
	/*  30 */ struct vec4 endPosOfs;
	/*  40 */ moby* startMoby;
	/*  44 */ moby* endMoby;
	/*  48 */ moby* pDude;
	/*  4c */ float fxInterp;
	/*  50 */ int dudeModeBits;
	/*  54 */ int dudeRGBA;
	/*  58 */ float dudeInterp;
	/*  5c */ float fxSpeed;
};

struct update5548 {
	/*   0 */ float teleportInterp;
	/*   4 */ int defaultColor;
	/*   8 */ moby* teleportMoby;
	/*   c */ char noParts;
	/*   d */ char reverse;
	/*   e */ signed char scale;
	/*   f */ char drawDist;
};

struct FX_HDB_PieceInfo_t {
	/*   0 */ struct vec4* pvStart;
	/*   4 */ struct vec4* pvEnd;
	/*   8 */ struct vec4* pvCameraCross;
	/*   c */ float fSegLen;
	/*  10 */ float fStartWidth;
	/*  14 */ float fEndWidth;
	/*  18 */ float* pfCenterAlphaMaskTexS;
	/*  1c */ float* pfCenterColorTexS;
	/*  20 */ float* pfSideAlphaMaskTexS;
	/*  24 */ float* pfSideColorTexS;
	/*  28 */ int iCenterColor;
	/*  2c */ int iSideColor;
};

struct GSQuad_Cluster {
	/*   0 */ void* data;
	/*   4 */ short int vert_cnt;
	/*   6 */ short int quad_cnt;
	/*   8 */ short int vert_ofs;
	/*   a */ short int st_ofs;
	/*   c */ short int quad_ofs;
	/*   e */ short int data_size;
};

struct GSQuad_Header {
	/*   0 */ struct GSQuad_Cluster* cluster;
	/*   4 */ short int cluster_cnt;
	/*   6 */ short int textured;
};

struct LavaStream {
	/*   0 */ struct BSphere Sphere;
	/*  10 */ float* vert;
	/*  14 */ float* st;
	/*  18 */ int* rgb;
	/*  1c */ int strips;
	/*  20 */ short int start[16];
};

struct FlockVars {
	/*   0 */ struct vec4 accel;
	/*  10 */ struct vec4 vel;
	/*  20 */ struct vec4 dangerVector;
	/*  30 */ struct vec4 rndMotion;
	/*  40 */ float randomWeight;
	/*  44 */ short int rndFrameCnt;
	/*  46 */ short int timer;
	/*  48 */ float zDamp;
	/*  4c */ float ignoreRadius;
	/*  50 */ moby* leader;
	/*  54 */ struct vec4* followPoint;
	/*  58 */ float rotSpeed;
	/*  5c */ short int boundingPath;
	/*  5e */ short int numAvoidMobies;
	/*  60 */ short int avoidMobyClass[8];
	/*  70 */ float avoidMobyWeight[8];
	/*  90 */ float avoidMobyRadius[8];
};

struct FlockMobyConstants {
	/*   0 */ float dangerWeight;
	/*   4 */ float leaderWeight;
	/*   8 */ float zoneWeight;
	/*   c */ float slopeWeight;
	/*  10 */ float collDist;
	/*  14 */ float maxTurnRate;
	/*  18 */ float maxAccel;
	/*  1c */ float maxVel;
};

/*   0 */ __wchar_t;

struct fontLetter {
	/*   0 */ unsigned char u;
	/*   1 */ unsigned char v;
	/*   2 */ signed char drop;
	/*   3 */ signed char spacing;
};

enum FontAlignment {
	TOP_LEFT = 0,
	TOP_CENTER = 1,
	TOP_RIGHT = 2,
	CENTER_LEFT = 3,
	CENTER_CENTER = 4,
	CENTER_RIGHT = 5,
	BOTTOM_LEFT = 6,
	BOTTOM_CENTER = 7,
	BOTTOM_RIGHT = 8
};

struct tNW_DownloadedTweaks {
	/*   0 */ short int ranksToLevels[10];
	/*  14 */ short int m_dropPenaltyStart;
	/*  16 */ short int m_linkDirtyMax;
	/*  18 */ short int m_linkDirtyShortTermMax;
	/*  1a */ short int m_dropTo30;
	/*  1c */ short int m_perPlayer;
	/*  1e */ short int m_perPlayerSiege;
	/*  20 */ short int m_hasHeadset;
	/*  22 */ short int m_perWeapon[9];
	/*  34 */ short int m_perVehicle[4];
	/*  3c */ short int m_perLevel[12];
	/*  54 */ short int m_perMajorMode[5];
	/*  60 */ float m_RANK_SPREAD;
	/*  64 */ float m_RANK_DIFF_LOW_CLAMP;
	/*  68 */ float m_RANK_DIFF_HIGH_CLAMP;
	/*  6c */ float m_RANK_VALUE;
	/*  70 */ float m_MIN_LOSE;
	/*  74 */ float m_MIN_LOSE_SPREAD;
	/*  78 */ float m_MAX_WIN_SPREAD;
	/*  7c */ float m_MAX_SCORE;
	/*  80 */ float m_DAMP_WINNING_LOW_CLAMP;
	/*  84 */ float m_MIN_ALWAYS_POSITIVE_RANK_DELTA;
	/*  88 */ float m_MAX_ADD_TO_RANK;
};

struct freeze_t {
	/*   0 */ struct vec4 oldCamPos;
	/*  10 */ struct vec4f oldCamRot;
	/*  20 */ struct vec4 interpCamPos;
	/*  30 */ struct vec4f interpCamRot;
	/*  40 */ int mode;
	/*  44 */ int countdown;
	/*  48 */ char* query;
	/*  4c */ char* ans1;
	/*  50 */ char* ans2;
	/*  54 */ int restorePage;
	/*  58 */ int state;
	/*  5c */ int updTimers[4];
	/*  6c */ float updFloats[4];
	/*  7c */ short int nodraw;
	/*  7e */ short int noOverlay;
	/*  80 */ int data0;
	/*  84 */ short int userResponse;
	/*  88 */ int freezeDrawMode;
	/*  8c */ int dialogConfirmAction;
	/*  90 */ int dialogCancelAction;
	/*  94 */ int occlusionMode;
	/*  98 */ int messageId;
	/*  9c */ int messageType;
	/*  a0 */ /* function */ void** messageCallBack;
};

enum eFreezeDrawModes {
	kFREEZE_DRAW_PAUSE_MODE = 0,
	kFREEZE_DRAW_NORMAL_MODE = 1,
	kFREEZE_DRAW_MAX = 2
};

struct CameraTrainingInterface {
	/*   0 */ /* function */ void** RestoreOriginalHeroPad;
	/*   4 */ /* function */ void** AcquireTrainingHeroPad;
	/*   8 */ /* function */ void** IsHeroInTraining;
};

struct GenTexture {
	/*   0 */ uint64 tex_0;
	/*   8 */ unsigned int tex_0_reg;
	/*   c */ unsigned int patch_0;
	/*  10 */ uint64 test;
	/*  18 */ unsigned int test_reg;
	/*  1c */ unsigned int patch_1;
	/*  20 */ uint64 clamp;
	/*  28 */ unsigned int clamp_reg;
	/*  2c */ unsigned int patch_2;
	/*  30 */ uint64 alpha;
	/*  38 */ unsigned int alpha_reg;
	/*  3c */ unsigned int patch_3;
};

struct GenObject {
	/*   0 */ struct vec4* verts;
	/*   4 */ float* sts;
	/*   8 */ int* rgbas;
	/*   c */ short int* indices;
	/*  10 */ struct GenTexture* texs;
	/*  14 */ int vert_cnt;
	/*  18 */ int strip_cnt;
	/*  1c */ short int tex_cnt;
	/*  1e */ short int flags;
};

enum screenMode_t {
	SCREEN_MODE_NONE = -1,
	SCREEN_MODE_NORMAL = 0,
	SCREEN_MODE_SPLIT_2 = 1,
	SCREEN_MODE_SPLIT_3 = 2,
	SCREEN_MODE_SPLIT_4 = 3
};

struct COLLOUTPUT {
	/*   0 */ void* grid;
	/*   4 */ int pad[3];
	/*  10 */ int call_cnt;
	/*  14 */ int damage_next;
	/*  18 */ MobyInstance* pMoby;
	/*  1c */ int poly;
	/*  20 */ struct vec4 ip;
	/*  30 */ struct vec4 push;
	/*  40 */ struct vec4 normal;
	/*  50 */ struct vec4 v0;
	/*  60 */ struct vec4 v1;
	/*  70 */ struct vec4 v2;
};

struct HERO_COLL_GROUP {
	/*   0 */ short unsigned int bx;
	/*   2 */ short unsigned int by;
	/*   4 */ short unsigned int bz;
	/*   6 */ short unsigned int bw;
	/*   8 */ short unsigned int tri_cnt;
	/*   a */ short unsigned int vert_cnt;
	/*   c */ void* data;
};

struct HERO_COLL_GRID {
	/*   0 */ int group_cnt;
	/*   4 */ int pad[3];
	/*  10 */ struct HERO_COLL_GROUP groups[0];
};

struct AreaMapUnit {
	/*   0 */ MobyInstance* pMoby;
	/*   4 */ char bogeyCnt;
	/*   5 */ char type;
	/*   6 */ short int targetedCnt;
};

struct npcMode {
	/*   0 */ int state;
	/*   4 */ int timer;
	/*   8 */ MobyInstance* pMoby;
	/*   c */ struct npcVars* vars;
	/*  10 */ int lockout;
	/*  14 */ int offer_type;
};

struct Area {
	/*   0 */ struct BSphere bSphere;
	/*  10 */ short int num_paths;
	/*  12 */ short int num_cuboids;
	/*  14 */ short int num_spheres;
	/*  16 */ short int num_cylinders;
	/*  18 */ short int num_neg_cuboids;
	/*  1a */ short int lastUpdateTime;
	/*  1c */ int* paths;
	/*  20 */ int* cuboids;
	/*  24 */ int* spheres;
	/*  28 */ int* cylinders;
	/*  2c */ int* neg_cuboids;
};

struct AreaList {
	/*   0 */ int cnt;
	/*   4 */ int* paths;
	/*   8 */ int* cuboids;
	/*   c */ int* spheres;
	/*  10 */ int* cylinders;
	/*  14 */ int* neg_cuboids;
	/*  20 */ struct Area areas[0];
};

struct QueueNode {
	/*   0 */ int movieId;
	/*   4 */ int movieType;
};

struct MovieQueue {
	/*   0 */ int intro;
	/*   4 */ short int* pIntro;
	/*   8 */ struct QueueNode mItemsToPlay[10];
	/*  58 */ int mHead;
	/*  5c */ int mTail;
	/*  60 */ int mItemCount;
	/*  64 */ bool mAborted;
	/*  68 */ int mTypeOfRequest;
	/*  6c */ bool mLocked;
};

struct tTriMode {
	/*   0 */ int mode;
	/*   4 */ int tag;
	/*   8 */ int activeTimer;
	/*   c */ int inactiveTimer;
	/*  10 */ short int locked;
	/*  12 */ short int screen;
	/*  14 */ void* funcPtr;
	/*  18 */ void* funcData;
};

struct WeaponMemoryInfo {
	/*   0 */ void* pFunc;
	/*   4 */ int oClass;
	/*   8 */ char data[24];
	/*  20 */ char mem[420];
};

typedef int cameralink;
typedef int missionlink;
typedef int music;

struct Lse {
	/*   0 */ unsigned int i;
	/*   1 */ unsigned int j;
	/*   2 */ unsigned int k;
	/*   3 */ unsigned int flags;
	/*   4 */ unsigned char* data;
	/*   8 */ unsigned int pad[2];
};

// warning: multiple differing types with the same name, only one recovered
struct MediusUniverseVariableInformationResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ unsigned int InfoFilter;
	/*  20 */ unsigned int UniverseID;
	/*  24 */ char UniverseName[128];
	/*  a4 */ char DNS[128];
	/* 124 */ int Port;
	/* 128 */ char UniverseDescription[256];
	/* 228 */ int Status;
	/* 22c */ int UserCount;
	/* 230 */ int MaxUsers;
	/* 234 */ char UniverseBilling[8];
	/* 23c */ char BillingSystemName[128];
	/* 2bc */ char ExtendedInfo[128];
	/* 33c */ char SvoURL[128];
	/* 3bc */ char EndOfList;
};

struct MissionData {
	/*   0 */ missionlink link;
	/*   4 */ cameralink introCam;
	/*   8 */ int introCutscene;
	/*   c */ cameralink successCam;
	/*  10 */ int successCutscene;
	/*  14 */ music track;
	/*  18 */ char chunk;
	/*  19 */ char heroStartPrevPos;
	/*  1a */ char missionResults;
	/*  1b */ char fillAmmo;
	/*  1c */ char pad[4];
};

struct LevelControllerInterface {
	/*   0 */ /* function */ void** GetMissionData;
	/*   4 */ /* function */ void** SetupSwitchMissionIndex;
	/*   8 */ /* function */ void** GetMissionIndex;
	/*   c */ /* function */ void** GetDefaultMission;
	/*  10 */ /* function */ void** ExitPostMissionScreen;
	/*  14 */ /* function */ void** IsSwitchingMissions;
	/*  18 */ /* function */ void** ResetLevel1Flags;
};

typedef _Monitor_t Monitor_t;
typedef _MissionMonitor_t MissionMonitor_t;
typedef /* function */ void** PFM;
typedef /* function */ void** PFMI;

struct _Monitor_t {
	/*   0 */ PFM update;
	/*   4 */ PFM draw;
	/*   8 */ PFMI init;
	/*   c */ PFMI deinit;
	/*  10 */ int flags;
	/*  14 */ MobyInstance* pMoby;
	/*  18 */ int x0;
	/*  1c */ int y0;
	/*  20 */ int w;
	/*  24 */ int h;
	/*  28 */ int scroll_active;
	/*  2c */ int scroll;
};

struct _MissionMonitor_t {
	/*   0 */ Monitor_t mon;
	/*  30 */ int focus[80];
	/* 170 */ int rows;
	/* 174 */ int yScroll;
	/* 178 */ int flags;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusGenericChatFilter {
	/*   0 */ unsigned char GenericChatFilterBitfield[16];
};

struct Bot_Communication {
	/*   0 */ char initialized;
	/*   1 */ char isLocked;
	/*   2 */ char ignoreVehicles;
	/*   3 */ char botActive;
	/*   4 */ int lastRoleUpdate;
	/*   8 */ int nextIndex;
	/*   c */ float dbgHitPoints;
	/*  10 */ unsigned char dbgAttackDamage[4];
	/*  14 */ int lastAttackMsg;
	/*  18 */ int lastVO;
	/*  1c */ int numAttacking;
	/*  20 */ int numSighted;
	/*  24 */ moby* pBehaviourOverride;
	/*  28 */ int numEffectors;
	/*  2c */ int empCnt;
	/*  30 */ int nextSpeaker;
	/*  34 */ int lastMission;
	/*  38 */ int killVOTime;
	/*  3c */ int empVOTime;
	/*  40 */ int victoryVOTime;
	/*  44 */ int reviveVOTime;
	/*  48 */ int attackedVOTime;
	/*  4c */ int completeVOTime;
	/*  50 */ int damagedVOTime;
	/*  54 */ int deathVOTime;
	/*  58 */ int attackingVOTime;
	/*  5c */ int affirmVOTime;
	/*  60 */ struct vec4 avgAttackPos;
	/*  70 */ struct vec4 formationOverride;
	/*  80 */ struct vec4 movementOverride;
	/*  90 */ struct vec4 heroMovement;
	/*  a0 */ struct vec4 heroProjection;
	/*  b0 */ struct vec4 formationPos[4];
	/*  f0 */ struct vec4 teleportPos;
	/* 100 */ moby* pEffectorList[48];
	/* 1c0 */ struct IssuedCommand* botCommands[4];
	/* 1d0 */ moby* pBot[4];
	/* 1e0 */ unsigned int botFlags[4];
	/* 1f0 */ int heroOnElevator;
	/* 1f4 */ bool botAbilities[17];
};

struct IM_LoadBalancer {
	/*   0 */ int worldTimeReserved;
	/*   4 */ short unsigned int currentPhase;
	/*   6 */ short unsigned int fraction;
	/*   8 */ short unsigned int index;
	/*   a */ short unsigned int numSectors;
	/*   c */ short unsigned int uid;
	/*   e */ short unsigned int paddingOfRenewableSunpowerDrivenPantsResources[1];
};

struct IM_PointList {
	/*   0 */ float pX[8];
	/*  20 */ float pY[8];
	/*  40 */ float pZ[8];
	/*  60 */ float pScore[8];
	/*  80 */ short unsigned int pHash[8];
	/*  90 */ unsigned char foundPointMaximum;
	/*  91 */ unsigned char foundPoints;
	/*  92 */ unsigned char paddingOfWayTooMuchPadding[2];
	/*  94 */ unsigned int paddingOfTasteSensations[3];
};

struct IM_SectorCover {
	/*   0 */ unsigned char xDistance;
	/*   1 */ unsigned char yDistance;
	/*   2 */ unsigned char radius;
	/*   3 */ unsigned char strength;
};

struct IM_Sector {
	/*   0 */ struct IM_SectorCover cover_dynamic[2];
	/*   8 */ short unsigned int attention;
	/*   a */ short unsigned int damagePotential;
	/*   c */ short unsigned int intention;
	/*   e */ short unsigned int occupancy_dynamic;
	/*  10 */ struct IM_SectorCover cover_static[2];
	/*  18 */ short unsigned int occupancy_static;
	/*  1a */ short unsigned int padding_of_unfinishedSympathy[1];
	/*  1c */ float zHeight;
	/*  20 */ unsigned int enumeration;
	/*  24 */ short unsigned int timeLastUpdatedBitmask;
	/*  26 */ short unsigned int bucketLink;
	/*  28 */ short unsigned int chainLink;
	/*  2a */ unsigned char flags;
	/*  2b */ unsigned char padding_of_middle_mucous_muscle[3];
	/*  2e */ short unsigned int lastAccessorHash;
};

struct DynamicMobyGroup {
	/*   0 */ moby* mobys[16];
	/*  40 */ int numMobys;
	/*  44 */ int pad[3];
};

struct GC_EnemyAttackInformation {
	/*   0 */ float frontAttackApeture;
	/*   4 */ float trackingRatio;
	/*   8 */ float shotError;
	/*   c */ int timeLastAttacked;
	/*  10 */ short int timeRefraction;
	/*  12 */ unsigned char allowedByState;
	/*  13 */ unsigned char hasMutex;
	/*  14 */ unsigned char pad[12];
};

struct GC_GroupAttackInformation {
	/*   0 */ struct vec4 lastGrantedMutexLocation;
	/*  10 */ unsigned char difficulty;
	/*  11 */ unsigned char numFiringMuticies;
	/*  12 */ unsigned char numCurrentlyAvailableMuticies;
	/*  13 */ char pad[1];
	/*  14 */ float onScreenApeture;
	/*  18 */ float shotError;
	/*  1c */ float trackingRatio;
	/*  20 */ float timeSecsBetweenMutexGrants;
	/*  24 */ int timeCurrentRefraction;
	/*  28 */ unsigned char pad2[8];
};

struct GC_Preferences {
	/*   0 */ float angleCrossingReverseFraction;
	/*   4 */ float angleCrossingWeight;
	/*   8 */ float coverWeight;
	/*   c */ float distanceFromBogeyRange;
	/*  10 */ float distanceFromBogeyWeight;
	/*  14 */ float distanceFromSelfRange;
	/*  18 */ float distanceFromSelfWeight;
	/*  1c */ float intentionRange;
	/*  20 */ float intentionWeight;
	/*  24 */ char boolMustBeHidden;
	/*  25 */ char boolMustBeInSameGlobalNavNode;
	/*  26 */ char boolMustBeNearInZToHero;
	/*  27 */ char boolMustPartyLikeItsNineteenNinetyNine;
	/*  28 */ int pad[2];
};

struct GC_DangerRatingParameters {
	/*   0 */ float angRange;
	/*   4 */ float angWeight;
	/*   8 */ float distRange;
	/*   c */ float distWeight;
	/*  10 */ float coverMultiplier;
	/*  14 */ float angRangeInv;
	/*  18 */ float distRangeSquaredInv;
	/*  1c */ char precomputed;
	/*  1d */ unsigned char pad[3];
};

struct GC_Role {
	/*   0 */ int pathLink;
	/*   4 */ int targetLink;
	/*   8 */ int type;
	/*   c */ int restrictedArea;
	/*  10 */ int restrictedOClass;
	/*  14 */ moby* fulfiller;
	/*  18 */ float fulfillerSuitability;
	/*  1c */ GC_Role* nextInChain;
	/*  20 */ GC_GroupController* pGC;
	/*  24 */ int uid;
	/*  28 */ float x;
	/*  2c */ float y;
};

struct GC_SingleSpawnData {
	/*   0 */ struct GC_EnemyAttackInformation attack;
	/*  20 */ unsigned char boolPlaced;
	/*  21 */ unsigned char boolAlwaysThere;
	/*  22 */ unsigned char boolIndependent;
	/*  24 */ int patrolPathLink;
	/*  28 */ int wakeupAreaLink;
	/*  2c */ int alertAreaLink;
	/*  30 */ int introPathLink;
	/*  34 */ int fireCuboids;
	/*  38 */ int boundArea;
	/*  3c */ int watchMoby;
	/*  40 */ grouplink watchGroup;
	/*  44 */ unsigned char ability[6];
	/*  4a */ unsigned char boolEnforcedPersonalSpace;
	/*  4b */ unsigned char boolTriggered;
	/*  4c */ unsigned char boolJustSpawned;
	/*  4d */ unsigned char introPathTraversed;
	/*  4e */ short int waveParent;
};

struct GC_SpawnReference {
	/*   0 */ short int mobyOClass;
	/*   2 */ char numberToSpawn;
	/*   3 */ char bitfieldOffset;
	/*   4 */ int placedInstance;
	/*   8 */ int spawnZone;
	/*   c */ int patrolPathLink;
	/*  10 */ int introPathLink;
	/*  14 */ int fireCuboids;
	/*  18 */ moby* pLastSpawned;
	/*  1c */ char boolReinforce;
	/*  1d */ unsigned char ability[6];
};

struct GC_Triggers {
	/*   0 */ int area;
	/*   4 */ int areaWatchedMoby;
	/*   8 */ grouplink hackerGroupLink;
	/*   c */ int mobyDeadLink;
	/*  10 */ grouplink groupDeadLink;
	/*  14 */ int mobyTriggeredLink[4];
	/*  24 */ float mobyTriggerAmount[4];
	/*  34 */ short int numAlive;
	/*  36 */ short int hackerGroupCondition;
	/*  38 */ grindlink grindPath;
	/*  3c */ char boolOnMobyTriggered[4];
	/*  40 */ char boolOnAreaEnter;
	/*  41 */ char boolOnMobyDead;
	/*  42 */ char boolOnGroupDead;
	/*  43 */ char boolOnAliveMoreThan;
	/*  44 */ char boolOnHackerGroupMoreThan;
	/*  48 */ int destroyLink;
	/*  4c */ float destroyProgress;
};

struct GC_Wave {
	/*   0 */ struct GC_Triggers triggers;
	/*  50 */ GC_SpawnReference spawns[8];
	/* 170 */ grouplink placedGroupSpawnLink;
	/* 174 */ int possibleSpawnBitfield;
	/* 178 */ int spawnedBitfield;
	/* 17c */ char isSpawning;
	/* 17d */ char spawnMethod;
	/* 17e */ short int framesSpawnAttempted;
	/* 180 */ int spawnZoneCubeLink;
	/* 184 */ int spawnZoneLink;
	/* 188 */ int externalSpawnerMobyLink;
	/* 18c */ int wakeUpArea;
	/* 190 */ int alwaysViewableAreaLink;
	/* 194 */ float alertZDiff;
	/* 198 */ float timeSpawnDelaySecs;
	/* 19c */ int timeSpawnDelayRemaining;
	/* 1a0 */ short int timeSpawnStagger;
	/* 1a2 */ short int timeSpawnStaggerRemaining;
	/* 1a4 */ int boundArea;
	/* 1a8 */ GC_Role* myRoles;
	/* 1ac */ GC_Wave* nextInChain;
	/* 1b0 */ GC_GroupController* pGC;
	/* 1b4 */ int preSpawnSearchAreaLink;
	/* 1b8 */ int uid;
	/* 1bc */ float x;
	/* 1c0 */ float y;
	/* 1c4 */ float yspan;
	/* 1c8 */ int mobyTriggeredOnWaveDeath;
	/* 1cc */ int mobyTriggeredOnWaveSpawn;
	/* 1d0 */ short int boolActivateMoby;
	/* 1d4 */ grouplink mobyGroupTriggeredOnWaveSpawn;
	/* 1d8 */ short int boolActivateGroup;
	/* 1da */ char boolWaveDeathSet;
	/* 1db */ char boolWaveSpawnSet;
	/* 1dc */ char boolGrouplinkSpawned;
	/* 1dd */ char pad[4];
};

struct GC_GroupController {
	/*   0 */ unsigned char repeatWaves;
	/*   1 */ unsigned char pad[1];
	/*   2 */ short int numReclaimed;
	/*   4 */ int deactivationArea;
	/*   8 */ int reactivationArea;
	/*   c */ int numEffectors;
	/*  10 */ moby* effectors[48];
	/*  d0 */ struct DynamicMobyGroup liveMobs;
	/* 120 */ struct DynamicMobyGroup liveOpponents;
	/* 170 */ unsigned char opponentPerspectiveGrouping[16];
	/* 180 */ struct vec4 opponentPerspectives[4];
	/* 1c0 */ unsigned char numOpponentPerspectives;
	/* 1c1 */ unsigned char pad2[15];
	/* 1d0 */ struct GC_GroupAttackInformation attackManager;
	/* 200 */ struct IM_PointList coverLocations;
	/* 2a0 */ struct IM_PointList hideLocations;
	/* 340 */ struct IM_PointList analysisBackbuffer;
	/* 3e0 */ unsigned char currentAnalysisTask;
	/* 3e1 */ unsigned char state;
	/* 3e2 */ short unsigned int uid;
	/* 3e4 */ int searchAreaLink;
	/* 3e8 */ int searchTriggerLink;
	/* 3ec */ GC_Role* roleChain;
	/* 3f0 */ GC_Wave* waveChain;
	/* 3f4 */ int subpartBox;
	/* 3f8 */ struct IM_LoadBalancer* taskBalancer;
	/* 3fc */ int groupDeathTriggerLink;
	/* 400 */ float deathHeight;
	/* 404 */ char waitForCutsceneEnd;
	/* 405 */ unsigned char groupDeathTriggerSet;
	/* 406 */ unsigned char showDebuggingInfo;
};

struct GC_ReclamationRef {
	/*   0 */ GC_GroupController* pGC;
	/*   4 */ char introPathTraversed;
	/*   5 */ char placed;
	/*   6 */ char col;
	/*   7 */ char moveCol;
	/*   8 */ short unsigned int modeBits;
	/*   a */ short unsigned int moveModeBits;
	/*   c */ moby* pMoby;
	/*  10 */ short int oClass;
	/*  12 */ unsigned char ability[6];
	/*  18 */ int patrolPathLink;
	/*  1c */ int wakeupAreaLink;
	/*  20 */ int alertAreaLink;
	/*  24 */ int introPathLink;
	/*  28 */ int fireCuboids;
	/*  2c */ float alertZDiff;
	/*  30 */ struct vec4 pos;
	/*  40 */ struct vec4f rot;
};

struct Group_Spawn_Capability_t {
	/*   0 */ /* function */ void** GetSingleSpawnData;
	/*   4 */ /* function */ void** IsPooled;
	/*   8 */ /* function */ void** OClassSpecificSpawnSteps;
	/*   c */ /* function */ void** PlacedSpawnSteps;
	/*  10 */ /* function */ void** ImplementsRole;
	/*  14 */ /* function */ void** Reclaim;
	/*  18 */ /* function */ void** Restore;
};

struct Group_Externally_Spawned_Interface_t {
	/*   0 */ /* function */ void** ExternallySpawn;
};

struct Group_External_Spawner_Interface_t {
	/*   0 */ /* function */ void** ActivateExternalSpawner;
	/*   4 */ /* function */ void** IsActive;
	/*   8 */ /* function */ void** IsFinishedSpawning;
	/*   c */ /* function */ void** SpawnUpdate;
};

struct ObstructionInterface {
	/*   0 */ /* function */ void** Deactivate;
	/*   4 */ /* function */ void** Activate;
	/*   8 */ /* function */ void** IsActive;
};

struct GC_RoleBiasData {
	/*   0 */ float distance;
	/*   4 */ float hitpoint;
	/*   8 */ float secondsToTarget;
};

struct GC_ScorerData {
	/*   0 */ float bestScore;
	/*   4 */ moby* bestMob;
	/*   8 */ GC_Role* consideredRole;
	/*   c */ GC_GroupController* groupController;
	/*  10 */ GC_Wave* relevantWave;
	/*  14 */ int paddingOfWellWornSpiritualBoots[3];
};

typedef int speech;

enum STREAM_State_e {
	STREAMSTATE_OPEN = 0,
	STREAMSTATE_INITIALIZING = 1,
	STREAMSTATE_ACQUIRING_RESOURCES = 2,
	STREAMSTATE_QUEUEING = 3,
	STREAMSTATE_READY = 4,
	STREAMSTATE_PLAYING = 5,
	STREAMSTATE_PAUSED = 6,
	STREAMSTATE_STOPPING = 7
};

struct HelpDef {
	/*   0 */ int state;
	/*   4 */ int counter;
	/*   8 */ int message_id;
	/*   c */ int message_index;
	/*  10 */ int display_index;
	/*  14 */ int message_flg;
	/*  18 */ int num_message;
	/*  1c */ HSTREAM streamHandle;
	/*  20 */ short int ready_timer;
	/*  22 */ short int text_time;
	/*  24 */ short int suspend_timer;
	/*  26 */ char ready;
	/*  27 */ char suspend;
};

struct Help_QueueItem {
	/*   0 */ short int id;
	/*   2 */ short int flag;
	/*   3 */ short int priority;
	/*   4 */ void* pMoby;
	/*   8 */ float min_volume;
	/*   c */ float max_volume;
	/*  10 */ float min_range;
	/*  14 */ float max_range;
};

struct Help_QueueData {
	/*   0 */ short int head;
	/*   2 */ short int tail;
	/*   4 */ short int count;
	/*   8 */ struct Help_QueueItem queue[16];
};

struct Help_EventItemInfo {
	/*   0 */ short int id;
	/*   2 */ short int flag;
	/*   4 */ float prob;
};

struct Help_EventInfo {
	/*   0 */ int repeatDelay;
	/*   4 */ int eventProbability;
	/*   8 */ int numItems;
	/*   c */ struct Help_EventItemInfo* items;
};

struct hud_header_t {
	/*   0 */ short int icon_count;
	/*   2 */ short int frame_count;
	/*   4 */ int icon_list_ofs;
	/*   8 */ int frame_list_ofs;
	/*   c */ int pal_list_ofs;
	/*  10 */ int tex_list_ofs;
	/*  14 */ int pal_count[8];
	/*  34 */ int tex_count[8];
	/*  54 */ int bank_size[8];
	/*  74 */ char* bank_load[8];
	/*  94 */ int bank_handle[8];
};

struct icon_t {
	/*   0 */ short unsigned int id;
	/*   2 */ short unsigned int len;
	/*   4 */ short unsigned int start;
	/*   6 */ char animType;
	/*   7 */ char speed;
};

struct frame_t {
	/*   0 */ short int hPal;
	/*   2 */ short int hTex;
};

struct frameTex_t {
	/*   0 */ char* ram;
	/*   4 */ short unsigned int gsram;
	/*   6 */ char uLog;
	/*   7 */ char vLog;
};

struct framePal_t {
	/*   0 */ char* ram;
	/*   4 */ short unsigned int gsram;
	/*   6 */ short unsigned int pad;
};

struct hudGlobals {
	/*   0 */ int zDraw;
	/*   4 */ char* heap;
	/*   8 */ char* heap_end;
	/*   c */ struct hud_header_t* header;
	/*  10 */ struct icon_t* iconTable;
	/*  14 */ struct frame_t* frames;
	/*  18 */ struct frameTex_t* texs;
	/*  1c */ struct framePal_t* pals;
	/*  20 */ int noDraw;
};

struct IM_AdvertisingFeature {
	/*   0 */ struct vec4 source;
	/*  10 */ unsigned char isTapering;
	/*  11 */ unsigned char type;
	/*  12 */ unsigned char paddingOfBulbousBaboonBottoms[2];
	/*  14 */ float size;
	/*  18 */ float strength;
	/*  1c */ float paddingOfHolidayPerjury[1];
};

struct IM_InfluenceShape {
	/*   0 */ float position[2];
	/*   8 */ float dimensions[5];
	/*  1c */ unsigned char type;
	/*  1d */ unsigned char paddingOfScurrilousCommonFolk[3];
};

typedef /* function */ void** IM_OccupancyCallback;

struct IM_OccupancyCBData {
	/*   0 */ IM_OccupancyCallback pFunc;
	/*   4 */ moby* pMoby;
	/*   8 */ bool noWipe;
};

struct IM_AdvertisingAssistant {
	/*   0 */ float x;
	/*   4 */ float y;
	/*   8 */ float taper;
	/*   c */ float directionLength;
	/*  10 */ unsigned int enumeration;
	/*  14 */ short unsigned int sectorIndex;
	/*  16 */ short unsigned int bucket;
	/*  18 */ unsigned int padding[2];
};

struct TiePacket {
	/*   0 */ void* data;
	/*   4 */ char shader_cnt;
	/*   5 */ char bfc_distance;
	/*   6 */ char control_cnt;
	/*   7 */ char control_size;
	/*   8 */ char vert_ofs;
	/*   9 */ char vert_size;
	/*   a */ char rgba_cnt;
	/*   b */ char multipass_ofs;
	/*   c */ char scissor_ofs;
	/*   d */ char scissor_size;
	/*   e */ char nultipass_type;
	/*   f */ char multipass_uv_size;
};

struct TieLod {
	/*   0 */ short int vert_cnt;
	/*   2 */ short int tri_cnt;
	/*   4 */ short int strip_cnt;
	/*   6 */ short int pad;
};

struct TieClass {
	/*   0 */ struct TiePacket* packets[3];
	/*   c */ char packet_cnt[3];
	/*   f */ char tex_cnt;
	/*  10 */ float near_dist;
	/*  14 */ float mid_dist;
	/*  18 */ float far_dist;
	/*  1c */ int* shaders;
	/*  20 */ int instance_index;
	/*  24 */ short int cache_sizes[3];
	/*  2a */ short int rgba_remap_ofs[3];
	/*  30 */ int* ambient_rgbas;
	/*  34 */ short int* vert_norms;
	/*  38 */ short int vert_norm_cnt;
	/*  3a */ short int ambient_size;
	/*  3c */ short int mode_bits;
	/*  3e */ short int instance_cnt;
	/*  40 */ float scale;
	/*  44 */ short int o_class;
	/*  46 */ short int t_class;
	/*  48 */ float mip_dist;
	/*  4c */ int glow_rgba;
	/*  50 */ struct BSphere bsphere;
	/*  60 */ struct TieLod lods[3];
	/*  78 */ short int glow_remap_ofs[3];
	/*  7e */ short int pad_s;
};

struct EEVagStreamMonitor {
	/*   0 */ unsigned int BufferSize;
	/*   4 */ char* EEStartAddress;
	/*   8 */ char* NextIOPReadAddress;
	/*   c */ int TotalBytesConsumed;
	/*  10 */ char pad[48];
};

struct ezNetCtlStatus {
	/*   0 */ int ifid;
	/*   4 */ int ifid2;
	/*   8 */ char ifname[16];
	/*  18 */ char ifname2[16];
	/*  28 */ int iftype;
	/*  2c */ int error;
	/*  30 */ int state;
	/*  34 */ int link;
};

typedef struct ezNetCtlStatus ezNetCtlStatus_t;

// warning: multiple differing types with the same name, only one recovered
struct sceSifDmaData {
	/*   0 */ unsigned int data;
	/*   4 */ unsigned int addr;
	/*   8 */ unsigned int size;
	/*   c */ unsigned int mode;
};

struct irxwad {
	/*   0 */ int iopmem;
	/*   4 */ int pad;
	/*   8 */ struct datablock sio2man;
	/*  10 */ struct datablock mcman;
	/*  18 */ struct datablock mcserv;
	/*  20 */ struct datablock padman;
	/*  28 */ struct datablock mtapman;
	/*  30 */ struct datablock libsd;
	/*  38 */ struct datablock _989snd;
	/*  40 */ struct datablock stash;
	/*  48 */ struct datablock inet;
	/*  50 */ struct datablock netcnf;
	/*  58 */ struct datablock inetctl;
	/*  60 */ struct datablock msifrpc;
	/*  68 */ struct datablock dev9;
	/*  70 */ struct datablock smap;
	/*  78 */ struct datablock libnetb;
	/*  80 */ struct datablock ppp;
	/*  88 */ struct datablock pppoe;
	/*  90 */ struct datablock usbd;
	/*  98 */ struct datablock lgaud;
	/*  a0 */ struct datablock eznetcnf;
	/*  a8 */ struct datablock eznetctl;
	/*  b0 */ struct datablock lgkbm;
	/*  b8 */ struct datablock streamer;
	/*  c0 */ struct datablock astrm;
};

typedef /* function */ void** IOPLOAD_CALLBACK;
typedef /* function */ void** IOPLOAD_UNLOAD_CALLBACK;

struct IOPMODULEFUNCTIONTABLE {
	/*   0 */ enum IOPMODULEFUNCTIONSET index;
	/*   4 */ IOPLOAD_CALLBACK load_condition;
	/*   8 */ IOPLOAD_CALLBACK load_callback;
	/*   c */ IOPLOAD_UNLOAD_CALLBACK unload_callback;
};

struct DirLight {
	/*   0 */ struct vec4 color_a;
	/*  10 */ struct vec4 dir_a;
	/*  20 */ struct vec4 color_b;
	/*  30 */ struct vec4 dir_b;
};

struct DL_Data {
	/*   0 */ short int tie_offset;
	/*   2 */ short int tie_count;
	/*   4 */ short int shrub_offset;
	/*   6 */ short int shrub_count;
	/*   8 */ short int tfrag_offset;
	/*   a */ short int tfrag_count;
	/*   c */ short int* list;
};

struct PL_Data {
	/*   0 */ short int tie_offset;
	/*   2 */ short int tie_count;
	/*   4 */ short int shrub_offset;
	/*   6 */ short int shrub_count;
	/*   8 */ short int tfrag_offset;
	/*   a */ short int tfrag_count;
	/*   c */ short int* list;
	/*  10 */ int state;
	/*  14 */ int pad[3];
	/*  20 */ struct vec4 update_pos;
};

typedef /* function */ void** NetTypeObjectUpdateCallback;

struct leveldatawad {
	/*   0 */ struct datablock moby8355_pvars;
	/*   8 */ struct datablock bin;
	/*  10 */ struct datablock lwad0;
	/*  18 */ struct datablock lwad1;
	/*  20 */ struct datablock hudwad_c[6];
	/*  50 */ struct datablock lwad2;
	/*  58 */ struct datablock art_instances;
	/*  60 */ struct datablock gameplay_core;
	/*  68 */ struct datablock global_nav_data;
};

struct missiondatawad {
	/*   0 */ struct datablock gameplay_mission_instances;
	/*   8 */ struct datablock gameplay_mission_classes;
};

struct ObjectiveInterface {
	/*   0 */ /* function */ void** CheckSuccess;
	/*   4 */ /* function */ void** CheckFailure;
	/*   8 */ /* function */ void** GetObjectiveMoby;
};

struct PlanetTransportInterface {
	/*   0 */ /* function */ void** LeavePlanet;
	/*   4 */ /* function */ void** ArrivePlanet;
	/*   8 */ /* function */ void** GetTransportMoby;
	/*   c */ /* function */ void** CleanUp;
	/*  10 */ /* function */ void** IsTakingOff;
};

struct TieInstData {
	/*   0 */ struct mtx3 matrix;
	/*  30 */ struct vec4 pos;
};

struct ShrubInstData {
	/*   0 */ struct mtx3 matrix;
	/*  30 */ struct vec4 pos;
};

struct sky_cluster {
	/*   0 */ struct vec4 bsphere;
	/*  10 */ void* data;
	/*  14 */ short int vert_cnt;
	/*  16 */ short int tri_cnt;
	/*  18 */ short int vert_ofs;
	/*  1a */ short int st_ofs;
	/*  1c */ short int tri_ofs;
	/*  1e */ short int data_size;
};

struct sky_shell {
	/*   0 */ short int cluster_cnt;
	/*   2 */ short int flags;
	/*   4 */ short int rotx;
	/*   6 */ short int roty;
	/*   8 */ short int rotz;
	/*   a */ short int rotdeltax;
	/*   c */ short int rotdeltay;
	/*   e */ short int rotdeltaz;
	/*  10 */ struct sky_cluster clusters[0];
};

struct LevelHeader {
	/*   0 */ int gs_ram_cnt;
	/*   4 */ int gs_ram_ofs;
	/*   8 */ int tfrag_ofs;
	/*   c */ int occl_ofs;
	/*  10 */ int sky_main_ofs;
	/*  14 */ int coll_ofs;
	/*  18 */ int moby_class_cnt;
	/*  1c */ int moby_class_ofs;
	/*  20 */ int tie_class_cnt;
	/*  24 */ int tie_class_ofs;
	/*  28 */ int shrub_class_cnt;
	/*  2c */ int shrub_class_ofs;
	/*  30 */ int tfrag_tex_cnt;
	/*  34 */ int tfrag_tex_ofs;
	/*  38 */ int moby_tex_cnt;
	/*  3c */ int moby_tex_ofs;
	/*  40 */ int tie_tex_cnt;
	/*  44 */ int tie_tex_ofs;
	/*  48 */ int shrub_tex_cnt;
	/*  4c */ int shrub_tex_ofs;
	/*  50 */ int part_tex_cnt;
	/*  54 */ int part_tex_ofs;
	/*  58 */ int fx_tex_cnt;
	/*  5c */ int fx_tex_ofs;
	/*  60 */ int shared_tex_ofs;
	/*  64 */ int part_bank_ofs;
	/*  68 */ int fx_bank_ofs;
	/*  6c */ int part_defs_ofs;
	/*  70 */ int sound_remap_ofs;
	/*  74 */ int decomp_loc;
	/*  78 */ int light_cuboids_ofs;
	/*  7c */ int scene_view_size;
	/*  80 */ int unused_2;
	/*  84 */ int moby_gs_stash_cnt;
	/*  88 */ int comp_size;
	/*  8c */ int decomp_size;
	/*  90 */ int chrome_map_tex;
	/*  94 */ int chrome_map_pal;
	/*  98 */ int glass_map_tex;
	/*  9c */ int glass_map_pal;
	/*  a0 */ int unused_3;
	/*  a4 */ int heightmap_ofs;
	/*  a8 */ int occl_oct_ofs;
	/*  ac */ int moby_gs_stash_list;
	/*  b0 */ int occl_rad_ofs;
	/*  b4 */ int moby_sound_remap_ofs;
	/*  b8 */ int occl_rad2_ofs;
	/*  bc */ int pads_c[1];
};

struct LevelChunkDef {
	/*   0 */ int active_id;
	/*   4 */ void* coll_data;
	/*   8 */ void* tfrag_data;
	/*   c */ int valid_cnt;
	/*  10 */ short int* tfrag_tex_ofs;
	/*  14 */ short int* tfrag_clusters;
	/*  18 */ int tfrag_total_cnt;
	/*  1c */ int tfrag_occl_valid;
	/*  20 */ struct vec4 plane_pos[2];
	/*  40 */ struct vec4 plane_nrm[2];
};

struct NpcActorHeader {
	/*   0 */ int oclass;
	/*   4 */ int trans_offset;
	/*   8 */ int pad[2];
};

struct MobySoundRemapHeader {
	/*   0 */ int remap_size;
	/*   4 */ int core_classes_ofs;
	/*   8 */ int mission_classes_ofs;
	/*   c */ int remap_data_ofs;
	/*  10 */ int num_core_classes;
	/*  14 */ int pad32_0[3];
	/*  20 */ int num_mission_classes[128];
};

struct update8355 {
	/*   0 */ struct MissionData missions[8];
	/* 100 */ struct MissionData extraMissions[56];
	/* 800 */ missionlink empty;
	/* 804 */ int counter;
	/* 808 */ char success;
	/* 809 */ char hubCampaignCompleted;
	/* 80a */ char lossGranted;
};

struct loadgadget {
	/*   0 */ int gadget_id;
	/*   4 */ int comp_id;
	/*   8 */ void* buf;
};

enum mcstate_t {
	CS_INIT = 0,
	CS_GOOD_SAVE = 1,
	CS_GOOD_LOAD = 2,
	CS_PROMPT_WARNING = 3,
	CS_NOCARD = 4,
	CS_CHANGED = 5,
	CS_WAIT_FOR_CARD = 6,
	CS_UNFORMATTED = 7,
	CS_PROMPT_FORMAT = 8,
	CS_FORMAT_PENDING = 9,
	CS_FORMATTING = 10,
	CS_FORMATTED = 11,
	CS_CHECK_SAVE = 12,
	CS_CHECKING_SAVE = 13,
	CS_NOSAVE = 14,
	CS_PROMPT_CREATE_SAVE = 15,
	CS_CREATE_SAVE_PENDING = 16,
	CS_CREATING_SAVE = 17,
	CS_NEWCARD = 18,
	CS_PROMPT_FORMAT_FAILED = 19,
	CS_PROMPT_CREATE_FAILED = 20,
	CS_NO_ROOM = 21,
	CS_PROMPT_LOAD_FAILED = 22,
	CS_LOADING = 23,
	CS_PROMPT_SAVE_FAILED = 24,
	CS_SAVING = 25,
	CS_PROMPT_BEGIN_UNFORMATTED = 26,
	CS_PROMPT_BEGIN_NOSAVE = 27,
	CS_AUTO_SAVING = 28,
	CS_INIT_SAVE = 29,
	CS_INIT_LOAD = 30,
	CS_PROMPT_SAVE_OVERWRITE = 31,
	CS_PROMPT_CREATE_SAVE_OVERWRITE = 32,
	CS_PROMPT_AUTOSAVE_WARNING = 33,
	CS_EOL = 34
};

typedef /* function */ void** MCSTATE_CB;

enum MCSTATE_Response {
	MCSTATE_Response_None = 0,
	MCSTATE_Response_Yes = 1,
	MCSTATE_Response_No = 2,
	MCSTATE_Response_Ok = 3
};

enum MCSTATE_Cmd {
	MCSTATE_Cmd_All = 0,
	MCSTATE_Cmd_Save = 1,
	MCSTATE_Cmd_ForcedSave = 2,
	MCSTATE_Cmd_Load = 3,
	MCSTATE_Cmd_CreateGame = 4,
	MCSTATE_Cmd_Format = 5,
	MCSTATE_Cmd_CheckSave = 6,
	MCSTATE_Cmd_AutoSave = 7,
	MCSTATE_Cmd_Warning = 8
};

typedef /* function */ void** MCSTATE_Func;

struct mc_data {
	/*   0 */ void* addr;
	/*   4 */ int size;
	/*   8 */ int iff;
	/*   c */ int mark;
};

struct dpoint_t {
	/*   0 */ float x;
	/*   4 */ float y;
	/*   8 */ int type;
	/*   c */ int frame_rgba;
};

struct _mctag_t {
	/*   0 */ int block;
	/*   4 */ int used;
	/*   8 */ char* ram;
	/*   c */ int pad;
};

struct _mapIcon_t {
	/*   0 */ short int position;
	/*   2 */ short int mission;
	/*   4 */ short int flags;
	/*   6 */ short unsigned int icon;
	/*   8 */ short int frame;
	/*   a */ short int raw_msg;
	/*   c */ short int marg;
	/*   e */ short int mw;
	/*  10 */ short int mh;
	/*  12 */ short int moffx;
	/*  14 */ short int moffy;
	/*  16 */ short int iconFrame;
	/*  18 */ float xPos;
	/*  1c */ float yPos;
	/*  20 */ float zRot;
	/*  24 */ int state;
};

typedef struct _mapIcon_t mapIcon_t;

struct map_t {
	/*   0 */ char* controlMap;
	/*   4 */ short int* blockOffsets;
	/*   8 */ char* cache;
	/*   c */ char* fog;
	/*  10 */ int init;
	/*  14 */ char* mask;
	/*  18 */ int drawDist;
	/*  1c */ struct dpoint_t* focusDrawList;
	/*  20 */ mapIcon_t* icons;
	/*  24 */ int display;
	/*  28 */ int control;
	/*  2c */ int showCache;
	/*  30 */ struct _mctag_t cacheTags[8];
	/*  b0 */ int focusDrawCount;
	/*  b4 */ float viewScale[81];
	/* 1f8 */ int offX[81];
	/* 33c */ int offY[81];
	/* 480 */ char revealMask[4][32];
	/* 500 */ int level;
	/* 504 */ int resident_level;
	/* 508 */ int handle;
	/* 50c */ int stashed_mm;
	/* 510 */ int stash_qwc;
	/* 514 */ char* pLoad;
	/* 518 */ char* pUnpack;
	/* 51c */ int GsCompTex;
	/* 520 */ int GsPlanetPal;
	/* 524 */ int GsPlanetTex[4];
	/* 538 */ long unsigned int PlanetTex0[4];
	/* 558 */ char* mapBuf[5];
	/* 56c */ int bufContents[5];
	/* 580 */ int loadBuf;
	/* 584 */ int bufQwc[5];
};

typedef float t_Mtx4Float2dArray_;

union QWdata {
	/*   0 */ u_long128 u128;
	/*   0 */ long unsigned int u64[2];
	/*   0 */ unsigned int u32[4];
};

struct UI3D_bone {
	/*   0 */ float m[4][4];
};

struct UI3D_header {
	/*   0 */ uint32 version_string;
	/*   4 */ uint32 pad;
	/*   8 */ uint32 index_count;
	/*   c */ uint32 index_offset;
	/*  10 */ uint32 vert_count;
	/*  14 */ uint32 vert_offset;
	/*  18 */ uint32 strip_count;
	/*  1c */ uint32 strip_offset;
	/*  20 */ uint32 bone_count;
	/*  24 */ uint32 bone_offset;
};

struct UI3D_object {
	/*   0 */ struct UI3D_header* header;
	/*  10 */ struct mtx4 matrix;
	/*  50 */ u_int abgr;
	/*  54 */ void* ipu_data;
	/*  58 */ unsigned char* mesh_data;
	/*  5c */ unsigned char* anim_data;
	/*  60 */ int size;
};

struct UnlockData {
	/*   0 */ int points;
	/*   4 */ int badgeType;
	/*   8 */ int badges;
	/*   c */ int armorLevel;
	/*  10 */ int completeMission;
	/*  14 */ int playedScene;
};

struct PostMissionSceneDef {
	/*   0 */ int sceneIdx;
	/*   4 */ int sceneIdx2;
	/*   8 */ int level1PlayOnly;
	/*   c */ struct UnlockData unlock;
};

typedef /* function */ void** MF_MissionEndCallBack;

struct MF_MissionRewardData {
	/*   0 */ int xp;
	/*   4 */ int bolts;
	/*   8 */ int points;
	/*   c */ int reward_bolts;
};

struct MF_MissionDepreciationData {
	/*   0 */ int rate;
	/*   4 */ int min;
};

struct MF_MissionRewards {
	/*   0 */ struct MF_MissionRewardData mission[64];
	/* 400 */ struct MF_MissionDepreciationData xpDecay;
	/* 408 */ struct MF_MissionDepreciationData boltDecay;
	/* 410 */ struct MF_MissionDepreciationData rewardDecay;
};

struct SpawnPointData {
	/*   0 */ struct vec4 pos;
	/*  10 */ struct vec4f rot;
};

struct SpawnPointList {
	/*   0 */ struct SpawnPointData spawnPoint[8];
	/* 100 */ int activeIndex;
	/* 104 */ int size;
};

struct StartSpawnPoint {
	/*   0 */ struct SpawnPointData spawnPoint[2];
	/*  40 */ bool valid;
};

struct MidMissionMobySave {
	/*   0 */ moby* pMoby;
	/*   4 */ int saveInfo;
};

struct TriggerInterface {
	/*   0 */ /* function */ void** GetStatus;
	/*   4 */ /* function */ void** IsDone;
};

struct update3950 {
	/*   0 */ struct SubVars sVars;
	/*  50 */ struct ObjectiveVars oVars;
	/*  6c */ int index;
	/*  70 */ char enabled;
	/*  71 */ char allowReplay;
	/*  72 */ signed char save;
	/*  73 */ signed char srMessage;
	/*  74 */ int heroFinalPosCuboid;
	/*  78 */ int nextCutscene;
	/*  7c */ char replayUntilMissionCompleted;
	/*  7d */ char occlusionOff;
	/*  7e */ char moviePlayed;
	/*  7f */ char movieActivated;
	/*  80 */ char movieQueued;
	/*  84 */ moby* pNextCutscene;
	/*  88 */ missionlink objective;
	/*  8c */ int missionRequired;
};

struct CutsceneInterface {
	/*   0 */ /* function */ void** PlayScene;
	/*   4 */ /* function */ void** IsReady;
};

typedef short unsigned int u16;

struct MobyLoadStack {
	/*   0 */ int in_use;
	/*   4 */ int oclass[40];
	/*  a4 */ int mclass[40];
	/* 144 */ int texcnt[40];
	/* 1e4 */ int gsbase[40];
	/* 284 */ void* rambase[40];
};

struct t_LightBlender {
	/*   0 */ struct mtx4 m_mWorldToBlender;
	/*  40 */ u32 m_AmbColor_to;
	/*  44 */ u32 m_FogColor_to;
	/*  48 */ u16 m_Flags;
	/*  4a */ u8 m_DirId_to;
	/*  4b */ u8 m_DestCuboidId;
	/*  4c */ u32 m_Pad;
	/*  50 */ f32 m_FogNearDist_to;
	/*  54 */ f32 m_FogNearInt_to;
	/*  58 */ f32 m_FogFarDist_to;
	/*  5c */ f32 m_FogFarInt_to;
};

struct t_LightCuboid {
	/*   0 */ struct mtx4 m_mWorldToCuboid;
	/*  40 */ u32 m_AmbColor_from;
	/*  44 */ u32 m_FogColor_from;
	/*  48 */ u16 m_Flags;
	/*  4a */ u8 m_DirId_from;
	/*  4b */ u8 m_nBlenders;
	/*  4c */ u32 m_Pad;
	/*  50 */ f32 m_FogNearDist_from;
	/*  54 */ f32 m_FogNearInt_from;
	/*  58 */ f32 m_FogFarDist_from;
	/*  5c */ f32 m_FogFarInt_from;
	/*  60 */ struct t_LightBlender* m_pBlenders[0];
};

struct M9732_Interface_t {
	/*   0 */ /* function */ void** IsHillHighlightOnScreen;
	/*   4 */ /* function */ void** BuildHillHighlightPrimList;
	/*   8 */ /* function */ void** GetHillHighlightColor;
	/*   c */ /* function */ void** GetHillHighlightAlpha;
	/*  10 */ /* function */ void** GetHillHighlightPrimListSize;
};

struct Moby2dCon {
	/*   0 */ moby* mobys[8];
	/*  20 */ int active;
	/*  24 */ int screen_ofs_x;
	/*  28 */ int screen_ofs_y;
	/*  2c */ int scissor_l;
	/*  30 */ int scissor_r;
	/*  34 */ int scissor_t;
	/*  38 */ int scissor_b;
};

typedef unsigned char U8;
typedef unsigned int U32;

struct JointCacheEntry {
	/*   0 */ MobyInstance* pMoby;
	/*   4 */ short unsigned int jointIndex;
	/*   6 */ unsigned char jointCnt;
	/*   7 */ unsigned char deleted;
};

struct PoseCacheEntry {
	/*   0 */ short int cacheIndex;
	/*   2 */ short int jointCnt;
	/*   4 */ char inUse;
	/*   5 */ char nextIndex;
	/*   6 */ char animLayerCacheIndex;
	/*   7 */ char pad;
};

typedef short unsigned int U16;

struct SnowCube {
	/*   0 */ struct vec4 seed;
	/*  10 */ struct SnowCube* p_next;
	/*  14 */ short unsigned int vis[2];
	/*  18 */ U16 num_particles;
	/*  1a */ signed char ipos[3];
	/*  1d */ unsigned char pad[3];
};

struct SnowData {
	/*   0 */ struct mtx4 rotation[2];
	/*  80 */ struct mtx4 hMtx[2];
	/* 100 */ struct vec4 view_pos[2];
	/* 120 */ struct vec4 origin;
	/* 130 */ struct vec4 nearby_origin;
	/* 140 */ struct vec4 velocity;
	/* 150 */ struct vec4 frustum;
	/* 160 */ struct vec4 spline_seed;
	/* 170 */ float spline_t[2];
	/* 178 */ int time[2];
	/* 180 */ struct SnowCube cubes[490];
	/* 3ec0 */ struct SnowCube* p_head;
	/* 3ec4 */ struct SnowCube* p_garbage;
	/* 3ec8 */ float cube_size;
	/* 3ecc */ float grid_size;
	/* 3ed0 */ float cube_size_recip;
	/* 3ed4 */ float grid_size_recip;
	/* 3ed8 */ float spline_tension_parameter;
	/* 3edc */ U32 GSloc;
	/* 3ee0 */ U16 expanded_view_bits;
	/* 3ee2 */ U16 reduced_guard_bits;
	/* 3ef0 */ struct vec4 user_plane;
	/* 3f00 */ struct vec4 RGBA;
	/* 3f10 */ float motion_fade;
	/* 3f14 */ float flake_radius;
	/* 3f18 */ float rate;
	/* 3f1c */ float descent_speed;
	/* 3f20 */ float flurry_amplitude;
	/* 3f24 */ float flurry_period;
};

typedef t_Mtx4Float2dArray_& t_Mtx4Float2dArray;
typedef float fSpeed;
typedef float fAccel;

struct TractorVars {
	/*   0 */ struct vec4 trans;
	/*  10 */ struct vec4 idealPos;
	/*  20 */ int flags;
	/*  24 */ float zRot;
	/*  28 */ fSpeed_dps zRotSpeed;
	/*  2c */ float zAmp;
	/*  30 */ int alignCube;
	/*  34 */ float idealDist;
	/*  38 */ float maxRange;
	/*  3c */ float speed;
	/*  40 */ int soundChannel;
	/*  44 */ int pad[3];
};

enum FlashTypes {
	FT_NONE = 0,
	FT_HIT = 1,
	FT_SELECT = 2,
	FT_PULSE = 3,
	FT_BLINK = 4,
	FT_SOLID = 5,
	FT_SLOWFADE = 6
};

struct KickVars {
	/*   0 */ struct vec4 kickVel;
	/*  10 */ fAccel grav;
	/*  14 */ fAccel drag;
	/*  18 */ fSpeed xySpeed;
	/*  1c */ fSpeed zSpeed;
	/*  20 */ int radius;
	/*  24 */ int flag;
	/*  28 */ float zOfs;
	/*  2c */ short int timeout;
	/*  2e */ char effectType;
	/*  2f */ char effectPrimMask;
	/*  30 */ float xyBounceDamp;
	/*  34 */ float zBounceDamp;
	/*  38 */ float wallBounceDamp;
	/*  3c */ char kickActive;
	/*  3d */ char type;
	/*  3e */ short int stage;
	/*  40 */ float faceAng;
	/*  44 */ float faceSpeed;
	/*  48 */ fSpeed faceLimit;
	/*  4c */ fSpeed minXySpeed;
	/*  50 */ float peakFrame;
	/*  54 */ float landFrame;
	/*  58 */ float prevZHeight;
	/*  5c */ float hitWater;
};

struct MobyWalk {
	/*   0 */ int collRadius;
	/*   4 */ float collHeight;
	/*   8 */ float stepUp;
	/*   c */ float stepDown;
	/*  10 */ float speed;
	/*  14 */ float turnSpeed;
	/*  18 */ float fallSpeed;
	/*  1c */ fAccel gain;
	/*  20 */ fAccel damp;
	/*  24 */ fSpeed limit;
	/*  28 */ float rotThresh;
	/*  2c */ float distThresh;
	/*  30 */ float zOfs;
	/*  34 */ fAccel floatGain;
	/*  38 */ int flags;
	/*  3c */ fAccel rotGain;
	/*  40 */ fAccel rotDamp;
	/*  44 */ fSpeed rotLimit;
	/*  48 */ int rotHyst;
	/*  4c */ float moveDirection;
};

struct HuntVars {
	/*   0 */ struct vec4 currentDestination;
	/*  10 */ struct vec4 actualDestination;
	/*  20 */ struct vec4 referencePosition;
	/*  30 */ struct vec4 fallBackPoint;
	/*  40 */ int personalArrestedTimer;
	/*  44 */ float longestLine;
	/*  48 */ float jumpSpeed;
	/*  4c */ float targetGroundHeight;
	/*  50 */ moby* currentTargetMoby;
	/*  54 */ float jumpTakeoffZ;
	/*  58 */ int pitReturn;
	/*  5c */ moby* approachingMoby;
	/*  60 */ struct vec4 landPos;
	/*  70 */ struct vec4 lastCheckPos;
};

typedef SoundData SoundChannel;

struct DestroyInterface {
	/*   0 */ /* function */ void** SpawnMoby;
};

struct jumpVars {
	/*   0 */ struct vec4 target;
	/*  10 */ float zVel;
	/*  14 */ float xyVel;
	/*  18 */ float ang;
	/*  1c */ float grav;
	/*  20 */ float limit;
	/*  24 */ float launchFrame;
	/*  28 */ float landFrame;
	/*  2c */ char sAnim;
	/*  2d */ char cAnim;
	/*  2e */ char eAnim;
	/*  2f */ char state;
	/*  30 */ float turnSpeed;
	/*  34 */ float turnGain;
	/*  38 */ float turnDamp;
	/*  3c */ float turnLimit;
};

struct HeadTurnVars {
	/*   0 */ struct vec4 targetPos;
	/*  10 */ float maxHeadAngle;
	/*  14 */ float maxTorsoAngle;
	/*  18 */ float oldMobyRot;
	/*  1c */ char headJoint;
	/*  1d */ char armJoint;
	/*  1e */ char torsoJoint;
	/*  1f */ char flags;
	/*  20 */ float headTurnAccel;
	/*  24 */ float headTurnLimit;
	/*  28 */ float headRotSpeed;
	/*  2c */ float headRot;
	/*  30 */ float armTurnAccel;
	/*  34 */ float armTurnLimit;
	/*  38 */ float armRotSpeed;
	/*  3c */ float armRot;
	/*  40 */ float torsoTurnAccel;
	/*  44 */ float torsoTurnLimit;
	/*  48 */ float torsoRotSpeed;
	/*  4c */ float torsoRot;
	/*  50 */ struct Manipulator headManip;
	/*  90 */ struct Manipulator torsoManip;
	/*  d0 */ struct Manipulator armManip;
};

struct LookVars {
	/*   0 */ struct vec4 lookPos;
	/*  10 */ struct Tweaker headTweak;
	/*  90 */ struct Tweaker torsoTweak;
	/* 110 */ float minElv;
	/* 114 */ float maxElv;
	/* 118 */ float minAng;
	/* 11c */ float maxAng;
	/* 120 */ float moveGain;
	/* 124 */ float moveDamp;
	/* 128 */ float eyeHeight;
	/* 12c */ int active;
	/* 130 */ int headJoint;
	/* 134 */ int torsoJoint;
	/* 138 */ float headWeight;
	/* 13c */ float torsoWeight;
	/* 140 */ float heroAng;
	/* 144 */ float heroDist;
	/* 148 */ int lookHeroTime;
	/* 14c */ int flags;
	/* 150 */ int lookTimeMin;
	/* 154 */ int lookTimeMax;
	/* 158 */ int lookPointTimer;
	/* 15c */ int lookHeroTimer;
	/* 160 */ float elv;
	/* 164 */ float ang;
	/* 168 */ int pad[2];
};

struct MeanderVars {
	/*   0 */ struct vec4 center;
	/*  10 */ float collRadius;
	/*  14 */ float speed;
	/*  18 */ float turnSpeed;
	/*  1c */ float maxDist;
	/*  20 */ float avoidHeroRadius;
	/*  24 */ float ang;
	/*  28 */ short int status;
	/*  2a */ short int timer;
	/*  2c */ short int minTimer;
	/*  2e */ short int maxTimer;
};

struct ConstructTweaker {
	/*   0 */ struct vec4f rotAdj;
	/*  10 */ struct vec4 posAdj;
};

struct ConstructElem {
	/*   0 */ struct mtx3 rotMtx;
	/*  30 */ struct vec4 posOffset;
	/*  40 */ struct ConstructTweaker* pTweaker;
	/*  44 */ moby* pAnimMoby;
	/*  48 */ short int link;
	/*  4a */ char terminator;
	/*  4b */ char animJoint;
	/*  4c */ char linkType;
	/*  4d */ char useRotMtx;
	/*  4e */ char lightUpdateMod;
	/*  4f */ char lightUpdateVal;
};

struct TieMirrorVars {
	/*   0 */ struct vec4 lastPos;
	/*  10 */ struct vec4f lastRot;
	/*  20 */ int inited;
	/*  24 */ int tieIndex;
	/*  28 */ int lastGlowRGB;
	/*  2c */ short int lightUpdateMod;
	/*  2e */ short int lightUpdateVal;
};

struct NavArea {
	/*   0 */ int bound;
	/*   4 */ char connect[4];
	/*   8 */ char connectNode[4];
	/*   c */ short int flag;
	/*   e */ short int pad;
	/*  10 */ struct vec4 bCircle;
};

struct pitchVariation {
	/*   0 */ struct vec4 oldPos;
	/*  10 */ float minspeed;
	/*  14 */ float maxspeed;
	/*  18 */ int soundnumber;
	/*  1c */ moby* pMoby;
	/*  20 */ int sndchannel;
	/*  24 */ int pad[3];
};

struct DamagePrim {
	/*   0 */ int anim;
	/*   4 */ float startFrm;
	/*   8 */ float stopFrm;
	/*   c */ int joint1;
	/*  10 */ int joint2;
	/*  14 */ int damage;
	/*  18 */ float ang;
	/*  1c */ float weight;
};

enum HERO_SEE {
	HERO_SEE_NORMAL = 0,
	HERO_SEE_DECOY = 1,
	HERO_SEE_INVISIBLE = 2,
	HERO_SEE_NUMTYPES = 3
};

struct HeroStats {
	/*   0 */ struct vec4 pos;
	/*  10 */ struct vec4f rot;
	/*  20 */ struct vec4 missileTarget;
	/*  30 */ struct vec4 cg;
	/*  40 */ moby* pMoby;
	/*  44 */ int type;
	/*  48 */ int pad[2];
};

struct FlameThrower {
	/*   0 */ part* damageParts[7];
	/*  1c */ short int dripTimer;
	/*  1e */ char heroDamaged;
	/*  1f */ char pad;
};

struct AttachVars {
	/*   0 */ struct vec3 rotOfs;
	/*   c */ int baseMoby;
	/*  10 */ struct vec3 posOfs;
	/*  1c */ signed char baseJoint;
	/*  1d */ char killWithBase;
	/*  1e */ char rotWithBase;
	/*  1f */ char moveWithBase;
};

struct XPBundle {
	/*   0 */ moby* pMoby;
	/*   4 */ float gadgetXp[20];
};

struct ContextCommand {
	/*   0 */ enum CommandTypes commandType;
	/*   4 */ moby* pMoby;
};

struct CommandData {
	/*   0 */ int icon;
	/*   4 */ unsigned int color;
	/*   8 */ bool targetMobyRequired;
	/*   9 */ bool isSingleton;
	/*   a */ bool canBeOnDPad;
	/*   c */ int timeLimit;
	/*  10 */ int soundId;
	/*  14 */ int msgTag;
	/*  18 */ short int position;
	/*  1a */ short int priority;
	/*  1c */ float maxDist;
};

enum BotAbilityEnum {
	BA_NONE = 0,
	BA_GUN = 1,
	BA_SNIPER = 2,
	BA_GRENADE = 3,
	BA_BFG1 = 4,
	BA_BFG2 = 5,
	BA_EMP = 6,
	BA_HACK = 7,
	BA_SHIELD = 8,
	BA_GRIND_CABLE = 9,
	BA_POWERUP_2 = 10,
	BA_POWERUP_3 = 11,
	BA_POWERUP_4 = 12,
	BA_POWERUP_5 = 13,
	BA_POWERUP_6 = 14,
	BA_POWERUP_7 = 15,
	BA_POWERUP_8 = 16,
	BA_COUNT = 17
};

struct BotAbility {
	/*   0 */ short int tagUCName;
	/*   2 */ short int tagName;
	/*   4 */ short int tagDesc;
	/*   6 */ short int imageIndex;
	/*   8 */ short int iconIndex;
	/*   c */ int price;
};

struct update1503 {
	/*   0 */ struct vec4 vel;
	/*  10 */ struct vec4 rotVel;
	/*  20 */ struct vec4 massCenter;
	/*  30 */ int timer;
	/*  34 */ int flags;
	/*  38 */ float grav;
};

struct update7136 {
	/*   0 */ int nextNode;
	/*   4 */ int prevNode;
	/*   8 */ int pad[2];
};

struct update7383 {
	/*   0 */ moby* chunks[15];
	/*  3c */ short int numChunks;
	/*  3e */ short int stateTimer;
	/*  40 */ float flameScale;
	/*  44 */ float groundZ;
	/*  48 */ char sootLevel;
	/*  49 */ char sparkLevel;
	/*  4a */ char onTheFly;
	/*  4b */ char killMe;
	/*  4c */ int ipad;
};

struct M7383_Interface_t {
	/*   0 */ /* function */ void** Spawn;
};

struct update9321 {
	/*   0 */ int activationType;
	/*   4 */ int activationArea;
	/*   8 */ int deactivationArea;
	/*   c */ int enemyArrival;
	/*  10 */ int destCuboids[4];
	/*  20 */ char weaponOverride;
	/*  21 */ char formationOverride;
	/*  22 */ char grindOverride;
	/*  23 */ char oneTimeOnly;
	/*  24 */ char flyToDest;
	/*  25 */ char priority;
	/*  26 */ char activated;
	/*  27 */ char pad;
};

struct update8309 {
	/*   0 */ float open;
	/*   4 */ int cameraPos;
	/*   8 */ float numRotationsToOpen;
	/*   c */ moby* pBoltCrank;
	/*  10 */ BaseCrankBoltInterface_t* pCrankInterface;
	/*  14 */ float colorPulse;
	/*  18 */ float fVehiclePadColorPulse;
	/*  1c */ int helpTimer;
	/*  20 */ moby* pLight;
	/*  24 */ moby* pGlass;
	/*  28 */ moby* pTurrets[2];
	/*  30 */ struct Tweaker bigCogTweak;
	/*  b0 */ struct Tweaker smallCogTweak[4];
	/* 2b0 */ float turretColorPulse[2];
	/* 2b8 */ int vehiclePad;
	/* 2bc */ int turretLink;
	/* 2c0 */ moby* pUpgradeTurrets[2];
	/* 2c8 */ float upgradeTurretPulseColors[2];
	/* 2d0 */ int healthPad;
	/* 2d4 */ int ammoPad;
	/* 2d8 */ unsigned int boltUID;
	/* 2dc */ char spawnedUpgrades;
	/* 2dd */ char locked;
	/* 2de */ char midMissionSave;
	/* 2df */ char disabled;
	/* 2e0 */ int masterState;
	/* 2e4 */ char team;
	/* 2e5 */ char toTeam;
	/* 2e6 */ char prevTeam;
	/* 2e7 */ char homeNode;
	/* 2e8 */ char covered;
	/* 2e9 */ char light;
	/* 2ea */ char registerOnRadar;
	/* 2eb */ char opened;
	/* 2ec */ int teleporterPad;
	/* 2f0 */ int resurrectionPt;
	/* 2f4 */ int upgradeController;
	/* 2f8 */ int vehiclePad2;
	/* 2fc */ int pad3[1];
};

struct M2784_AmmoSpawnInterface_t {
	/*   0 */ /* function */ void** SpawnAmmo;
};

struct update8419 {
	/*   0 */ struct StickVars stickVars;
	/*  40 */ char cSquishMode;
	/*  41 */ char cFadeAmt;
	/*  42 */ char cJointTrace;
	/*  43 */ unsigned char cFlameTimer;
	/*  44 */ short int sTimer01;
	/*  46 */ short int sTimer02;
	/*  48 */ float fVertSquishSpeed;
	/*  4c */ float fRadius;
	/*  50 */ float fDecelRate;
	/*  54 */ float fTargetScale;
	/*  58 */ float fSquishScaleRate;
	/*  5c */ float fSquishImpactRate;
	/*  60 */ float damage;
	/*  64 */ int blobID;
	/*  68 */ int weaponSource;
	/*  6c */ struct Hero* pUser;
	/*  70 */ struct vec4 vel;
	/*  80 */ struct vec4 up;
	/*  90 */ struct vec4 lastPos;
};

struct update8363 {
	/*   0 */ struct StickVars stickVars;
	/*  40 */ char blobJointMovable[4];
	/*  44 */ char cSquishMode;
	/*  45 */ char cFadeAmt;
	/*  46 */ char cJointTrace;
	/*  47 */ char cParentIndex;
	/*  48 */ short int sTimer01;
	/*  4a */ short int sTimer02;
	/*  4c */ float fVertSquishSpeed;
	/*  50 */ float fDecelRate;
	/*  54 */ float fTargetScale;
	/*  58 */ float fSquishScaleRate;
	/*  5c */ float fSquishImpactRate;
	/*  60 */ float fDistortHeight[4];
	/*  70 */ float fDistortInterp[4];
	/*  80 */ float fDistortSpeed[4];
	/*  90 */ float damage;
	/*  94 */ int blobID;
	/*  98 */ int weaponSource;
	/*  9c */ int pad[1];
	/*  a0 */ struct vec4 vel;
	/*  b0 */ struct vec4 up;
	/*  c0 */ struct vec4 lastPos;
	/*  d0 */ struct vec4 blobDir[4];
	/* 110 */ struct Manipulator blobManip[4];
};

struct BoltInfo {
	/*   0 */ int value;
	/*   4 */ short int oClass;
};

struct MobyAutoTargetScoreListElem {
	/*   0 */ moby* pMoby;
	/*   4 */ float score;
	/*   8 */ struct MobyAutoTargetScoreListElem* pNextElem;
	/*   c */ struct MobyAutoTargetScoreListElem** pPrevPtr;
	/*  10 */ struct vec4 checkPos;
};

struct SoundTrigger {
	/*   0 */ short unsigned int id;
	/*   2 */ short unsigned int time;
};

struct NavData {
	/*   0 */ struct vec4 wayDest;
	/*  10 */ float swarmAngle;
	/*  14 */ float collRadius;
	/*  18 */ int boundArea;
	/*  1c */ short int updateIndex;
	/*  1e */ short int updateMod;
	/*  20 */ int lastUpdate;
	/*  24 */ int lastReturn;
	/*  28 */ short int effIndex;
	/*  2a */ short int regNavObj;
	/*  2c */ short int nextWayPnt;
	/*  2e */ short int nexterWayPnt;
};

struct NavWayPnt {
	/*   0 */ struct vec4 pos;
	/*  10 */ float radius;
	/*  14 */ float minHeight;
	/*  18 */ float maxHeight;
	/*  1c */ int flags;
	/*  20 */ short int connectNodes[8];
	/*  30 */ float nodeDists[8];
	/*  50 */ char disabledNodes[8];
	/*  58 */ int pad[2];
};

struct NavEffector {
	/*   0 */ struct vec4 pos;
	/*  10 */ float inRad;
	/*  14 */ float outRad;
	/*  18 */ float strength;
	/*  1c */ int index;
};

struct NavBound {
	/*   0 */ struct vec4 bSphere;
	/*  10 */ struct vec4* pointList;
	/*  14 */ int numPoints;
	/*  18 */ float maxHeight;
	/*  1c */ float minHeight;
};

struct NavOccluder {
	/*   0 */ struct vec4 pos1;
	/*  10 */ struct vec4 pos2;
	/*  20 */ struct vec4 bSphere;
	/*  30 */ int index;
	/*  34 */ float minHeight;
	/*  38 */ float maxHeight;
	/*  3c */ int flags;
};

struct navarea {
	/*   0 */ struct vec4 bSphere;
	/*  10 */ short int wayPnts[8];
	/*  20 */ short int num_paths;
	/*  22 */ short int num_cuboids;
	/*  24 */ short int num_spheres;
	/*  26 */ short int num_cylinders;
	/*  28 */ short int num_neg_cuboids;
	/*  2a */ short int activeTimer;
	/*  2c */ int* paths;
	/*  30 */ int* cuboids;
	/*  34 */ int* spheres;
	/*  38 */ int* cylinders;
	/*  3c */ int* neg_cuboids;
};

struct DistDatum {
	/*   0 */ float dist;
	/*   4 */ short int turn;
	/*   6 */ short int nexterNode;
};

enum rmc_t {
	RMC_UNDEFINED = 0,
	RMC_NEST = 1,
	RMC_SWITCH = 2
};

struct PushedMode {
	/*   0 */ enum gameMode_t mode;
	/*   4 */ int rmc0;
	/*   8 */ int rmc1;
};

typedef /* function */ void** ActionCallback;

struct VehicleSpawnPadInterface_t {
	/*   0 */ /* function */ void** VehiclePadSetTeam;
	/*   4 */ /* function */ void** VehiclePadOn;
	/*   8 */ /* function */ void** VehiclePadOff;
};

struct M9897_Interface_t {
	/*   0 */ /* function */ void** CreateMoby;
	/*   4 */ /* function */ void** SetLifetime;
};

typedef u_long CallbackData;
typedef /* function */ void** Callback_SynchronousMethod;

enum STREAM_Type_e {
	STREAMTYPE_LEVELSPEECH = 0,
	STREAMTYPE_VENDORSPEECH = 1,
	STREAMTYPE_HELPSPEECH = 2,
	STREAMTYPE_SCENE = 3,
	STREAMTYPE_LEVELSFX = 4,
	STREAMTYPE_SHIPSCENE = 5,
	STREAMTYPE_GLOBALSFX = 6
};

typedef short unsigned int navg_hnode;
typedef short unsigned int navg_hedge;
typedef short unsigned int navg_hpath;
typedef short unsigned int navg_hcluster;
typedef short unsigned int navg_hclusterPath;
typedef short unsigned int navg_hsector;

struct navg_edge {
	/*   0 */ short unsigned int type;
	/*   2 */ short unsigned int flags;
	/*   4 */ int infolink;
};

struct navg_path {
	/*   0 */ navg_hnode nextNode;
	/*   2 */ navg_hedge nextEdge;
	/*   4 */ short unsigned int dist;
	/*   6 */ short unsigned int traversalFlags;
};

struct navg_clusterPath {
	/*   0 */ navg_hnode exitNode;
	/*   2 */ navg_hnode entryNode;
	/*   4 */ navg_hnode nextNode;
	/*   6 */ navg_hedge nextEdge;
	/*   8 */ short unsigned int dist;
	/*   a */ short unsigned int traversalFlags;
};

struct navg_neighbor {
	/*   0 */ navg_hnode node;
	/*   2 */ navg_hedge edge;
	/*   4 */ short unsigned int dist;
	/*   6 */ short unsigned int traversalFlags;
};

struct navg_node {
	/*   0 */ short unsigned int type;
	/*   2 */ short unsigned int flags;
	/*   4 */ short unsigned int firstNeighbor;
	/*   6 */ short int numNeighbors;
	/*   8 */ navg_hcluster cluster;
	/*   a */ short unsigned int traversalFlags;
	/*   c */ int infolink;
	/*  10 */ struct vec4 centroid;
};

struct navg_cluster {
	/*   0 */ short unsigned int firstNode;
	/*   2 */ short unsigned int numNodes;
	/*   4 */ short unsigned int firstPath;
	/*   6 */ short unsigned int flags;
	/*   8 */ navg_hsector sector;
	/*   a */ short unsigned int pad;
};

struct navg_pathList {
	/*   0 */ navg_hpath firstPath;
	/*   2 */ short int numPaths;
};

struct navg_clusterPathList {
	/*   0 */ navg_hclusterPath firstPath;
	/*   2 */ short int numPaths;
};

struct navg_sector {
	/*   0 */ short unsigned int firstCluster;
	/*   2 */ short int numClusters;
	/*   4 */ short unsigned int firstPartition;
	/*   6 */ short int numPartitions;
	/*   8 */ short unsigned int flags;
	/*   a */ short unsigned int pad;
};

struct navg_partition {
	/*   0 */ navg_hnode nodeA;
	/*   2 */ navg_hnode nodeB;
};

struct navg_newPathElement {
	/*   0 */ navg_hnode dest;
	/*   2 */ navg_hnode through;
	/*   4 */ navg_hnode source;
	/*   6 */ navg_hedge edge;
	/*   8 */ short unsigned int dist;
	/*   a */ short unsigned int flags;
	/*   c */ short unsigned int entryNode;
	/*   e */ short int index;
};

struct navg_newPathElement2 {
	/*   0 */ unsigned int dest;
	/*   4 */ unsigned int through;
	/*   8 */ unsigned int source;
	/*   c */ unsigned int edge;
	/*  10 */ unsigned int dist;
	/*  14 */ unsigned int flags;
	/*  18 */ unsigned int entryNode;
	/*  1c */ int index;
};

struct navg_system {
	/*   0 */ struct navg_newPathElement repathStack[256];
	/* 1000 */ struct navg_newPathElement2 repathStack2[256];
	/* 3000 */ int version;
	/* 3004 */ struct navg_clusterPathList* clusterPaths;
	/* 3008 */ struct navg_pathList* nodePaths2;
	/* 300c */ int numClusters;
	/* 3010 */ struct navg_cluster* clusterArray;
	/* 3014 */ int numNodes;
	/* 3018 */ struct navg_node* nodeArray;
	/* 301c */ int numNeighbors;
	/* 3020 */ struct navg_neighbor* neighborArray;
	/* 3024 */ int numEdges;
	/* 3028 */ struct navg_edge* edgeArray;
	/* 302c */ int numSectors;
	/* 3030 */ struct navg_sector* sectorArray;
	/* 3034 */ int numPartitions;
	/* 3038 */ struct navg_partition* partitionArray;
	/* 303c */ int numClusterPaths;
	/* 3040 */ struct navg_clusterPath* clusterPathArray;
	/* 3044 */ int numPaths2;
	/* 3048 */ struct navg_path* pathArray2;
	/* 304c */ int isStarted;
	/* 3050 */ int isLive;
	/* 3054 */ int repathStackSize;
	/* 3058 */ int repathCurrentNode;
	/* 305c */ int numCuboids;
	/* 3060 */ int* cuboids;
	/* 3064 */ int numSpheres;
	/* 3068 */ int* spheres;
	/* 306c */ int numCylinders;
	/* 3070 */ int* cylinders;
	/* 3074 */ int numBoundPaths;
	/* 3078 */ int* boundPaths;
};

typedef __gnuc_va_list va_list;

struct PartTex {
	/*   0 */ int pal;
	/*   4 */ int tex;
};

struct Part000 {
	/*   0 */ struct vec4 vel;
};

struct Part002 {
	/*   0 */ int vel1;
	/*   4 */ int vel2;
	/*   8 */ int rgba1;
	/*   c */ int rgba2;
	/*  10 */ short int shootTimer;
	/*  12 */ short int slowTimer;
	/*  14 */ short int fadeTimer;
	/*  16 */ short int initScale;
	/*  18 */ short int finalScale;
};

struct Part003 {
	/*   0 */ struct vec4 vel;
	/*  10 */ char* existFlag;
	/*  14 */ int state;
	/*  18 */ int numFlipColls;
	/*  1c */ int numFramesSinceColl;
};

struct Part004 {
	/*   0 */ struct vec4 vel;
	/*  10 */ int beginColor;
	/*  14 */ int endColor;
	/*  18 */ short int maxScale;
	/*  1a */ short int startScale;
	/*  1c */ int lifeSpan;
};

struct Part005 {
	/*   0 */ int fadeTimer;
	/*   4 */ float scaleDelta;
};

struct Part006Deltas {
	/*   0 */ struct vec4 acc;
	/*  10 */ struct vec4 min;
	/*  20 */ struct vec4 max;
	/*  30 */ float dscale;
	/*  34 */ float drot;
	/*  38 */ float dalpha;
	/*  3c */ float bounce;
	/*  40 */ float velmax;
	/*  44 */ float minalpha;
	/*  48 */ float maxalpha;
	/*  4c */ float dr;
	/*  50 */ float dg;
	/*  54 */ float db;
	/*  58 */ float minr;
	/*  5c */ float ming;
	/*  60 */ float minb;
	/*  64 */ float maxr;
	/*  68 */ float maxg;
	/*  6c */ float maxb;
	/*  70 */ int flags;
	/*  74 */ float minscale;
	/*  78 */ float maxscale;
	/*  7c */ moby* parent;
};

struct Part006 {
	/*   0 */ struct vec3 vel;
	/*   c */ struct Part006Deltas* d;
	/*  10 */ float alpha;
	/*  14 */ float rot;
	/*  18 */ unsigned char rf;
	/*  19 */ unsigned char gf;
	/*  1a */ unsigned char bf;
	/*  1b */ unsigned char flags;
};

struct Part007 {
	/*   0 */ int fadeTimer;
	/*   4 */ float scaleDelta;
};

struct Part008 {
	/*   0 */ struct vec4 vel;
	/*  10 */ int beginRGBA;
	/*  14 */ int endRGBA;
	/*  18 */ int lifeSpan;
	/*  1c */ float scaleDelta;
};

struct Part009 {
	/*   0 */ int timer;
	/*   4 */ moby* pParent;
	/*   8 */ float rotRange;
	/*   c */ float curRot;
	/*  10 */ int alpha;
};

struct Part010 {
	/*   0 */ struct vec4 vel;
	/*  10 */ float r;
	/*  14 */ float g;
	/*  18 */ float b;
	/*  1c */ float alpha;
};

struct Part011 {
	/*   0 */ struct vec4 vel;
	/*  10 */ int beginRGBA;
	/*  14 */ int endRGBA;
	/*  18 */ char totalTime;
	/*  19 */ char stateFlags;
	/*  1a */ char generationCount;
	/*  1b */ unsigned char lifeSpan;
	/*  1c */ float maxScale;
};

struct Part012 {
	/*   0 */ struct vec4 vel;
	/*  10 */ float dist;
	/*  14 */ int initRGBA;
	/*  18 */ int finalRGBA;
	/*  1c */ char timer;
	/*  1d */ char lifetime;
	/*  1e */ char rotSpeed;
	/*  1f */ char flags;
};

struct Part013 {
	/*   0 */ int timer;
	/*   4 */ int state;
	/*   8 */ int rotDir;
	/*   c */ float scale;
	/*  10 */ float zSpeed;
	/*  14 */ int rgb;
};

struct Part014 {
	/*   0 */ int rot;
	/*   4 */ int state;
	/*   8 */ moby* pMoby;
};

struct Part015 {
	/*   0 */ struct vec4 vel;
	/*  10 */ int beginRGBA;
	/*  14 */ int endRGBA;
	/*  18 */ short int lifeSpan;
	/*  1a */ short int master;
	/*  1c */ float maxScale;
};

struct Part016 {
	/*   0 */ struct vec4 vel;
	/*  10 */ int beginRGBA;
	/*  14 */ int endRGBA;
	/*  18 */ short int lifeSpan;
	/*  1a */ short int partClass;
	/*  1c */ float maxScale;
};

struct Part018 {
	/*   0 */ struct mtx3* rotmatrix;
	/*   4 */ float alpha;
	/*   8 */ float rot;
	/*   c */ float asign;
};

struct Part020 {
	/*   0 */ struct mtx3* rotmatrix;
	/*   4 */ float alpha;
	/*   8 */ float rot;
	/*   c */ float asign;
	/*  10 */ float offset;
	/*  14 */ float angle;
	/*  18 */ moby* target;
	/*  1c */ float vel;
};

struct Part021 {
	/*   0 */ struct vec4 vel;
	/*  10 */ int beginRGBA;
	/*  14 */ int endRGBA;
	/*  18 */ short int lifeSpan;
	/*  1a */ short int master;
	/*  1c */ float maxScale;
};

struct Part022 {
	/*   0 */ struct vec4 vel;
	/*  10 */ int beginRGBA;
	/*  14 */ int endRGBA;
	/*  18 */ short int lifeSpan;
	/*  1a */ short int pad;
	/*  1c */ float dScale;
};

struct Part025 {
	/*   0 */ struct vec4 vel;
	/*  10 */ float r;
	/*  14 */ float g;
	/*  18 */ float b;
	/*  1c */ float alpha;
};

struct Part026 {
	/*   0 */ moby* parent;
	/*   4 */ short int timer;
	/*   6 */ short int joint;
	/*   8 */ int lifeSpan;
	/*   c */ int alpha;
};

struct Part027 {
	/*   0 */ struct vec4 vel;
	/*  10 */ int timer;
	/*  14 */ int lifeSpan;
	/*  18 */ int alpha;
};

struct Part028 {
	/*   0 */ struct mtx3* rotmatrix;
	/*   4 */ float alpha;
	/*   8 */ float rot;
	/*   c */ float asign;
	/*  10 */ struct vec4 vel;
};

struct Part030 {
	/*   0 */ struct vec4 vel;
	/*  10 */ part* prev;
	/*  14 */ part* next;
	/*  18 */ float ground;
	/*  1c */ short int grounded;
	/*  1e */ short int type;
};

struct Part031 {
	/*   0 */ moby* target;
};

struct Part032 {
	/*   0 */ moby* parent;
	/*   4 */ float alpha;
	/*   8 */ float dalpha;
	/*   c */ float rot;
	/*  10 */ float r;
	/*  14 */ float g;
	/*  18 */ float b;
};

struct Part034 {
	/*   0 */ float velx;
	/*   4 */ float vely;
	/*   8 */ float velz;
	/*   c */ float idealScale;
	/*  10 */ float waterHeight;
	/*  14 */ float t;
	/*  18 */ float dt;
	/*  1c */ float waveSpeed;
};

struct Part035 {
	/*   0 */ struct vec4 vel;
	/*  10 */ int type;
	/*  14 */ int timer;
	/*  18 */ float spawn_height;
	/*  1c */ float gravity;
};

struct Part036 {
	/*   0 */ int* pLightOn;
	/*   4 */ float ang;
	/*   8 */ float thresh;
	/*   c */ int rgba;
	/*  10 */ struct vec4 pos;
};

struct Part037 {
	/*   0 */ struct vec4 pos;
	/*  10 */ int rgba;
	/*  14 */ int thresh;
};

struct Part038 {
	/*   0 */ struct vec4 vel;
	/*  10 */ float scale_delta;
	/*  14 */ float alpha;
};

struct Part039 {
	/*   0 */ float alpha;
	/*   4 */ moby* pMoby;
	/*   8 */ int texIdx;
};

struct Part040 {
	/*   0 */ struct vec4 vel;
	/*  10 */ float rot;
	/*  14 */ short int timer;
	/*  16 */ short int posttimer;
	/*  18 */ char flags;
	/*  19 */ unsigned char scaleFactor;
	/*  1a */ short int sPad;
	/*  1c */ MobyInstance* parent;
};

struct Part041 {
	/*   0 */ MobyInstance* parent;
};

struct Part042 {
	/*   0 */ struct vec4 vel;
	/*  10 */ float rot;
	/*  14 */ short int timer;
	/*  16 */ short int posttimer;
	/*  18 */ char flags;
	/*  1c */ MobyInstance* parent;
};

struct Part043 {
	/*   0 */ struct vec4 vel;
	/*  10 */ MobyInstance* parent;
	/*  14 */ char r;
	/*  15 */ char g;
	/*  16 */ char b;
	/*  17 */ char a;
	/*  18 */ short int lifetime;
};

struct Part044 {
	/*   0 */ struct vec3 vel;
	/*   c */ float gravity;
	/*  10 */ char rotSpeed;
	/*  11 */ unsigned char r;
	/*  12 */ unsigned char g;
	/*  13 */ unsigned char b;
	/*  14 */ float scaleSpeed;
	/*  18 */ float damp;
	/*  1c */ short int frames;
	/*  1e */ short int alpha;
};

struct Part046 {
	/*   0 */ struct vec4 vel;
	/*  10 */ float rot;
	/*  14 */ float spin;
	/*  18 */ float* zHeight;
};

struct Part048 {
	/*   0 */ struct vec4 vel;
	/*  10 */ float invTimer;
	/*  14 */ int RGBA1;
	/*  18 */ int RGBA2;
	/*  1c */ short int rotSpeed;
};

struct Part049 {
	/*   0 */ struct vec3 vel;
	/*   c */ moby* pParent;
};

struct Part050 {
	/*   0 */ struct vec4 vel;
	/*  10 */ float height;
	/*  14 */ int rotSpeed;
	/*  18 */ float gravity;
};

struct Part052 {
	/*   0 */ float initScale;
	/*   4 */ float finalScale;
	/*   8 */ int initRGBA;
	/*   c */ int finalRGBA;
	/*  10 */ float invTime;
};

struct Part053 {
	/*   0 */ float initScale;
	/*   4 */ float finalScale;
	/*   8 */ short int initTime;
	/*   a */ char rotSpeed;
	/*   b */ char initAlpha;
	/*   c */ struct vec3 vel;
	/*  18 */ float gravity;
	/*  1c */ short int alphaSub;
	/*  1e */ short int pad;
};

struct Part054 {
	/*   0 */ struct Path* pPath;
	/*   4 */ float curDist;
	/*   8 */ float flowSpeed;
	/*   c */ float segmentLength;
	/*  10 */ float rot;
	/*  14 */ moby* pParent;
};

struct Part055 {
	/*   0 */ moby* pParent;
	/*   4 */ int joint;
	/*   8 */ int parent_oClass;
	/*   c */ float start_width;
};

struct Part057 {
	/*   0 */ struct vec4 vel;
	/*  10 */ float rot;
	/*  14 */ float spin;
};

struct Part058 {
	/*   0 */ struct vec4 vel;
	/*  10 */ char type;
	/*  11 */ char fade_time;
	/*  12 */ char burst_time;
	/*  13 */ char spawn_rate;
	/*  14 */ char state;
	/*  15 */ char flame_time;
	/*  16 */ char alpha_top;
	/*  17 */ char pad;
	/*  18 */ moby* pParent;
	/*  1c */ float damageHp;
};

struct Part059 {
	/*   0 */ struct vec4 ofs;
	/*  10 */ int type;
	/*  14 */ moby* hero;
	/*  18 */ int pad[2];
};

struct Part060 {
	/*   0 */ struct vec3 vel;
	/*   c */ moby* hero;
	/*  10 */ struct vec3 ofs;
	/*  1c */ int type;
};

struct Part061 {
	/*   0 */ moby* parent;
	/*   4 */ float alpha;
	/*   8 */ float rot;
	/*   c */ short int frame;
	/*   e */ short int joint;
	/*  10 */ float dalpha;
	/*  14 */ float dist;
};

struct Part062 {
	/*   0 */ short int alphaSub;
	/*   2 */ char type;
	/*   3 */ char addHero;
	/*   4 */ struct vec3 vel;
	/*  10 */ struct vec3 pos;
	/*  1c */ short int maxTimer;
	/*  1e */ short int timer;
};

struct Part064 {
	/*   0 */ struct vec4 vel;
	/*  10 */ float height;
	/*  14 */ float gravity;
	/*  18 */ int endRGBA;
};

struct Part065 {
	/*   0 */ struct vec4 vel;
	/*  10 */ float r;
	/*  14 */ float g;
	/*  18 */ float b;
	/*  1c */ float alpha;
};

struct Part066 {
	/*   0 */ struct vec4 vel;
	/*  10 */ float expandSpeed;
};

struct Part067 {
	/*   0 */ struct vec3 vel;
	/*   c */ moby* pParent;
	/*  10 */ float tOuter;
	/*  14 */ float tInner;
	/*  18 */ short int aliveTime;
	/*  1a */ short int alphaSub;
	/*  1c */ short int type;
	/*  1e */ short int timer;
};

struct Part068 {
	/*   0 */ moby* pParent;
	/*   4 */ char joint;
	/*   5 */ unsigned char vary_percent;
	/*   6 */ short int parent_oClass;
	/*   8 */ float start_width;
	/*   c */ float length;
};

struct Part069 {
	/*   0 */ struct vec4 vel;
	/*  10 */ float initTimerInv;
	/*  14 */ short int initAlpha;
	/*  16 */ short int state;
	/*  18 */ int color;
	/*  1c */ moby* pParent;
};

struct Part072 {
	/*   0 */ struct vec4 vel;
	/*  10 */ int type;
	/*  14 */ int spawnedSmoke;
	/*  18 */ int rot;
	/*  1c */ float scaleFactor;
};

struct Part074 {
	/*   0 */ struct vec3 vel;
	/*   c */ moby* pParent;
	/*  10 */ struct vec3 ofs;
	/*  1c */ struct Part074_fixed* fixed;
};

struct Part075 {
	/*   0 */ struct vec4 vel;
	/*  10 */ short int type;
	/*  12 */ short int rot;
	/*  14 */ float scaleFactor;
	/*  18 */ float timerInv;
	/*  1c */ int alphaDec;
};

struct Part078 {
	/*   0 */ float initScale;
	/*   4 */ float finalScale;
	/*   8 */ short int initTime;
	/*   a */ char rotSpeed;
	/*   b */ char initAlpha;
	/*   c */ struct vec3 vel;
	/*  18 */ moby* pTarget;
	/*  1c */ float zOfs;
};

struct Part087 {
	/*   0 */ moby* parent;
	/*   4 */ short int timer;
	/*   6 */ short int joint;
	/*   8 */ int color;
	/*   c */ int pad;
};

struct Part090 {
	/*   0 */ struct vec4 vel;
};

struct Part091 {
	/*   0 */ struct vec4 vel;
	/*  10 */ int beginRGBA;
	/*  14 */ int endRGBA;
	/*  18 */ short int lifeSpan;
	/*  1a */ short int master;
	/*  1c */ float maxScale;
};

struct Part071 {
	/*   0 */ int vel1;
	/*   4 */ int vel2;
	/*   8 */ int rgba1;
	/*   c */ int rgba2;
	/*  10 */ short int shootTimer;
	/*  12 */ short int slowTimer;
	/*  14 */ short int fadeTimer;
	/*  18 */ update78* p78Var;
};

struct Part079 {
	/*   0 */ struct vec4 ofs;
	/*  10 */ struct vec3 vel;
	/*  1c */ moby* pParent;
};

struct Part081 {
	/*   0 */ struct vec4 vel;
	/*  10 */ short int burst_time;
	/*  12 */ char type;
	/*  13 */ char spawn_rate;
	/*  14 */ char state;
	/*  15 */ char flame_time;
	/*  16 */ char alpha_top;
	/*  17 */ char trail_ndx;
	/*  18 */ moby* pParent;
	/*  1c */ float damageHp;
};

struct Part082 {
	/*   0 */ struct vec4 vel;
	/*  10 */ float rot;
	/*  14 */ short int timer;
	/*  16 */ short int posttimer;
	/*  18 */ char flags;
	/*  1c */ MobyInstance* parent;
};

struct Part083 {
	/*   0 */ struct vec4 vel;
	/*  10 */ float speed;
	/*  14 */ float scale;
	/*  18 */ short int lifetimeCounter;
	/*  1a */ short int rot;
	/*  1c */ float minZ;
};

struct Part084 {
	/*   0 */ moby* parent;
	/*   4 */ short int timer;
	/*   6 */ short int period;
	/*   8 */ float scale;
	/*   c */ int alpha;
};

struct Part085 {
	/*   0 */ struct vec3 vel;
	/*   c */ float gravity;
	/*  10 */ float scaleDelt;
	/*  14 */ char padC;
	/*  15 */ char rotSp;
	/*  16 */ short int alphaDelt;
	/*  18 */ float currAlpha;
	/*  1c */ void* pFunc;
};

struct Part086_fixed {
	/*   0 */ int* frameColors;
	/*   4 */ short int* frameScales;
	/*   8 */ short int* frameTimes;
	/*   c */ short int numFrames;
	/*  10 */ int lifeSpan;
	/*  14 */ float damping;
};

struct Part086 {
	/*   0 */ struct vec4 vel;
	/*  10 */ struct Part086_fixed* fixed;
	/*  14 */ short int currentFrame;
	/*  18 */ int rotSpeed;
};

struct Part089 {
	/*   0 */ moby* pMoby;
	/*   4 */ int jointIdx;
	/*   8 */ float pushOfs;
	/*   c */ char iUseNormal;
	/*   d */ char rotSp;
	/*   e */ char rotWithCam;
	/*   f */ char useSetAlpha;
	/*  10 */ struct vec4 posOfs;
};

struct Part092 {
	/*   0 */ float initScale;
	/*   4 */ float finalScale;
	/*   8 */ short int initTime;
	/*   a */ char rotSpeed;
	/*   b */ char initAlpha;
	/*   c */ struct vec3 vel;
	/*  18 */ int frameOfs;
	/*  1c */ short int alphaSub;
	/*  1e */ short int fastExpandFrames;
};

struct Part094 {
	/*   0 */ struct vec4 vel;
	/*  10 */ float speed;
	/*  14 */ float target;
	/*  18 */ short int rot;
	/*  1a */ short int pad;
	/*  1c */ int intPad;
};

struct Part096 {
	/*   0 */ struct vec4 vel;
	/*  10 */ int fadeTime;
	/*  14 */ int rotSpeed;
	/*  18 */ float endSize;
	/*  1c */ float grav;
};

struct Part097 {
	/*   0 */ struct vec3 vel;
	/*   c */ float gravity;
	/*  10 */ float scaleDelt;
	/*  14 */ char alphaDelt;
	/*  15 */ char rotSp;
	/*  16 */ short int padS;
	/*  18 */ int pad;
	/*  1c */ void* pFunc;
};

struct Part098 {
	/*   0 */ struct vec3 vel;
	/*   c */ float gravity;
	/*  10 */ float scaleDelta;
	/*  14 */ char alphaDelta;
	/*  15 */ char rotationDelta;
	/*  16 */ short int padding1;
	/*  18 */ int alphaTexture;
	/*  1c */ void* pUpdateFunction;
};

struct Part099 {
	/*   0 */ struct vec4 vel;
	/*  10 */ moby* pMoby;
	/*  14 */ short int fadeTime;
	/*  16 */ short int rotSpeed;
	/*  18 */ float endSize;
	/*  1c */ float driftOsc;
};

struct Part100 {
	/*   0 */ struct vec4 vel;
	/*  10 */ float height;
	/*  14 */ int rotSpeed;
	/*  18 */ float gravity;
	/*  1c */ struct vec4* refVel;
};

struct Part101_Fixed {
	/*   0 */ struct vec4 center;
	/*  10 */ float thetaMax;
};

struct Part101 {
	/*   0 */ struct Part101_Fixed* fixed;
	/*   4 */ float radius;
	/*   8 */ float theta;
	/*   c */ float angSpeed;
	/*  10 */ float scaleInc;
	/*  14 */ short int rotSpeed;
};

struct Part102 {
	/*   0 */ struct vec4 vel;
	/*  10 */ float estimatedGroundZ;
	/*  14 */ short int fadeTime;
	/*  16 */ short int rotSpeed;
	/*  18 */ float endSize;
	/*  1c */ float driftOsc;
};

struct Part104 {
	/*   0 */ struct vec4 vel;
	/*  10 */ int alpha;
	/*  14 */ int onTrain;
	/*  18 */ int pad[2];
};

struct Part105 {
	/*   0 */ struct vec3 vel;
	/*   c */ float gravity;
	/*  10 */ float scaleDelt;
	/*  14 */ char alphaDelt;
	/*  15 */ char rotSp;
	/*  16 */ short int padS;
	/*  18 */ int pad;
	/*  1c */ void* pFunc;
};

struct Part106 {
	/*   0 */ struct vec3 devDir;
	/*   c */ int endColor;
	/*  10 */ char rotSpeed;
	/*  11 */ char lifetime;
	/*  12 */ char startAlpha;
	/*  13 */ char state;
	/*  14 */ float startScale;
	/*  18 */ float endScale;
	/*  1c */ float maxDev;
};

struct Part107 {
	/*   0 */ struct vec3 devDir;
	/*   c */ int endColor;
	/*  10 */ char rotSpeed;
	/*  11 */ char lifetime;
	/*  12 */ char startAlpha;
	/*  13 */ char state;
	/*  14 */ char maxHeight;
	/*  15 */ char startSpeed;
	/*  16 */ char endSpeed;
	/*  17 */ char distTraveled;
	/*  18 */ float startScale;
	/*  1c */ float endScale;
};

struct Part108 {
	/*   0 */ struct vec3 devDir;
	/*   c */ char endShade_startAlpha;
	/*   d */ char rotSpeed_state;
	/*   e */ char lifetime;
	/*   f */ char maxDev;
	/*  10 */ struct vec3 perpDir;
	/*  1c */ char startSpeed;
	/*  1d */ char endSpeed;
	/*  1e */ char startScale;
	/*  1f */ char endScale;
};

struct Part109 {
	/*   0 */ struct vec4 vel;
	/*  10 */ int alpha;
	/*  14 */ int pad[3];
};

struct Part110 {
	/*   0 */ struct vec4 vel;
	/*  10 */ int startAlpha;
	/*  14 */ int startColor;
	/*  18 */ int lifeTime;
	/*  1c */ int pad;
};

struct Part112 {
	/*   0 */ struct vec3 vel;
	/*   c */ float gravity;
	/*  10 */ float scaleDelt;
	/*  14 */ char alphaDelt;
	/*  15 */ char rotSp;
	/*  16 */ short int padS;
	/*  18 */ int pad;
	/*  1c */ void* pFunc;
};

struct Part114 {
	/*   0 */ struct vec4a vel;
	/*  10 */ int rgba1;
	/*  14 */ int rgba2;
	/*  18 */ short int maxLife;
	/*  1a */ char postEffect;
	/*  1b */ char pad[5];
};

struct Part115Init {
	/*   0 */ struct vec4a pos;
	/*  10 */ struct vec4a travelDir;
	/*  20 */ char startR;
	/*  21 */ char startG;
	/*  22 */ char startB;
	/*  23 */ char startA;
	/*  24 */ char endR;
	/*  25 */ char endG;
	/*  26 */ char endB;
	/*  27 */ char endA;
	/*  28 */ int lifeTime;
	/*  2c */ float startSwirlRadius;
	/*  30 */ float endSwirlRadius;
	/*  34 */ float startScale;
	/*  38 */ float endScale;
	/*  3c */ float spinNum;
	/*  40 */ int blendMode;
	/*  44 */ short int texMajor;
	/*  46 */ short int texMinor;
	/*  48 */ short int SpriteRotationSpeed;
	/*  4a */ char startRot;
	/*  4b */ char startOffsetAng;
};

struct Part115 {
	/*   0 */ short int startColor;
	/*   2 */ short int endColor;
	/*   4 */ signed char spinNum;
	/*   5 */ char startOffsetAng;
	/*   6 */ char startRadius;
	/*   7 */ char endRadius;
	/*   8 */ short int travelDirx;
	/*   a */ short int travelDiry;
	/*   c */ short int travelDirz;
	/*   e */ short unsigned int startScale;
	/*  10 */ short int startingPosx;
	/*  12 */ short int startingPosy;
	/*  14 */ short int startingPosz;
	/*  16 */ short unsigned int endScale;
	/*  18 */ short int perpDirx;
	/*  1a */ short int perpDiry;
	/*  1c */ short int perpDirz;
	/*  1e */ short unsigned int lifetimeMax;
};

struct Part116 {
	/*   0 */ float speed;
	/*   4 */ float baseWidth;
	/*   8 */ float endScale;
	/*   c */ short int lifespan;
	/*   e */ short int pad;
};

struct Part126 {
	/*   0 */ struct vec4 vel;
	/*  10 */ float invTime;
	/*  14 */ float zHeight;
	/*  18 */ float fpad;
	/*  1c */ char stage;
	/*  1d */ char emitDust;
	/*  1e */ char cpad[2];
};

struct Part127 {
	/*   0 */ struct vec4 vel;
	/*  10 */ float scaleDelt;
	/*  14 */ char rotSp;
	/*  15 */ char padc;
	/*  16 */ short int grav;
	/*  18 */ int startRGBA;
	/*  1c */ int endRGBA;
};

struct Part128 {
	/*   0 */ struct vec4 vel;
	/*  10 */ float invTime;
	/*  14 */ float zHeight;
	/*  18 */ float fpad;
	/*  1c */ char stage;
	/*  1d */ char emitDust;
	/*  1e */ char cpad[2];
};

struct Part118 {
	/*   0 */ float speed;
	/*   4 */ float baseWidth;
	/*   8 */ float endScale;
	/*   c */ short int lifespan;
	/*   e */ short int pad;
};

struct Part119 {
	/*   0 */ float speed;
	/*   4 */ float baseWidth;
	/*   8 */ float endScale;
	/*   c */ short int lifespan;
	/*   e */ short int pad;
};

struct Part121 {
	/*   0 */ struct vec4 vel;
	/*  10 */ moby* pMoby;
	/*  14 */ short int fadeTime;
	/*  16 */ short int rotSpeed;
	/*  18 */ float endSize;
	/*  1c */ float driftOsc;
};

struct Part122 {
	/*   0 */ moby* pMoby;
	/*   4 */ float initScale;
	/*   8 */ float finalScale;
	/*   c */ short int fadeTime;
	/*   e */ short int lifeTime;
	/*  10 */ float pushOfs;
	/*  14 */ char jointIndex;
	/*  15 */ char rotSpeed;
	/*  16 */ char startAlpha;
	/*  17 */ char pushAxis;
	/*  18 */ int pad[2];
};

struct Part123 {
	/*   0 */ struct vec4 vel;
	/*  10 */ short int timer;
	/*  12 */ short int initTimer;
	/*  14 */ unsigned char stage;
	/*  15 */ unsigned char shootTime;
	/*  16 */ unsigned char expandTime;
	/*  17 */ unsigned char fadeTime;
	/*  18 */ float maxSize;
};

struct Part124 {
	/*   0 */ struct vec4 vel;
	/*  10 */ moby* pMoby;
	/*  14 */ float scaleStart;
	/*  18 */ float scaleEnd;
	/*  1c */ char alphaStart;
	/*  1d */ char damageHp;
	/*  1e */ char respawnProb;
	/*  1f */ char pad;
};

struct Part125 {
	/*   0 */ float scaleDelta;
	/*   4 */ int initRGBA;
	/*   8 */ int finalRGBA;
	/*   c */ float invTime;
};

struct update211 {
	/*   0 */ struct SubVars sVars;
	/*  50 */ struct TargetVars tVars;
	/*  e0 */ grindlink railPath;
	/*  e4 */ int railNode;
	/*  e8 */ float railSeg;
	/*  ec */ int railTimer;
	/*  f0 */ float railTimerInv;
	/*  f4 */ float railOfs;
	/*  f8 */ float railDeathDist;
	/*  fc */ int drawBall;
	/* 100 */ int railInitDelay;
	/* 104 */ int initPath;
	/* 108 */ int markers;
	/* 10c */ short int deathNode;
	/* 10e */ short int accelNode;
	/* 110 */ struct vec4 speed;
	/* 120 */ struct mtx4 claw;
	/* 160 */ struct vec4 ball;
	/* 170 */ int pointLights[2];
	/* 178 */ int dataIdx;
	/* 17c */ int dataIdx2;
	/* 180 */ struct Manipulator headManip;
	/* 1c0 */ struct Manipulator torsoManip;
	/* 200 */ struct Manipulator elbowManip;
	/* 240 */ int attackTimer;
	/* 244 */ int interpTimer;
	/* 248 */ int delayTimer;
	/* 24c */ int deathlink;
	/* 250 */ struct vec4 elbowQuat;
	/* 260 */ struct vec4 shootAim;
	/* 270 */ struct vec4 attackEnd;
	/* 280 */ struct vec4 antenna;
};

struct update78 {
	/*   0 */ struct vec4 closePt;
	/*  10 */ int generator;
	/*  14 */ int fadeTime;
	/*  18 */ int pad[2];
};

struct QDS_ParticleSwarm {
	/*   0 */ short int lifeTimeMax;
	/*   2 */ short int lifeTimeMin;
	/*   4 */ float spawnRate;
	/*   8 */ float spawnTotal;
	/*   c */ int texture;
	/*  10 */ int gs_alpha;
	/*  14 */ void* callbackFunc;
	/*  18 */ int padding_of_drowsy_spiritual_revival[2];
};

struct QDS_Particle {
	/*   0 */ moby* pParent;
	/*   4 */ struct QDS_ParticleSwarm* pSwarm;
	/*   8 */ short int lifetime;
	/*   a */ short int flags;
	/*   c */ short int diversity[2];
	/*  10 */ float velocities[4];
};

struct QDS_LinePart {
	/*   0 */ moby* pParent;
	/*   4 */ struct QDS_ParticleSwarm* pSwarm;
	/*   8 */ unsigned char lifetime;
	/*   9 */ unsigned char flags;
	/*   a */ short unsigned int diversity;
	/*   c */ float velocity;
};

struct Part029_Style {
	/*   0 */ float fWidth;
	/*   4 */ float fLengthScale;
	/*   8 */ float fSlowDownFactor;
	/*   c */ float fpad[1];
};

struct Part080 {
	/*   0 */ int type;
};

struct MapNameDataCell {
	/*   0 */ int city_name;
	/*   4 */ int planet_name;
};

struct HudState_State {
	/*   0 */ int state;
	/*   4 */ int counter;
	/*   8 */ bool trigger;
};

struct DataSourceWidget3d : /* 0 */ struct DataSource {
};

union SizeOfBiggestChannel {
	/*   0 */ unsigned char x1[4];
	/*   0 */ unsigned char x2[8];
	/*   0 */ unsigned char x3[12];
	/*   0 */ unsigned char x4[4];
	/*   0 */ unsigned char x5[4];
};

// warning: multiple differing types with the same name, only one recovered
enum NetStreamMediaAudioType {
	NetStreamMediaAudioTypeRAW = 0,
	NetStreamMediaAudioTypeCUSTOM = 1,
	NetStreamMediaAudioTypeGSM = 2,
	NetStreamMediaAudioTypeLPC = 3,
	NetStreamMediaAudioTypeLPC10 = 4,
	ExtraNetStreamMediaAudioType = 16777215
};

// warning: multiple differing types with the same name, only one recovered
struct NetStreamMediaAudioPlayData {
	/*   0 */ enum NetStreamMediaAudioType AudioType;
	/*   4 */ int ClientIndex;
	/*   8 */ unsigned char* pBuffer;
	/*   c */ unsigned int BufSize;
	/*  10 */ unsigned int BytesRead;
	/*  14 */ void* pUserData;
};

// warning: multiple differing types with the same name, only one recovered
enum NetCharacterEncodingType {
	NetCharacterEncodingNone = 0,
	NetCharacterEncodingISO8859_1 = 1,
	NetCharacterEncodingUTF_8 = 2,
	ExtraNetCharacterEncodingType = 16777215
};

// warning: multiple differing types with the same name, only one recovered
enum NetLanguageType {
	NetLanguageNone = 0,
	NetLanguageUSEnglish = 1,
	NetLanguageUKEnglish = 2,
	NetLanguageJapanese = 3,
	NetLanguageKorean = 4,
	NetLanguageItalian = 5,
	NetLanguageSpanish = 6,
	NetLanguageGerman = 7,
	NetLanguageFrench = 8,
	NetLanguageDutch = 9,
	NetLanguagePortuguese = 10,
	NetLanguageChinese = 11,
	NetLanguageTaiwanese = 12,
	NetLanguageFinnish = 13,
	NetLanguageNorwegian = 14,
	ExtraNetLanguageType = 16777215
};

// warning: multiple differing types with the same name, only one recovered
struct NetTypeSystemMessageData {
	/*   0 */ HDME ConnectionHandle;
	/*   4 */ unsigned char Severity;
	/*   8 */ enum NetCharacterEncodingType eEncodingType;
	/*   c */ enum NetLanguageType eLanguageType;
	/*  10 */ unsigned char bEndOfMessage;
	/*  12 */ short unsigned int nMessageLength;
	/*  14 */ unsigned char* pMessage;
	/*  18 */ void* pUserData;
};

struct MediusSystemMessageEntry {
	/*   0 */ bool bDirty;
	/*   4 */ struct NetTypeSystemMessageData systemMessage;
	/*  20 */ unsigned char systemMessageText[1024];
};

struct HudWidgetTex {
	/*   0 */ uint64 tex0;
	/*   8 */ short unsigned int tex_ofs;
	/*   a */ short unsigned int pal_ofs;
	/*   c */ short int u_log;
	/*   e */ short int v_log;
};

struct HudWidget {
	/*   0 */ short int vert_cnt;
	/*   2 */ short int poly_cnt;
	/*   4 */ short int joint_cnt;
	/*   6 */ short int tex_cnt;
	/*   8 */ short int frame_cnt;
	/*   a */ short int frame_size;
	/*   c */ float scale;
	/*  10 */ short int* verts;
	/*  14 */ char* polys;
	/*  18 */ struct HudWidgetTex* tex_defs;
	/*  1c */ void* tex_data;
	/*  20 */ void* frames;
	/*  24 */ int vert_format;
	/*  28 */ int rgba;
	/*  2c */ int pad;
};

struct IgeMemoryMap {
	/*   0 */ unsigned char widget3dDataBlock[101376];
	/* 18c00 */ unsigned char multiplayerMap[133120];
};

typedef /* function */ void** SelectResponse_f;
typedef /* function */ void** SelectValidate_f;
typedef /* function */ void** CursorValidate_f;
typedef /* function */ void** CursorSelect_f;
typedef /* function */ void** CursorDeselect_f;

struct MPTeamData_s {
	/*   0 */ int iTeam;
	/*   4 */ bool bLocal;
	/*   8 */ int iScore;
};

typedef int* FrameList;

enum ST_RewardType {
	ST_RWRD_BADGE = 0,
	ST_RWRD_GADGET = 1,
	ST_RWRD_BSC_MOD = 2,
	ST_RWRD_PFX_MOD = 3,
	ST_RWRD_WPN_MOD = 4,
	ST_RWRD_ARMOR = 5,
	ST_RWRD_LEVEL = 6,
	ST_RWRD_TOURNAMENT = 7,
	ST_RWRD_NONE = 8,
	ST_RWRD_TOTAL_TYPES = 9
};

struct ST_MissionRewardData {
	/*   0 */ enum ST_RewardType iType;
	/*   4 */ int iSubType;
	/*   8 */ int iIcon;
	/*   c */ unsigned int iColor;
	/*  10 */ int iPlate;
	/*  14 */ int iName;
};

struct GuiMain_PlayerData_s {
	/*   0 */ int iState;
	/*   4 */ int iNextState;
	/*   8 */ int iModeBits;
	/*   c */ int iScreenMode;
	/*  10 */ int iBaseFrame;
	/*  14 */ int iNoInput;
	/*  18 */ int iNoInputException;
	/*  1c */ bool bGadgetLock;
	/*  20 */ float fOffsX;
	/*  24 */ float fOffsY;
	/*  28 */ int iPushedCount;
	/*  2c */ int vPushedStates[10];
};

struct MPData_s {
	/*   0 */ bool bDirty;
	/*   4 */ int iTeams;
	/*   8 */ int iLocalTeams;
	/*   c */ struct MPTeamData_s vTeams[10];
	/*  84 */ struct MPTeamData_s* vSortedTeams[10];
	/*  ac */ struct MPTeamData_s* vLocalTeams[4];
	/*  bc */ int iMaxScore;
	/*  c0 */ int iTime;
};

struct DataSourceImageBuffer : /* 0 */ struct DataSource {
};

struct ConcreteLoadedImageBuffer : /* 0 */ struct DataSourceImageBuffer {
	/*   8 */ unsigned int tex0;
	/*   c */ void* m_memory_buffer;
	/*  10 */ void* m_decompressed_buffer;
	/*  14 */ fileblock* m_fileblock;
	/*  18 */ unsigned int m_sector;
	/*  1c */ HANDLE_ID m_last_id;
};

struct ConcretePreLoadedImageBuffer : /* 0 */ struct DataSourceImageBuffer {
	/*   8 */ unsigned int tex0;
	/*   c */ void* m_memory_buffer;
	/*  10 */ void* m_decompressed_buffer;
};

struct PIBData_s {
	/*   0 */ bool bInUse;
	/*   4 */ char* pBuffer;
	/*   8 */ int iBlocks;
	/*   c */ bool bPause;
};

struct PIBHandle_s {
	/*   0 */ struct PIBData_s* pPIB;
	/*   4 */ struct ConcretePreLoadedImageBuffer* pDSBuffer;
	/*   8 */ int iRefs;
	/*   c */ int iSector;
	/*  10 */ fileblock* pFileblock;
};

struct PendingLoads_s {
	/*   0 */ int iNext;
	/*   4 */ int iLast;
	/*   8 */ int iCount;
	/*   c */ struct PIBHandle_s* vLoads[8];
};

typedef /* function */ void** CommandCB_f;

struct MenuButton_s {
	/*   0 */ bool bEnabled;
	/*   4 */ char* zText;
	/*   8 */ CommandCB_f fcCommand;
};

typedef /* function */ void** PanelCommonEvent_f;
typedef /* function */ void** PanelPlayerEvent_f;

struct GuiHud_PanelData_s {
	/*   0 */ PanelCommonEvent_f fcInit;
	/*   4 */ PanelPlayerEvent_f fcShow;
	/*   8 */ PanelPlayerEvent_f fcHide;
};

struct GuiHud_CommonData_s {
	/*   0 */ int iShowCommon;
	/*   4 */ bool bShowBot;
	/*   8 */ int iFastTrans;
};

struct GuiHud_PlayerData_s {
	/*   0 */ bool bShown;
	/*   1 */ bool bExit;
	/*   4 */ int iPanels;
	/*   8 */ int iOpenPanels;
	/*   c */ int iClosingPanels;
};

struct GuiMenu_CommonData_s {
	/*   0 */ int iShown;
	/*   4 */ enum screenMode_t iScreenMode;
};

struct GuiMenu_PlayerData_s {
	/*   0 */ bool bShown;
	/*   1 */ bool bExit;
	/*   4 */ int iScreen;
	/*   8 */ int iNextScreen;
	/*   c */ int iPushedCount;
	/*  10 */ int vPushedScreens[10];
	/*  38 */ int iState;
};

typedef /* function */ void** ScreenCommonEvent_f;
typedef /* function */ void** ScreenPlayerEvent_f;

struct GuiMenu_Screen_s {
	/*   0 */ ScreenCommonEvent_f fcInit;
	/*   4 */ ScreenPlayerEvent_f fcReset;
	/*   8 */ ScreenPlayerEvent_f fcStart;
	/*   c */ ScreenPlayerEvent_f fcStop;
};

// warning: multiple differing types with the same name, only one recovered
struct iHeap {
	/*   0 */ __vtbl_ptr_type* $vf2122;
};

struct Lockable {
	/*   0 */ int mLockerId;
};

struct Engine : /* 0 */ struct Lockable {
	/*   4 */ EngineData* mp_data;
	static struct Engine m_instance;
};

struct EngineData {
	/*   0 */ struct Canvas* mp_Canvases[5];
	/*  14 */ int m_current_canvas;
	/*  18 */ struct iHeap* mp_heaps[5];
	/*  2c */ DataSource* mp_data_source[12];
	/*  5c */ /* function */ void** mp_postdraws[4];
	/*  6c */ int m_postdraw_counter;
	/*  70 */ /* function */ void** mp_predraws[4];
	/*  80 */ int m_predraw_counter;
	/*  84 */ char m_fps;
};

// warning: multiple differing types with the same name, only one recovered
struct WidgetText : /* 0 */ struct iFrame {
	static unsigned int id;
	/*  40 */ struct Channel2f Rotation;
	/*  48 */ int mFontTable;
	/*  4c */ char* pExternalStringMemory;
	/*  50 */ unsigned int font_FX;
	/*  54 */ unsigned char m_widget_text_control;
	/*  58 */ float mMaxWidth;
	/*  5c */ float mMinimumScale;
	/*  60 */ unsigned char pointSize;
	/*  64 */ int font_text;
	/*  68 */ float cached_scalex;
	/*  6c */ float cached_scaley;
};

struct WidgetHollowRectangle : /* 0 */ struct iFrame {
	static unsigned int id;
	/*  40 */ struct Channel2f m_insetsxy;
};

struct WidgetTextArea : /* 0 */ struct iFrame {
	static unsigned int id;
	/*  40 */ WidgetTextAreaData* mp_data;
	/*  44 */ bool m_bTextSizesDirty;
	/*  48 */ float m_fTextW;
	/*  4c */ float m_fTextH;
};

struct GuiSupport_Box_s {
	/*   0 */ float fLerp;
	/*   4 */ float fDX;
	/*   8 */ float fDY;
	/*   c */ float fDW;
	/*  10 */ float fDH;
	/*  14 */ float fX;
	/*  18 */ float fY;
	/*  1c */ float fW;
	/*  20 */ float fH;
};

struct xy_t {
	/*   0 */ float x;
	/*   4 */ float y;
};

struct GuiSupport_Cursor_s : /* 0 */ struct GuiSupport_Box_s {
	/*  24 */ bool bShown;
	/*  28 */ float fShown;
	/*  2c */ bool bActive;
	/*  30 */ float fActive;
};

struct GuiSupport_Frame_s : /* 0 */ struct GuiSupport_Box_s {
	/*  24 */ bool bShowUL;
	/*  28 */ float fShowUL;
	/*  2c */ bool bShowLR;
	/*  30 */ float fShowLR;
	/*  34 */ bool bShown;
	/*  38 */ float fShown;
};

struct GuiSupport_DFrame_s : /* 0 */ struct GuiSupport_Box_s {
	/*  24 */ bool bShown;
	/*  28 */ float fShown;
	/*  2c */ int iFlash;
};

struct GuiSupport_Dialog_s {
	/*   0 */ bool bShown;
	/*   4 */ float fShown;
	/*   8 */ int iCursor;
	/*   c */ int iFrame;
	/*  10 */ int iButtons;
	/*  14 */ int iSelection;
	/*  18 */ CommandCB_f fcCommand;
	/*  1c */ bool bIgnoreInput;
	/*  20 */ char* zText;
	/*  24 */ char* zButtonText[3];
	/*  30 */ bool bAlternateConfirm;
};

struct GuiSupport_Menu_s : /* 0 */ struct GuiSupport_Box_s {
	/*  24 */ bool bShown;
	/*  28 */ float fShown;
	/*  2c */ int iCursor;
	/*  30 */ int iButtons;
	/*  34 */ int iDisplayButtons;
	/*  38 */ float fButtonLerp;
	/*  3c */ struct MenuButton_s* vButtons;
	/*  40 */ CommandCB_f fcClose;
	/*  44 */ bool bHeader;
	/*  48 */ float fHeader;
	/*  4c */ char* zTitle;
	/*  50 */ struct DataSourceImageBuffer* pDSImage;
};

struct GuiSupport_CommonData_s {
	/*   0 */ bool bUber;
	/*   4 */ struct GuiSupport_Cursor_s vCursors[4];
	/*  d4 */ struct GuiSupport_Frame_s vFrames[2];
	/* 14c */ struct GuiSupport_Dialog_s sDialog;
	/* 180 */ struct GuiSupport_DFrame_s vDFrames[1];
};

struct GuiSupport_PlayerData_s {
	/*   0 */ struct GuiSupport_Cursor_s vCursors[4];
	/*  d0 */ struct GuiSupport_Frame_s vFrames[2];
	/* 148 */ struct GuiSupport_Dialog_s sDialog;
	/* 17c */ struct GuiSupport_Menu_s sMenu;
	/* 1d0 */ struct GuiSupport_DFrame_s vDFrames[1];
};

// warning: multiple differing types with the same name, only one recovered
struct CtlBox {
	/*   0 */ float m_fLerp;
	/*   4 */ float m_fX;
	/*   8 */ float m_fY;
	/*   c */ float m_fW;
	/*  10 */ float m_fH;
	/*  14 */ float m_fDX;
	/*  18 */ float m_fDY;
	/*  1c */ float m_fDW;
	/*  20 */ float m_fDH;
	/*  24 */ bool m_bShown;
	/*  28 */ float m_fShown;
	/*  2c */ HANDLE_ID m_iHandle;
	/*  30 */ __vtbl_ptr_type* $vf36;
};

typedef /* function */ void** CtlList_ItemCB_f;

struct Panel {
	/*   0 */ HANDLE_ID m_iIndex;
};

struct ListItemData {
	/*   0 */ bool bEnabled;
	/*   1 */ bool bDirty;
	/*   4 */ struct Panel* pItem;
	/*   8 */ void* pData;
};

struct CtlList_Item_s {
	/*   0 */ bool bEnabled;
	/*   4 */ struct Panel pnlItem;
	/*   8 */ void* pData;
	/*   c */ bool bDirty;
	/*   d */ bool bCreated;
	/*  10 */ float fOffset;
	/*  14 */ float fHalfSize;
};

struct CtlList : /* 0 */ struct CtlBox {
	/*  34 */ struct CtlList_Item_s* m_vItems;
	/*  38 */ CtlList_ItemCB_f m_fcUpdate;
	/*  3c */ int m_iSource;
	/*  40 */ float m_fTotalSize;
	/*  44 */ CursorValidate_f m_fcValidate;
	/*  48 */ int m_iBounds;
	/*  4c */ int m_iSize;
	/*  50 */ int m_iCount;
	/*  54 */ int m_iFocus;
	/*  58 */ int m_iUpdates;
	/*  5c */ float m_fIdealOffset;
	/*  60 */ float m_fOffset;
	/*  64 */ int m_iFirstVis;
	/*  68 */ int m_iLastVis;
};

struct BoundingRectangle {
	/*   0 */ float m_left;
	/*   4 */ float m_top;
	/*   8 */ float m_right;
	/*   c */ float m_bottom;
	/*  10 */ float m_translate_x;
	/*  14 */ float m_translate_y;
};

typedef IgeSmartPtr<iFrame> FrameSmartPtr;
typedef IgeSmartPtr<iFrame> tFrameList;

struct iFrameLayoutManager : /* 0 */ struct iObject {
	static unsigned int id;
};

typedef IgeSmartPtr<iFrameLayoutManager> FrameLayoutManagerSmartPtr;

struct IgeSmartPtr<iFrame> {
	/*   0 */ struct iFrame* m_p;
};

struct IgeSmartPtr<iFrameLayoutManager> {
	/*   0 */ struct iFrameLayoutManager* m_p;
};

struct tFrameContainerData {
	/*   0 */ tFrameList m_frame_list;
	/* 1a0 */ int focus_frame;
	/* 1a4 */ FrameLayoutManagerSmartPtr m_layout_manager;
	/* 1a8 */ int m_current_cell;
	/* 1ac */ unsigned char m_frame_container_control;
	/* 1b0 */ struct BoundingRectangle boundingRect;
};

struct FrameContainer : /* 0 */ struct iFrame {
	static unsigned int id;
	/*  40 */ struct tFrameContainerData mp_data;
};

struct bootwad {
	/*   0 */ struct datablock english;
	/*   8 */ struct datablock french;
	/*  10 */ struct datablock german;
	/*  18 */ struct datablock spanish;
	/*  20 */ struct datablock italian;
	/*  28 */ struct datablock hudwad_c[6];
	/*  58 */ struct datablock boot_plates[4];
	/*  78 */ struct datablock sram;
};

struct DataSourceIcon : /* 0 */ struct DataSource {
};

struct ConcreteIconDataSource : /* 0 */ struct DataSourceIcon {
	/*   8 */ unsigned int m_icon_frame;
};

struct ConcreteDataSourceWidget3d : /* 0 */ struct DataSourceWidget3d {
	/*   8 */ unsigned int tex0;
};

struct HudInfo_SpecialKillsData_s {
	/*   0 */ int iType;
	/*   4 */ float fTime;
};

struct HudInfo_MasterData_s {
	/*   0 */ int iShown;
	/*   4 */ unsigned int iWarnColor;
	/*   8 */ float fWarnLerp;
	/*   c */ float fWarnSize;
	/*  10 */ float fPunchLerp;
	/*  14 */ float fPunchZoom;
	/*  18 */ unsigned int iPunchColor;
	/*  1c */ int iTickerTime;
	/*  20 */ int iTickerVis;
	/*  24 */ int iUpdate;
};

struct HudInfo_PlayerData_s {
	/*   0 */ int iUpdate;
	/*   4 */ int lastScore;
	/*   8 */ int timeSinceScoreChange;
	/*   c */ int scoreChangeAmount;
	/*  10 */ char zPickupString[96];
	/*  70 */ char zTimerTime[32];
	/*  90 */ char zScorePoints[32];
	/*  b0 */ char zScoreMax[32];
	/*  d0 */ float fPromptLerp;
	/*  d4 */ float fPickupLerp;
	/*  d8 */ float fTimerLerp;
	/*  dc */ float fScoreLerp;
	/*  e0 */ float fScoreColorRot;
	/*  e4 */ int iTickerTime;
	/*  e8 */ int iTickerVis;
};

struct ArtInstanceHeader {
	/*   0 */ int lights;
	/*   4 */ int tie_classes;
	/*   8 */ int tie_insts;
	/*   c */ int tie_groups;
	/*  10 */ int shrub_classes;
	/*  14 */ int shrub_insts;
	/*  18 */ int shrub_groups;
	/*  1c */ int occl_clusters;
	/*  20 */ int tie_ambient_rgbas;
	/*  24 */ int pad[7];
};

struct HealthHud_PlayerData_s {
	/*   0 */ float fVHP;
	/*   4 */ float fDisplayVHP;
	/*   8 */ float fMaxVHP;
	/*   c */ float fHP;
	/*  10 */ float fDisplayHP;
	/*  14 */ float fMaxHP;
	/*  18 */ int iRegen;
	/*  1c */ float fRegenPulse;
	/*  20 */ float fXP;
	/*  24 */ float fDisplayXP;
	/*  28 */ bool bVehicle;
	/*  2c */ float fVehicle;
	/*  30 */ char zHP[8];
	/*  38 */ int iDelay;
	/*  3c */ int iVDelay;
	/*  40 */ int iState;
	/*  44 */ int bUpdate;
	/*  48 */ float fPulse;
	/*  4c */ float fOpen;
};

typedef float t_Mtx3FloatArray_;

struct HudAmmo_PlayerData_s {
	/*   0 */ struct HudState_State state;
	/*   c */ int iRegen;
	/*  10 */ float fRegenPulse;
	/*  14 */ float fAmmoPulse;
	/*  18 */ bool bFlashDaBuddin;
	/*  1c */ float fPagePulse;
	/*  20 */ bool bNoSwitch;
	/*  24 */ int iLockedMain;
	/*  28 */ int iSwappedMain;
	/*  2c */ char zPageTxt[2];
	/*  30 */ float fOpen;
	/*  34 */ float fInUse;
	/*  38 */ float vAlphas[9];
	/*  5c */ char zAmmo[6];
	/*  62 */ char zAmmoMax[6];
	/*  68 */ float fFadeTime;
	/*  6c */ float fFadeAlpha;
	/*  70 */ int iDisplayMaxAmmo;
	/*  74 */ int iAmmo;
	/*  78 */ int iDisplayAmmo;
	/*  7c */ float fLastXP;
	/*  80 */ int iCursor;
	/*  84 */ float cursorColorFactor;
	/*  88 */ float fAnimFrame;
	/*  8c */ int iQSPage;
	/*  90 */ float fAmmoLabelLength;
	/*  94 */ int iAmmoDigits;
	/*  98 */ int iUpdates;
	/*  9c */ float fGadgetLock;
	/*  a0 */ int iRecenterTime;
	/*  a4 */ enum eModPostFXType geLastSelectedMod;
	/*  a8 */ int iWeaponUpdateValue[3];
	/*  b4 */ bool bQSOpen;
};

struct rectangle {
	/*   0 */ float x;
	/*   4 */ float y;
	/*   8 */ float sx;
	/*   c */ float sy;
};

enum tNW_GameType {
	kGS_GameTypeSiege = 0,
	kGS_GameTypeCaptureTheFlag = 1,
	kGS_GameTypeDeathMatch = 2,
	kGS_GameTypeKingOfTheHill = 3,
	kGS_GameTypeJuggernaut = 4,
	kNumGsGameTypes = 5
};

struct RewardData {
	/*   0 */ char gadget;
	/*   1 */ char basic_mod;
	/*   2 */ char post_mod;
	/*   3 */ char weapon_mod;
	/*   4 */ char bot;
};

struct VendorData {
	/*   0 */ char gadget;
	/*   1 */ char bot1;
	/*   2 */ char bot2;
	/*   3 */ char wrench;
	/*   4 */ char pfxMod;
	/*   5 */ char replayGadget;
	/*   6 */ char replayWrench;
	/*   7 */ char replayBot;
};

struct MissionDef {
	/*   0 */ int level_id;
	/*   4 */ int map_id;
	/*   8 */ int name_tag;
	/*   c */ int desc_tag;
	/*  10 */ int obj_tag;
	/*  14 */ int mission_type;
	/*  18 */ int visibility_type;
	/*  1c */ int point_reward;
	/*  20 */ int bolt_reward;
	/*  24 */ int badge_reward;
	/*  28 */ int armor_level_reward;
	/*  2c */ struct RewardData preReward;
	/*  31 */ struct RewardData postReward;
	/*  38 */ struct UnlockData unlock;
	/*  50 */ struct VendorData preVendor;
	/*  58 */ struct VendorData postVendor;
};

struct _tuning {
	/*   0 */ int col;
	/*   4 */ int segment;
	/*   8 */ int subsegment;
};

struct Debug {
	/*   0 */ int scrn_dump;
	/*   4 */ int scrn_dump_size;
	/*   8 */ int scrn_dump_rate;
	/*   c */ int menu_draw;
	/*  10 */ int menu_row;
	/*  14 */ int menu_page;
	/*  18 */ int menu_newlevel;
	/*  1c */ int menu_update;
	/*  20 */ int menu_control;
	/*  24 */ int menu_profile;
	/*  28 */ int menu_cmdFreezeMode;
	/*  2c */ int menu_infiniteHealth;
	/*  30 */ int menu_near_clip;
	/*  34 */ int menu_coll_flags;
	/*  38 */ int menu_tv_mode;
	/*  3c */ int menu_widescreen;
	/*  40 */ int menu_screen;
	/*  44 */ int menu_scene;
	/*  48 */ int menu_chunk;
	/*  4c */ int menu_minor;
	/*  50 */ int mview_profile;
	/*  54 */ int mview_text;
	/*  58 */ int mview_screen;
	/*  5c */ int mview_lights;
	/*  60 */ int mview_collision;
	/*  64 */ int mview_ajoints;
	/*  68 */ int mview_ajointaxes;
	/*  6c */ int mview_cjoints;
	/*  70 */ int mview_cactive;
	/*  74 */ int mview_bsphere;
	/*  78 */ int mview_glow;
	/*  7c */ int mview_mode;
	/*  80 */ int mview_trans_steps;
	/*  84 */ int mview_bangles;
	/*  88 */ int mview_corn;
	/*  8c */ int mview_team_tex;
	/*  90 */ float cam_hSpeed;
	/*  94 */ float cam_vSpeed;
	/*  98 */ float cam_xRotSpeed;
	/*  9c */ float cam_yRotSpeed;
	/*  a0 */ float cam_zRotSpeed;
	/*  a4 */ float hero_rot;
	/*  a8 */ float hero_drot;
	/*  ac */ float hero_drad;
	/*  b0 */ float hero_dz;
	/*  b4 */ int collgrid_X;
	/*  b8 */ int collgrid_Y;
	/*  bc */ int collgrid_Z;
	/*  c0 */ int bitsPrev;
	/*  c4 */ int digitalBitsPrev;
	/*  c8 */ int truePadBits;
	/*  cc */ int render_select;
	/*  d0 */ int profile_scroll;
	/*  d4 */ int moby_index;
	/*  d8 */ int moby_scroll;
	/*  dc */ int moby_trans;
	/*  e0 */ int tie_index;
	/*  e4 */ int tie_scroll;
	/*  e8 */ int tie_lod_select;
	/*  ec */ float tie_near_dist;
	/*  f0 */ float tie_mid_dist;
	/*  f4 */ float tie_far_dist;
	/*  f8 */ int shrub_index;
	/*  fc */ int shrub_scroll;
	/* 100 */ int shrub_bboard_dist;
	/* 104 */ float shrub_draw_dist;
	/* 108 */ int occl_samp_loaded;
	/* 10c */ int occl_samp_cnt;
	/* 110 */ int occl_grid_loaded;
	/* 114 */ int occl_grid_cnt;
	/* 118 */ int occl_grid_x;
	/* 11c */ int occl_grid_y;
	/* 120 */ int occl_grid_z;
	/* 124 */ int occl_grid_menu_mode;
	/* 128 */ int occl_grid_menu_select;
	/* 12c */ int occl_grid_brush_id;
	/* 130 */ int occl_grid_plane_id;
	/* 134 */ int occl_grid_message_id;
	/* 138 */ int occl_grid_message_timer;
	/* 13c */ int occl_grid_cursor_timer;
	/* 140 */ int occl_grid_entry_time;
	/* 144 */ int occl_grid_changes[64];
	/* 244 */ int step_count;
	/* 248 */ int menu_actuator;
	/* 24c */ int menu_addStart;
	/* 250 */ int menu_addSample;
	/* 254 */ char menu2_col;
	/* 255 */ char menu2_row;
	/* 256 */ char step_this_frame;
	/* 258 */ struct _tuning tuning;
	/* 264 */ int font_initialize;
	/* 268 */ int font_drop;
	/* 26c */ int font_scale;
	/* 270 */ int mission;
	/* 274 */ int script_dbg_draw;
	/* 278 */ int test_parameter;
};

struct HudRadar_Blip_s {
	/*   0 */ short int iType;
	/*   4 */ int iTeam;
	/*   8 */ float fX;
	/*   c */ float fY;
	/*  10 */ float fRot;
	/*  14 */ moby* pMoby;
	/*  18 */ short int iLife;
};

struct HudRadar_BlipParams_s {
	/*   0 */ int iIcon;
	/*   4 */ char iTeam;
	/*   5 */ char iVariant;
	/*   8 */ float fSize;
	/*   c */ char iFlags;
};

struct HudRadar_CommonData_s {
	/*   0 */ int iShown;
	/*   4 */ int iMap;
	/*   8 */ float fAnimTime;
	/*   c */ int iUpdateCounter;
	/*  10 */ struct rectangle rcMap;
};

struct HudRadar_PlayerData_s {
	/*   0 */ struct HudState_State hsState;
	/*   c */ float fOpen;
	/*  10 */ float fOpenLerp;
	/*  14 */ float fObjectiveTextLerp;
	/*  18 */ int iMe;
	/*  1c */ int vSlots[64];
	/* 11c */ struct vec2 vMapCenter;
	/* 124 */ struct vec2 vScreenCenter;
	/* 12c */ float fL;
	/* 130 */ float fR;
	/* 134 */ float fT;
	/* 138 */ float fB;
	/* 13c */ float fMapRot;
	/* 140 */ float fZoom;
	/* 144 */ float fZoomSpeed;
	/* 148 */ int iTargetBlip;
	/* 14c */ int iUpdate;
	/* 150 */ float fPulse;
	/* 154 */ float fCursorPulse;
	/* 158 */ int iSelectType;
	/* 15c */ SelectResponse_f fcSelectCB;
	/* 160 */ SelectValidate_f fcValidateCB;
	/* 164 */ int iSelectFlags;
	/* 168 */ void* pSelectArgs;
	/* 16c */ int iCursor;
};

struct BoltHud_PlayerData_s {
	/*   0 */ int iState;
	/*   4 */ float fOpen;
	/*   8 */ char zCounter[16];
	/*  18 */ char zDelta[16];
	/*  28 */ int iBolts;
	/*  2c */ int iDisplayBolts;
	/*  30 */ int iDelta;
	/*  34 */ int iDeltaFadein;
	/*  38 */ int iDelay;
	/*  3c */ bool bCounting;
	/*  3d */ bool bShowMultiplier;
	/*  40 */ float fShowMultiplier;
	/*  44 */ float fPunchMultiplier;
	/*  48 */ char zMultiplier[4];
	/*  4c */ int iMultiplier;
};

struct SlotData_s {
	/*   0 */ int cap;
	/*   4 */ int wing;
	/*   8 */ int icon;
};

struct DPadCommand {
	/*   0 */ enum CommandTypes commandType;
	/*   4 */ moby* pMoby;
	/*   8 */ bool permanent;
};

struct BotHud_CommonData_s {
	/*   0 */ float fNameLerp;
	/*   4 */ int iUpdate;
	/*   8 */ int iScanTime;
};

struct BotHud_PlayerData_s {
	/*   0 */ int iState;
	/*   4 */ float fOpen;
	/*   8 */ float fNameLerp;
	/*   c */ int iUpdate;
	/*  10 */ float fLimitPulse;
	/*  14 */ float fFlashPulse[4];
	/*  24 */ int iFlashTime[4];
	/*  34 */ float fAttnPulse[4];
	/*  44 */ int iAttnTime[4];
	/*  54 */ int iFillMode;
	/*  58 */ float fLimit;
	/*  5c */ float fAlpha;
};

struct HudMPInfo_CommonData_s {
	/*   0 */ int iShown;
};

struct HudMPInfo_PlayerData_s {
	/*   0 */ char* vEvents[4];
	/*  10 */ int iEvents;
	/*  14 */ int iEventTimer;
	/*  18 */ char* vBadges[5];
	/*  2c */ int iBadges;
	/*  30 */ int iBadgeTimer;
};

struct HudMPVote_CommonData_s {
	/*   0 */ int iShown;
};

struct HudMPVote_PlayerData_s {
	/*   0 */ int iState;
	/*   4 */ int iUpdate;
	/*   8 */ char* vText[4];
	/*  18 */ int vIcons[4];
};

struct TeamData_s {
	/*   0 */ int con;
	/*   4 */ int field;
	/*   8 */ int score;
	/*   c */ int timer;
	/*  10 */ int upg[3];
};

struct NodeData_s {
	/*   0 */ int con;
	/*   4 */ int back;
	/*   8 */ int bar;
};

struct HudMPNode_CommonData_s {
	/*   0 */ int iShown;
	/*   4 */ int iState;
	/*   8 */ bool bUpdate;
	/*   c */ int iDisplayNodes;
	/*  10 */ int iNodes;
	/*  14 */ CommandCB_f fcUpdateNumNodes;
	/*  18 */ bool bFlip;
};

struct HudMPNode_TeamData_s {
	/*   0 */ int iTimer;
	/*   4 */ float fPulse;
	/*   8 */ char zScore[8];
	/*  10 */ char zTimer[12];
	/*  1c */ int iInProgress;
	/*  20 */ int iNew;
	/*  24 */ int vUpgrades[3];
	/*  30 */ int iNodes;
};

struct PWidgetData_s {
	/*   0 */ int con;
	/*   4 */ int tgt;
	/*   8 */ int bar;
	/*   c */ int bar2;
	/*  10 */ int score;
};

struct HudMPScore_CommonData_s {
	/*   0 */ int iShown;
	/*   4 */ int iTeamCount;
	/*   8 */ int iState;
	/*   c */ CommandCB_f fcUpdateNumTeams;
	/*  10 */ int iBarFillMode;
	/*  14 */ char zTimer[12];
	/*  20 */ char vzScores[6][4];
	/*  38 */ bool bUpdate;
};

struct ST_MissionData {
	/*   0 */ int bSuccess;
	/*   4 */ int iTime;
	/*   8 */ int iBolts;
	/*   c */ int vKills[2];
	/*  14 */ int iRewardBolts;
	/*  18 */ int iRewardPoints;
	/*  1c */ int iSkillPoints;
	/*  20 */ int iSkillPointMax;
	/*  24 */ int iRewards;
	/*  28 */ struct ST_MissionRewardData vRewards[2];
	/*  58 */ int iXP;
	/*  5c */ int vShotsThatHit[2];
	/*  64 */ int vShotsThatMissed[2];
	/*  6c */ int vDeaths[2];
};

typedef /* function */ void** StatFill_f;

struct Stat_s {
	/*   0 */ int iVal;
	/*   4 */ int iMax;
	/*   8 */ char zVal[18];
	/*  1c */ StatFill_f fcFill;
	/*  20 */ int iSound;
};

struct HudComplete_CommonData_s {
	/*   0 */ int iState;
	/*   4 */ int iShown;
	/*   8 */ struct ST_MissionData cdData;
	/*  7c */ int iDelay;
	/*  80 */ int iSubState;
	/*  84 */ int iStats;
	/*  88 */ struct Stat_s vStats[6];
	/* 160 */ bool bSound;
	/* 164 */ int iPrizes;
	/* 168 */ struct DataSourceImageBuffer* vPrizeBuffers[3];
	/* 174 */ struct DataSourceImageBuffer* pPrizeBuffer;
	/* 178 */ struct DataSourceImageBuffer* pBackBuffer;
};

struct StatData_s {
	/*   0 */ int lbl;
	/*   4 */ int fld;
};

struct PrizeData_s {
	/*   0 */ int lbl;
	/*   4 */ int icon;
	/*   8 */ int plate;
};

struct HudBoss_CommonData_s {
	/*   0 */ int iShown;
	/*   4 */ int iState;
	/*   8 */ float fHP;
	/*   c */ float fDisplayHP;
	/*  10 */ unsigned int iColor;
	/*  14 */ unsigned int iColor2;
	/*  18 */ int iIcon;
	/*  1c */ float fHideX;
	/*  20 */ float fShown;
	/*  24 */ bool bShown;
	/*  25 */ bool bFancy;
	/*  28 */ int iDelay;
	/*  2c */ bool bUpdate;
	/*  30 */ float fPulse;
	/*  34 */ int iFillMode;
};

struct MenuMain_PlayerData_s {
	/*   0 */ int iMainCursor;
	/*   4 */ int iOptionsCursor;
	/*   8 */ int iExtrasCursor;
	/*   c */ int iMediaCursor;
	/*  10 */ int iHelpCursor;
	/*  14 */ char vzSettings[64][6];
	/* 194 */ struct MenuButton_s vButtons[8];
	/* 1f4 */ int iButtons;
};

struct ScreenDef_s {
	/*   0 */ float fX;
	/*   4 */ float fY;
	/*   8 */ float fW;
	/*   c */ float fH;
};

struct Option_s {
	/*   0 */ bool bEnabled;
	/*   4 */ int tgt;
	/*   8 */ int name;
	/*   c */ int item;
	/*  10 */ CommandCB_f fcUpdate;
};

struct MenuControls_PlayerData_s {
	/*   0 */ int iState;
	/*   4 */ int iCursor;
	/*   8 */ struct DataSourceImageBuffer* pDSBannerImage;
	/*   c */ struct DataSourceImageBuffer* pDSFooter;
};

struct MenuControlView_PlayerData_s {
	/*   0 */ int iState;
	/*   4 */ int iFPM;
	/*   8 */ int iGameMode;
	/*   c */ struct DataSourceImageBuffer* pDSBannerImage;
};

struct MenuAudioVisual_PlayerData_s {
	/*   0 */ int iState;
	/*   4 */ int iCursor;
	/*   8 */ struct DataSourceImageBuffer* pDSPlateTop;
	/*   c */ struct DataSourceImageBuffer* pDSPlateBottom;
	/*  10 */ struct DataSourceImageBuffer* pDSFooter;
};

struct LevelDef {
	/*   0 */ int level;
	/*   4 */ int name_tag;
	/*   8 */ int title_tag;
	/*   c */ int desc_tag;
	/*  10 */ int first_mission;
	/*  14 */ int last_mission;
	/*  18 */ int save_img;
	/*  1c */ int mission_img;
	/*  20 */ struct UnlockData unlock;
};

// warning: multiple differing types with the same name, only one recovered
struct ListItem_s {
	/*   0 */ bool bLocked;
	/*   1 */ bool bComplete;
	/*   2 */ bool bNew;
	/*   4 */ int iLink;
	/*   8 */ int type;
	/*   c */ int headerTag;
};

struct MenuMission_PlayerData_s {
	/*   0 */ int iState;
	/*   4 */ int iUpdate;
	/*   8 */ int iCloseDelay;
	/*   c */ bool bSwitch;
	/*  10 */ struct DataSourceImageBuffer* pDSHeader;
	/*  14 */ struct DataSourceImageBuffer* pDSFooter;
	/*  18 */ struct CtlList_Item_s vMissions[50];
	/* 4c8 */ struct CtlList lstMissions;
};

struct MenuPlanet_PlayerData_s {
	/*   0 */ int iState;
	/*   4 */ int iUpdate;
	/*   8 */ bool bSwitch;
	/*   c */ int iCloseDelay;
	/*  10 */ float scaleFactor;
	/*  14 */ struct DataSourceImageBuffer* pDSBannerImage;
	/*  18 */ struct DataSourceImageBuffer* pDSPlanetImage;
	/*  1c */ struct DataSourceImageBuffer* pDSHeader;
	/*  20 */ struct DataSourceImageBuffer* pDSFooter;
	/*  24 */ struct CtlList_Item_s vPlanets[19];
	/* 1ec */ struct CtlList lstPlanets;
};

struct MenuWeapon_PlayerData_s {
	/*   0 */ int iState;
	/*   4 */ float fOpenLerp;
	/*   8 */ int iUpdate;
	/*   c */ int iWeaponCursor;
	/*  10 */ int iButtonCursor;
	/*  14 */ int iOmegaCursor;
	/*  18 */ int iPoolCursor;
	/*  1c */ char zAmmo[16];
	/*  2c */ char zDamage[8];
	/*  34 */ char zLevel[4];
	/*  38 */ char vzPool[4][8];
	/*  58 */ signed char vAlphas[10];
	/*  62 */ bool bPool;
	/*  64 */ float fEditPos;
	/*  68 */ struct DataSourceImageBuffer* pDSHeader;
	/*  6c */ struct DataSourceImageBuffer* pDSFooter;
	/*  70 */ struct DataSourceImageBuffer* pDSPlate;
};

struct WeaponIcon {
	/*   0 */ int icon;
	/*   4 */ int tgt;
	/*   8 */ int pmod;
};

struct ModItem_s {
	/*   0 */ int icon;
	/*   4 */ int tgt;
};

struct ButtonData_s {
	/*   0 */ int name;
	/*   4 */ int tgt;
};

struct ArenaGroup_s {
	/*   0 */ int headerTag;
	/*   4 */ int numMatches;
	/*   8 */ int arenaMatches[10];
	/*  30 */ int tourCompleteMission;
};

struct MenuArena_PlayerData_s {
	/*   0 */ int iState;
	/*   4 */ float fOpenLerp;
	/*   8 */ int iCloseDelay;
	/*   c */ bool bSwitch;
	/*  10 */ int iUpdate;
	/*  14 */ bool bMission;
	/*  15 */ char zLevel[64];
	/*  55 */ char zInfoPoints[12];
	/*  64 */ struct CtlList_Item_s vMissions[66];
	/* 694 */ struct ListItem_s vMissionItems[66];
	/* ab4 */ struct CtlList lstMissions;
	/* b20 */ struct DataSourceImageBuffer* pDSTop;
	/* b24 */ struct DataSourceImageBuffer* pDSBottom;
	/* b28 */ struct DataSourceImageBuffer* pDSFooter;
	/* b2c */ int iPlanetIndex;
};

struct VendorItem {
	/*   0 */ int type;
	/*   4 */ int id;
	/*   8 */ int cost;
	/*   c */ int description;
	/*  10 */ int uc_name;
	/*  14 */ int name;
	/*  18 */ int icon;
	/*  1c */ int image;
	/*  20 */ int affordable;
};

struct MenuVendor_CommonData_s {
	/*   0 */ int iState;
	/*   4 */ int iUpdate;
	/*   8 */ int iOpen;
	/*   c */ char vzPrices[16][64];
	/* 40c */ struct VendorItem viList[64];
	/* d0c */ struct CtlList_Item_s vItems[64];
	/* 130c */ struct CtlList lstItems;
	/* 1378 */ char zBolts[16];
	/* 1388 */ int iBolts;
	/* 138c */ struct DataSourceImageBuffer* pDSBannerImage;
	/* 1390 */ struct DataSourceImageBuffer* pDSHeader;
	/* 1394 */ struct DataSourceImageBuffer* pDSFooter;
	/* 1398 */ bool bBot;
	/* 139c */ int iSoundHandle;
	/* 13a0 */ bool bPurchase;
	/* 13a1 */ bool bPlayBoltsSound;
	/* 13a2 */ bool bGotMods;
};

struct GameSlot_s {
	/*   0 */ int txtBolts;
	/*   4 */ int txtTime;
	/*   8 */ int txtDate;
	/*   c */ int txtLevel;
	/*  10 */ int img;
	/*  14 */ int tgt;
	/*  18 */ int imgChallengeMode;
	/*  1c */ int txtEmpty;
};

struct GameSave_s {
	/*   0 */ char zBolts[64];
	/*  40 */ char zTime[64];
	/*  80 */ char zDate[64];
	/*  c0 */ char zLevel[64];
	/* 100 */ struct DataSourceImageBuffer* pDSImage;
};

struct MenuLoad_PlayerData_s {
	/*   0 */ int state;
	/*   4 */ int slot;
	/*   8 */ int update;
	/*   c */ char reset;
	/*  10 */ struct DataSourceImageBuffer* pDSTopPlate;
	/*  14 */ struct DataSourceImageBuffer* pDSFooter;
};

struct MenuEquipment_PlayerData_s {
	/*   0 */ int iState;
	/*   4 */ int iCursor;
	/*   8 */ int iUpdate;
	/*   c */ struct DataSourceImageBuffer* pDSRightPlate;
	/*  10 */ struct DataSourceImageBuffer* pDSLeftPlate;
	/*  14 */ struct DataSourceImageBuffer* pDSHeader;
	/*  18 */ struct DataSourceImageBuffer* pDSFooter;
	/*  1c */ struct DataSourceImageBuffer* pDSCOOPBlock;
	/*  20 */ moby* pRatchetMoby;
	/*  24 */ moby* pBotMoby;
	/*  28 */ moby* pFunkyHeadMoby;
	/*  2c */ int iCurrentHead;
	/*  30 */ int iCurrentPaintJob;
	/*  34 */ int iCurrentSkin;
	/*  38 */ int iHighestRatchetArmor;
	/*  3c */ bool bSwitchArmors;
	/*  40 */ int animations[4];
	/*  50 */ int animationLength;
	/*  54 */ int currentAnimation;
	/*  58 */ int animationCount;
	/*  5c */ int transitionLength;
	/*  60 */ bool bAlreadyRepeated;
};

struct MenuCinematics_PlayerData_s {
	/*   0 */ int iState;
	/*   4 */ int iCursor;
	/*   8 */ int iUpdate;
	/*   c */ struct DataSourceImageBuffer* pDSTopPlate;
	/*  10 */ struct DataSourceImageBuffer* pDSBottomPlate;
	/*  14 */ struct DataSourceImageBuffer* pDSFooter;
	/*  18 */ struct CtlList_Item_s vCinematics[21];
	/* 210 */ struct CtlList lstCinematics;
	/* 27c */ int movieToSetAsUnplayed;
};

struct ST_SkillPointInfo {
	/*   0 */ int name;
	/*   4 */ int desc;
	/*   8 */ int difficulty;
	/*   c */ int bolts;
	/*  10 */ int xp;
	/*  14 */ bool completed;
};

struct MenuSkills_PlayerData_s {
	/*   0 */ int iState;
	/*   4 */ int iCursor;
	/*   8 */ int iUpdate;
	/*   c */ struct DataSourceImageBuffer* pDSTopPlate;
	/*  10 */ struct DataSourceImageBuffer* pDSBottomPlate;
	/*  14 */ struct DataSourceImageBuffer* pDSFooter;
	/*  18 */ struct CtlList_Item_s vSkills[165];
	/* f90 */ struct CtlList lstSkills;
	/* ffc */ char zSkillsAcquired[64];
};

struct MenuHelplog_PlayerData_s {
	/*   0 */ int iState;
	/*   4 */ int iCursor;
	/*   8 */ int iUpdate;
	/*   c */ struct DataSourceImageBuffer* pDSTopPlate;
	/*  10 */ struct DataSourceImageBuffer* pDSFooter;
	/*  14 */ struct CtlList_Item_s vHelplog[100];
	/* 974 */ struct CtlList lstHelplog;
};

struct MenuCheats_PlayerData_s {
	/*   0 */ int iState;
	/*   4 */ int iCursor;
	/*   8 */ int iUpdate;
	/*   c */ struct DataSourceImageBuffer* pDSTopPlate;
	/*  10 */ struct DataSourceImageBuffer* pDSBottomPlate;
	/*  14 */ struct DataSourceImageBuffer* pDSFooter;
	/*  18 */ struct CtlList_Item_s vCheats[13];
	/* 150 */ struct CtlList lstCheats;
};

struct Cheat_s {
	/*   0 */ unsigned int cheat;
	/*   4 */ bool bLocked;
	/*   8 */ int numOpts;
	/*   c */ int iTitleID;
	/*  10 */ int iDescID;
	/*  14 */ int iPoints;
	/*  18 */ /* function */ void** fcUpdate;
	/*  1c */ int Opts[21];
	/*  70 */ struct CtlList_Item_s* item;
	/*  74 */ char pointStr[4];
};

struct MenuMoves_PlayerData_s {
	/*   0 */ int iState;
	/*   4 */ int iCursor;
	/*   8 */ int iUpdate;
	/*   c */ struct DataSourceImageBuffer* pDSTopPlate;
	/*  10 */ struct DataSourceImageBuffer* pDSBottomPlate;
	/*  14 */ struct DataSourceImageBuffer* pDSFooter;
	/*  18 */ struct CtlList_Item_s vMoves[9];
	/*  f0 */ struct CtlList lstMoves;
};

struct Difficulty_s {
	/*   0 */ int tgt;
	/*   4 */ int txtLabel;
	/*   8 */ int difficultyLevel;
	/*   c */ CommandCB_f fcSelect;
	/*  10 */ int descriptionID;
	/*  14 */ int labelID;
};

struct DialogDifficulty_PlayerData_s {
	/*   0 */ int iState;
	/*   4 */ int iCursor;
	/*   8 */ int iUpdate;
	/*   c */ CommandCB_f cbf;
	/*  10 */ struct DataSourceImageBuffer* pDSHeader;
	/*  14 */ struct DataSourceImageBuffer* pDSFooter;
};

enum ePAUSE_TYPE {
	PAUSE_TYPE_UNDEFINED = 0,
	PAUSE_TYPE_MENU = 1
};

enum ePAUSE_EXIT_REQUESTS {
	PAUSE_EXIT_TO_GAME_MODE_NORMAL = 0,
	PAUSE_EXIT_TO_GAME_LEVEL_CHANGE = 1,
	PAUSE_EXIT_TO_VENDOR = 2,
	PAUSE_EXIT_TO_PROGRESSIVE_SCAN_DIALOG = 3,
	PAUSE_EXIT_TO_VENDOR_RETURN = 4,
	PAUSE_EXIT_TO_RESTARTGAME = 5,
	PAUSE_EXIT_NO_HUD_UNHIDE = 6,
	PAUSE_EXIT_REQUESTS_MAX = 7
};

struct PIB_t {
	/*   0 */ char* ram;
	/*   4 */ int flags;
};

struct PauseModeData {
	/*   0 */ enum ePAUSE_TYPE m_pause_type;
	/*   4 */ char* pHeap0;
	/*   8 */ char* pHeap1;
	/*   c */ char* pGenericBuffer[4];
	/*  1c */ char* pHudBanks;
	/*  20 */ char* pCapture;
	/*  24 */ char* pPibs0;
	/*  28 */ char* pPibs1;
	/*  2c */ bool cached_canvas_layers_visibility[35];
	/*  4f */ bool m_reenting_pausemode;
	/*  50 */ bool m_redo_pausemodemap_on_entrance;
	/*  54 */ enum ePAUSE_EXIT_REQUESTS m_exit_request;
	/*  58 */ int m_pending_level;
	/*  5c */ int m_saveload_command;
	/*  60 */ int gs_base_original;
	/*  64 */ int saveScreenGrabForMovie;
};

typedef /* function */ void** CB_FUNC;

struct MenuBotVendor_CommonData_s {
	/*   0 */ int iState;
	/*   4 */ int iUpdate;
	/*   8 */ int iOpen;
	/*   c */ char vzPrices[16][64];
	/* 40c */ struct VendorItem viList[64];
	/* d0c */ struct CtlList_Item_s vItems[64];
	/* 130c */ struct CtlList lstItems;
	/* 1378 */ char zBolts[16];
	/* 1388 */ int iBolts;
	/* 138c */ struct DataSourceImageBuffer* pDSHeader;
	/* 1390 */ struct DataSourceImageBuffer* pDSFooter;
	/* 1394 */ struct DataSourceImageBuffer* pDSBackgroundImage;
	/* 1398 */ struct DataSourceImageBuffer* pDSUpperImage;
	/* 139c */ struct DataSourceImageBuffer* pDSLowerImage;
	/* 13a0 */ bool bBot;
	/* 13a4 */ int currentPaintJob;
	/* 13a8 */ int currentHead;
	/* 13ac */ int iSoundHandle;
	/* 13b0 */ bool bPurchase;
	/* 13b1 */ bool bPlayBoltsSound;
};

struct MenuStats_CommonData_s {
	/*   0 */ int iState;
	/*   4 */ int iUpdate;
	/*   8 */ struct DataSourceImageBuffer* pDSHeader;
	/*   c */ struct CtlList_Item_s vStats[50];
	/* 4bc */ struct CtlList lstStats;
};

struct EnemyItem_s {
	/*   0 */ int iMobyNumber;
	/*   4 */ int iEnemyCount;
	/*   8 */ int bDisplay;
};

struct RankOMeterInterface {
	/*   0 */ /* function */ void** QueueRankOMeterVO;
};

struct MenuLeaderboard_CommonData_s {
	/*   0 */ int iState;
	/*   4 */ int iUpdate;
	/*   8 */ struct DataSourceImageBuffer* pDSHeader;
	/*   c */ struct CtlList_Item_s vLeaderboard[50];
	/* 4bc */ struct CtlList lstLeaderboard;
};

struct RankingList_s {
	/*   0 */ char* zContestant;
	/*   4 */ int dreadpoints;
	/*   8 */ int iStatus;
};

struct MenuConceptArt_CommonData_s {
	/*   0 */ int iState;
	/*   4 */ int iCursor;
	/*   8 */ int iUpdate;
	/*   c */ struct DataSourceImageBuffer* pDSImage;
	/*  10 */ struct CtlList_Item_s vConceptArt[34];
	/* 340 */ struct CtlList lstConceptArt;
};

struct MenuCharacters_CommonData_s {
	/*   0 */ int iState;
	/*   4 */ int iCursor;
	/*   8 */ int iUpdate;
	/*   c */ struct DataSourceImageBuffer* pDSCharacterImage;
	/*  10 */ struct DataSourceImageBuffer* pDSFooterImage;
	/*  14 */ struct DataSourceImageBuffer* pDSTextBackgroundImage;
	/*  18 */ struct CtlList_Item_s vCharacters[6];
	/*  a8 */ struct CtlList lstCharacters;
};

struct MenuRobotCutaways_CommonData_s {
	/*   0 */ int iState;
	/*   4 */ int iCursor;
	/*   8 */ int iUpdate;
	/*   c */ struct CtlList_Item_s vRobotCutaways[7];
	/*  b4 */ struct CtlList lstRobotCutaways;
	/* 120 */ struct DataSourceImageBuffer* pDSImage;
};

struct MenuSkinScreen_CommonData_s {
	/*   0 */ int iState;
	/*   4 */ int iUpdate;
	/*   8 */ int iOpen;
	/*   c */ char vzPrices[16][64];
	/* 40c */ struct VendorItem viList[64];
	/* d0c */ struct CtlList_Item_s vItems[64];
	/* 130c */ struct CtlList lstItems;
	/* 1378 */ char zStars[16];
	/* 1388 */ int iStars;
	/* 138c */ struct DataSourceImageBuffer* pDSHeader;
	/* 1390 */ struct DataSourceImageBuffer* pDSFooter;
	/* 1394 */ struct DataSourceImageBuffer* pDSBackgroundImage;
	/* 1398 */ struct DataSourceImageBuffer* pDSUpperImage;
	/* 139c */ struct DataSourceImageBuffer* pDSLowerImage;
	/* 13a0 */ int iPlayerIndex;
	/* 13a4 */ bool bMobySwitch;
	/* 13a5 */ bool bMobySwitchComplete;
	/* 13a8 */ float fDelta;
	/* 13ac */ int iNumSteps;
	/* 13b0 */ int iCurrentStep;
	/* 13b4 */ int iArmorLevel;
	/* 13b8 */ int iArmorLevel2;
	/* 13bc */ bool bPurchase;
	/* 13bd */ bool bPlayStarsSound;
	/* 13c0 */ int animations[4];
	/* 13d0 */ int animationLength;
	/* 13d4 */ int currentAnimation;
	/* 13d8 */ int animationCount;
	/* 13dc */ int transitionLength;
	/* 13e0 */ bool bAlreadyRepeated;
};

struct List_Item_s {
	/*   0 */ bool bAvailable;
	/*   4 */ int iMobyNumber;
	/*   8 */ moby* pMoby;
	/*   c */ int iImageIndex;
	/*  10 */ char* zName;
	/*  14 */ char* zStrength;
	/*  18 */ char* zWeakness;
	/*  1c */ char* zAbility;
	/*  20 */ char* zElement;
};

struct MenuCardViewer_CommonData_s {
	/*   0 */ int iState;
	/*   4 */ int iUpdate;
	/*   8 */ int iOpen;
	/*   c */ struct CtlList_Item_s vCards[9];
	/*  e4 */ struct CtlList lstCards;
	/* 150 */ struct DataSourceImageBuffer* pDSHeader;
	/* 154 */ struct DataSourceImageBuffer* pDSFooter;
	/* 158 */ struct DataSourceImageBuffer* pDSBackgroundImage;
	/* 15c */ bool bBot;
	/* 15d */ bool bResetRotate;
	/* 160 */ float fRotDelta;
	/* 164 */ float fResetDelta;
};

struct SaveDataEntry {
	/*   0 */ int offset;
	/*   4 */ unsigned int data;
	/*   8 */ short unsigned int length;
	/*   a */ short int rt;
	/*   c */ short int UID;
	/*   e */ short int oClass;
};

struct SaveDataBlock {
	/*   0 */ int saveDataCnt;
	/*   4 */ struct SaveDataEntry saveData[64];
};

struct continueData {
	/*   0 */ int saveDataCnt;
	/*   4 */ struct SaveDataEntry saveData[64];
};

struct continuePoint {
	/*   0 */ int bValid;
	/*  10 */ struct vec4 heroPos;
	/*  20 */ struct vec4 heroRot;
	/*  30 */ int lights[2];
	/*  38 */ int reverb_depth;
	/*  3c */ char reverb_type;
	/*  3d */ char reverb_delay;
	/*  3e */ char reverb_feedback;
	/*  3f */ char level_FogR;
	/*  40 */ char level_FogG;
	/*  41 */ char level_FogB;
	/*  44 */ float level_FogNearDist;
	/*  48 */ float level_FogFarDist;
	/*  4c */ float level_FogNearIntensity;
	/*  50 */ float level_FogFarIntensity;
	/*  54 */ int critterMode;
	/*  58 */ moby* critterMoby;
	/*  5c */ int critterInitState;
	/*  60 */ struct continueData local;
	/* 464 */ int music_track;
	/* 468 */ int levelChunk;
};

struct SHADOW_MOBY {
	/*   0 */ int prim_cnt;
	/*   4 */ int clip;
	/*   8 */ float plane_ofs;
	/*   c */ float plane_range;
	/*  10 */ struct vec4 plane_normal;
	/*  20 */ struct vec4 dir;
};

struct ShrubInstPal {
	/*   0 */ int rgba[24];
};

struct ShrubBillboard {
	/*   0 */ float fade_dist;
	/*   4 */ float width;
	/*   8 */ float height;
	/*   c */ float z_ofs;
	/*  10 */ qword tex_1;
	/*  20 */ qword tex_0;
	/*  30 */ qword mip_1;
};

struct ShrubPacket {
	/*   0 */ void* data;
	/*   4 */ int size;
};

struct ShrubClass {
	/*   0 */ struct BSphere bsphere;
	/*  10 */ float mip_dist;
	/*  14 */ short int mode_bits;
	/*  16 */ short int instance_cnt;
	/*  18 */ struct ShrubInstance* instances;
	/*  1c */ struct ShrubBillboard* billboard;
	/*  20 */ float scale;
	/*  24 */ short int o_class;
	/*  26 */ short int s_class;
	/*  28 */ short int packet_cnt;
	/*  2a */ short int pad;
	/*  2c */ int* palette;
	/*  30 */ int pad_i;
	/*  34 */ short int drawn_cnt;
	/*  36 */ short int scis_cnt;
	/*  38 */ short int bboard_cnt;
	/*  3a */ short int pad_s[3];
	/*  40 */ struct ShrubPacket packets[0];
};

struct ShrubClassLookupClass {
};

struct sky_sprite {
	/*   0 */ char type;
	/*   1 */ char drawn;
	/*   2 */ char tex;
	/*   3 */ char gs_alpha;
	/*   4 */ int rgba;
	/*   8 */ float rot;
	/*   c */ int user;
	/*  10 */ struct vec4 pos;
};

struct sky_tex {
	/*   0 */ uint64 tex0;
	/*   8 */ short unsigned int tex_ofs;
	/*   a */ short unsigned int pal_ofs;
	/*   c */ short int u_log;
	/*   e */ short int v_log;
};

struct SKY {
	/*   0 */ int pad;
	/*   4 */ short int clear_screen;
	/*   6 */ short int shell_cnt;
	/*   8 */ short int sprite_cnt;
	/*   a */ short int sprite_max;
	/*   c */ short int tex_cnt;
	/*   e */ short int fx_cnt;
	/*  10 */ struct sky_tex* tex_defs;
	/*  14 */ void* tex_data;
	/*  18 */ char* fx_list;
	/*  1c */ struct sky_sprite* sprites;
	/*  20 */ struct sky_shell* shells[8];
};

typedef unsigned int LineEmitter;

struct lineEmitter {
	/*   0 */ short unsigned int uniqueId;
	/*   2 */ short int channels[3];
	/*   8 */ float radius;
	/*   c */ unsigned int flags;
	/*  10 */ unsigned int sound;
	/*  14 */ moby* pOwner;
	/*  18 */ int oclass;
	/*  20 */ struct vec4 p0;
	/*  30 */ struct vec4 p1;
	/*  40 */ char used;
	/*  41 */ unsigned char unused8[3];
	/*  44 */ unsigned int unused32[3];
};

struct StashBlock {
	/*   0 */ int ram;
	/*   4 */ int qwc;
	/*   8 */ char* comment;
	/*   c */ int pad;
};

struct _modulestatus {
	/*   0 */ char name[56];
	/*  38 */ u_short version;
	/*  3a */ u_short flags;
	/*  3c */ int id;
	/*  40 */ u_int entry_addr;
	/*  44 */ u_int gp_value;
	/*  48 */ u_int text_addr;
	/*  4c */ u_int text_size;
	/*  50 */ u_int data_size;
	/*  54 */ u_int bss_size;
	/*  58 */ unsigned int lreserve[2];
};

enum SM_stateRet_t {
	SM_SR_NO_CHANGE = 0,
	SM_SR_CHANGED = 1,
	SM_SR_REEVALUATE = 2,
	SM_SR_COMPLETE_REEVAL = 3,
	SM_SR_DONE = 4,
	SM_SR_DELETED = 5
};

typedef /* function */ void** SM_stateFunc_t;

struct SM_stateMachineInput_t {
	/*   0 */ int iNumStateTypes;
	/*   4 */ SM_stateFunc_t* pStateTypeFuncs;
	/*   8 */ int iNumStates;
	/*   c */ SM_stateFunc_t* pStateFuncs;
	/*  10 */ int iMaxNumEvaluations;
};

struct StateHistory {
	/*   0 */ short int index;
	/*   2 */ short int ringSize;
	/*   4 */ int pad[3];
	/*  10 */ short int states[16];
	/*  30 */ short int times[16];
};

struct STD_COLLOUTPUT {
	/*   0 */ struct vec4 ip;
	/*  10 */ struct vec4 push;
	/*  20 */ struct vec4 normal;
	/*  30 */ moby* pmoby;
};

struct STD_COLL_DAM_OUT {
	/*   0 */ struct vec4 ip;
	/*  10 */ struct vec4 momentum;
	/*  20 */ moby* pDamager;
	/*  24 */ int damageFlags;
	/*  28 */ unsigned char damageClass;
	/*  29 */ unsigned char damageStrength;
	/*  2a */ short unsigned int damageIndex;
	/*  2c */ float damageHp;
	/*  30 */ int flags;
	/*  34 */ float damageHeroHp;
	/*  38 */ moby* pMoby;
	/*  3c */ int shotUID;
};

struct StdPS2Input {
	/*   0 */ float analog[16];
	/*  40 */ int bits;
	/*  44 */ int bitsOn;
	/*  48 */ int bitsOff;
};

struct GMapTable_t {
	/*   0 */ int x;
	/*   4 */ int y;
	/*   8 */ int name_x;
	/*   c */ int name_y;
};

struct vbGadget_t {
	/*   0 */ int ammo_moby;
	/*   4 */ float scale_factor;
	/*   8 */ float y_adj;
	/*   c */ float z_adj;
	/*  10 */ int text_tag;
};

struct LevelItemPrice {
	/*   0 */ unsigned int purchase_price;
	/*   4 */ unsigned int discount_price;
};

struct _monitorGadgetAttributes {
	/*   0 */ float xpos_big;
	/*   4 */ float xpos_small;
	/*   8 */ float ypos;
	/*   c */ float zpos;
	/*  10 */ float xrot;
	/*  14 */ float yrot;
	/*  18 */ float xoff;
	/*  1c */ float yoff;
};

struct TBL_EnemySkinDef {
	/*   0 */ int oClass;
	/*   4 */ int newOClass;
};

struct TBL_EnemySkinInfo {
	/*   0 */ int def;
	/*   4 */ int level;
	/*   8 */ int mission;
};

struct WIND {
	/*   0 */ float power;
	/*   4 */ float flutter;
	/*   8 */ float dir_x;
	/*   c */ float dir_y;
	/*  10 */ float gust;
	/*  14 */ float radius_sqr;
	/*  18 */ float radius_sqr_inv;
	/*  1c */ float constp5;
};

struct HeroSkinShadowLookup {
	/*   0 */ void* data;
	/*   4 */ int size;
};

struct tChecksumConstants {
	/*   0 */ int kEnableChecksum;
	/*   4 */ int kEnableCDChecksum;
	/*   8 */ int kEnableChecksumMsgs;
	/*   c */ int kChecksumBlocks[192];
};

struct Tfrag {
	/*   0 */ struct BSphere bsphere;
	/*  10 */ void* data;
	/*  14 */ short unsigned int lod_2_ofs;
	/*  16 */ short unsigned int shared_ofs;
	/*  18 */ short unsigned int lod_1_ofs;
	/*  1a */ short unsigned int lod_0_ofs;
	/*  1c */ short unsigned int tex_ofs;
	/*  1e */ short unsigned int rgba_ofs;
	/*  20 */ char common_size;
	/*  21 */ char lod_2_size;
	/*  22 */ char lod_1_size;
	/*  23 */ char lod_0_size;
	/*  24 */ char lod_2_rgba_cnt;
	/*  25 */ char lod_1_rgba_cnt;
	/*  26 */ char lod_0_rgba_cnt;
	/*  27 */ char base_only;
	/*  28 */ char tex_cnt;
	/*  29 */ char rgba_size;
	/*  2a */ char rgba_verts_loc;
	/*  2b */ char occl_index_stash;
	/*  2c */ u8 msphere_cnt;
	/*  2d */ u8 flags;
	/*  2e */ short int msphere_ofs;
	/*  30 */ short int light_ofs;
	/*  32 */ short int light_vert_start_off;
	/*  34 */ char dir_lights_one;
	/*  35 */ char dir_lights_upd;
	/*  36 */ short unsigned int point_lights;
	/*  38 */ short int cube_ofs;
	/*  3a */ short int occl_index;
	/*  3c */ u8 vert_cnt;
	/*  3d */ char tri_cnt;
	/*  3e */ short int mip_dist;
};

struct TieClassLookupClass {
};

struct MobyUpdateProfile {
	/*   0 */ int m_time[18];
	/*  48 */ int m_calls[18];
	/*  90 */ int m_peak[18];
	/*  d8 */ int m_peakCalls[18];
	/* 120 */ int m_stack[20];
	/* 170 */ unsigned int m_lastTime;
	/* 174 */ short int m_stackTop;
};

// warning: multiple differing types with the same name, only one recovered
struct tD_CHCR {
	/*   0 */ unsigned int DIR;
	/*   0 */ unsigned int p0;
	/*   0 */ unsigned int MOD;
	/*   0 */ unsigned int ASP;
	/*   0 */ unsigned int TTE;
	/*   0 */ unsigned int TIE;
	/*   1 */ unsigned int STR;
	/*   1 */ unsigned int p1;
	/*   2 */ unsigned int TAG;
};

typedef struct _sceDmaTag sceDmaTag;

// warning: multiple differing types with the same name, only one recovered
struct sceDmaChan {
	/*   0 */ struct tD_CHCR chcr;
	/*   4 */ unsigned int p0[3];
	/*  10 */ void* madr;
	/*  14 */ unsigned int p1[3];
	/*  20 */ u_int qwc;
	/*  24 */ unsigned int p2[3];
	/*  30 */ sceDmaTag* tadr;
	/*  34 */ unsigned int p3[3];
	/*  40 */ void* as0;
	/*  44 */ unsigned int p4[3];
	/*  50 */ void* as1;
	/*  54 */ unsigned int p5[3];
	/*  60 */ unsigned int p6[4];
	/*  70 */ unsigned int p7[4];
	/*  80 */ void* sadr;
	/*  84 */ unsigned int p8[3];
};

struct WaterTileBuf {
	/*   0 */ float Height[16][16];
	/* 400 */ float HeightTop[16];
	/* 440 */ float HeightLeft[16];
	/* 480 */ float HeightBottom[16];
	/* 4c0 */ float HeightRight[16];
	/* 500 */ float HeightBottom2[16];
	/* 540 */ float HeightRight2[16];
	/* 580 */ float HeightCorner[6];
	/* 598 */ float pad2[10];
};

struct WaterTile {
	/*   0 */ float TilePosX;
	/*   4 */ float TilePosY;
	/*   8 */ float TilePosZ;
	/*   c */ unsigned char TileLinkTop;
	/*   d */ unsigned char TileLinkLeft;
	/*   e */ unsigned char TileLinkBottom;
	/*   f */ unsigned char TileLinkRight;
	/*  10 */ unsigned char TileLinkTopLeft;
	/*  11 */ unsigned char TileLinkTopRight;
	/*  12 */ unsigned char TileLinkBottomLeft;
	/*  13 */ unsigned char TileLinkBottomRight;
	/*  14 */ unsigned int tex0;
	/*  18 */ unsigned int tex1;
	/*  1c */ unsigned char alpha0;
	/*  1d */ unsigned char alpha1;
	/*  1e */ short unsigned int mask;
	/*  20 */ float s;
	/*  24 */ float t;
	/*  28 */ float ds;
	/*  2c */ float dt;
	/*  30 */ float rot_a;
	/*  34 */ float rot_b;
	/*  38 */ float rot_da;
	/*  3c */ float rot_db;
	/*  40 */ float wig_size;
	/*  44 */ int flatedgemask;
	/*  48 */ int frozen;
	/*  4c */ float fadeFactor;
	/*  50 */ struct WaterTileBuf buf[3];
};

struct WaterTileBox {
	/*   0 */ int min_x;
	/*   4 */ int min_y;
	/*   8 */ int min_z;
	/*   c */ short unsigned int size_x;
	/*   e */ short unsigned int size_y;
};

struct WaterTileConst {
	/*   0 */ float TileSizeX;
	/*   4 */ float TileSizeY;
	/*   8 */ float TileOffsetX;
	/*   c */ float TileOffsetY;
	/*  10 */ float TileGridSizeX;
	/*  14 */ float TileGridSizeY;
	/*  18 */ float texScale;
	/*  1c */ float MinHeight;
	/*  20 */ float waveInc;
	/*  24 */ float pad0;
	/*  28 */ unsigned int tex0;
	/*  2c */ unsigned int tex1;
	/*  30 */ float lightdir[3];
	/*  3c */ unsigned char alpha0;
	/*  3d */ unsigned char alpha1;
	/*  3e */ unsigned char pad[2];
};

struct RunningWater {
	/*   0 */ float* XYZZs;
	/*   4 */ float* STs;
	/*   8 */ float* BoundSphere;
	/*   c */ int verts;
	/*  10 */ float Inc1;
	/*  14 */ float Inc2;
	/*  18 */ float WaveTurbulence;
	/*  1c */ int Inc;
	/*  20 */ float FlowDir1[2];
	/*  28 */ float FlowDir2[2];
	/*  30 */ unsigned int BaseColor;
	/*  34 */ unsigned int tex0;
	/*  38 */ unsigned int tex1;
	/*  3c */ unsigned char alpha0;
	/*  3d */ unsigned char alpha1;
	/*  3e */ unsigned char pad1[2];
	/*  40 */ float dx1;
	/*  44 */ float dy1;
	/*  48 */ float dx2;
	/*  4c */ float dy2;
	/*  50 */ unsigned int Counter;
	/*  54 */ unsigned int pad2[2];
	/*  5c */ float test;
};

struct OCEAN {
	/*   0 */ struct vec4 StartPos;
	/*  10 */ float TileXSize;
	/*  14 */ float TileYSize;
	/*  18 */ short int xsize;
	/*  1a */ short int ysize;
	/*  1c */ int* texbuf;
	/*  20 */ float FogNearDst;
	/*  24 */ float FogFarDst;
	/*  28 */ float FogNearInt;
	/*  2c */ float FogFarInt;
	/*  30 */ char FogColor[3];
	/*  33 */ char FrameRate;
	/*  34 */ int* rgbs;
	/*  38 */ char* occ_map;
	/*  3c */ short unsigned int texture;
	/*  3e */ unsigned char texturecount;
	/*  3f */ unsigned char alpha;
};

struct StripHeader {
	/*   0 */ struct BSphere Sphere;
	/*  10 */ float* vert;
	/*  14 */ float* st;
	/*  18 */ float* rgb;
	/*  1c */ int count;
};

struct ThermCollDataHeader {
	/*   0 */ int oClass;
	/*   4 */ int offset[2];
	/*   c */ int size;
};

struct TherminatorDataRef {
	/*   0 */ int maxTiles;
	/*   4 */ int curTileCount;
	/*   8 */ struct WaterTile* tiles;
	/*   c */ struct WaterTileBox* boundingBoxes;
	/*  10 */ short int* masks;
	/*  14 */ int* groupCounts;
	/*  18 */ int* collisionData;
	/*  1c */ struct ThermCollDataHeader* collisionDataHeader;
	/*  20 */ int* collClassCount;
	/*  24 */ int* collDataUsed;
	/*  28 */ MobyInstance* pMoby;
	/*  2c */ void* drawFunc;
	/*  30 */ void* registerDrawFunc;
	/*  34 */ int pad[3];
};

struct update4018 {
	/*   0 */ float highHeight;
	/*   4 */ float lowHeight;
	/*   8 */ float ang;
	/*   c */ float rate;
	/*  10 */ int waterTile;
	/*  14 */ char frozen;
	/*  15 */ char reqBalls;
	/*  16 */ short int freezeTimer;
	/*  18 */ int groupMaster;
	/*  1c */ int collDataIndex;
	/*  20 */ int swimArea;
	/*  24 */ int effectPath;
	/*  28 */ int drawCube;
	/*  2c */ float stickHeight;
	/*  30 */ float moveSpeed;
	/*  34 */ float reticuleDist;
	/*  38 */ int soundChannel;
	/*  3c */ int pad[1];
};

typedef struct update4018 ThermWaterVars;

struct WPN_VelOrientationCache {
	/*   0 */ struct vec4 curGravity;
	/*  10 */ float sphericalAccuracy;
	/*  14 */ float cylindricalAccuracy;
	/*  18 */ float magneticAccuracy;
	/*  1c */ MobyInstance* pParent;
};

struct WPN_JointManipCache {
	/*   0 */ struct Manipulator manip;
	/*  40 */ MobyInstance* pParent;
	/*  44 */ int pad[3];
};

struct WPN_TargetCache {
	/*   0 */ MobyInstance* pTarget;
	/*   4 */ MobyInstance* pParent;
	/*   8 */ int timer;
	/*   c */ int pad[1];
};

struct WPN_ActiveProjectileLimiter {
	/*   0 */ MobyInstance* pMoby[64];
	/* 100 */ int inList[64];
	/* 200 */ MobyInstance* pClosestMobys[8];
	/* 220 */ int numMobys;
	/* 224 */ int inUse;
	/* 228 */ int limit;
	/* 22c */ int pad;
};

struct WPN_RegisteredThermWater {
	/*   0 */ MobyInstance* pTherm;
	/*   4 */ float reticuleDist;
	/*   8 */ int pad[2];
};

struct WPN_GlobalTherminatorInfo {
	/*   0 */ struct WPN_RegisteredThermWater regTherm[64];
	/* 400 */ int numRegistered;
	/* 404 */ int closestToHero;
	/* 408 */ int pad[2];
};

struct WPN_BunkerClassRegistryData {
	/*   0 */ int oClass[64];
	/* 100 */ int numClasses;
	/* 104 */ int pad[3];
};

struct WPN_UpgradeModeVars {
	/*   0 */ short int state;
	/*   2 */ short int transTimer;
	/*   4 */ float transTimerInv;
	/*   8 */ short int weaponId;
	/*   a */ short int curLevel;
	/*   c */ char updateHero;
	/*   d */ char updateCamera;
	/*   e */ short int drawEnv;
	/*  10 */ struct vec4 heroPos;
	/*  20 */ struct vec4 heroRot;
	/*  30 */ char rot;
	/*  31 */ char aligned;
	/*  32 */ char bGlowUp;
	/*  33 */ char cpad[1];
	/*  34 */ short int scanTimer;
	/*  36 */ short int glowTimer;
	/*  38 */ float fStep[2];
	/*  40 */ unsigned char blackOverlayAlpha;
	/*  50 */ struct vec4 camSavedPos;
	/*  60 */ struct mtx3 camSaveduMtx;
	/*  90 */ struct vec4f camSavedRot;
	/*  a0 */ char doZoom;
	/*  a4 */ int weatherSavedState;
	/*  a8 */ moby* pGadget[4];
	/*  b8 */ moby* pReserveMoby[4];
	/*  c8 */ int savedFadeVolumes[2];
	/*  d0 */ float savedScreenFade;
};

struct M9787_HoloshieldCoverInterface_t {
	/*   0 */ /* function */ void** InitHoloshieldCover;
	/*   4 */ /* function */ void** TurnOffHoloshieldCover;
	/*   8 */ /* function */ void** TurnOnHoloshieldCover;
};

struct M9819_Interface_t {
	/*   0 */ /* function */ void** InitHoloShields;
	/*   4 */ /* function */ void** AddHoloShield;
	/*   8 */ /* function */ void** RemoveHoloShield;
	/*   c */ /* function */ void** TurnOnHoloShields;
	/*  10 */ /* function */ void** TurnOffHoloShields;
};

struct Widget2D {
	/*   0 */ short int* positions;
	/*   4 */ short int* uvs;
	/*   8 */ int* rgbas;
	/*   c */ char* polys;
	/*  10 */ short int vert_cnt;
	/*  12 */ short int prim_cnt;
	/*  14 */ char prim_type;
	/*  15 */ char flags;
	/*  16 */ short int frame_cnt;
	/*  18 */ int ipad[2];
};

typedef float PARAMETRIC_TIME;

// warning: multiple differing types with the same name, only one recovered
struct LinearMemoryAllocator {
	/*   0 */ void* mWhereItStarts;
	/*   4 */ void* mCurrentPtr;
	/*   8 */ unsigned int mMaxSize;
	/*   c */ char* mLabel;
};

struct FreeNode {
	/*   0 */ struct FreeNode* mpNext;
};

// warning: multiple differing types with the same name, only one recovered
struct ConstantBlockSizeMemoryManager {
	/*   0 */ unsigned char* mpStaticBlock;
	/*   4 */ unsigned int mHeapSize;
	/*   8 */ unsigned int mAllocSize;
	/*   c */ unsigned int mUsed;
	/*  10 */ unsigned int mCurrentlyAllocated;
	/*  14 */ struct FreeNode* mFreeList;
};

struct TimeLineData {
	/*   0 */ UINT numberOfKeyFramerDataStreams;
	/*   4 */ UINT uniqueId;
	/*   8 */ struct TimeLineData* pNextTimeLineData;
	/*   c */ struct TimeLineData* pPrevTimeLineData;
	/*  10 */ KeyFramerData* pFirstKeyFramerData;
	/*  14 */ TIME timeLineLength;
};

struct KeyFrameDataNode {
	/*   0 */ struct KeyFrameDataNode* pNextKeyFrameDataNode;
	/*   4 */ struct KeyFrameDataNode* pPrevKeyFrameDataNode;
	/*   8 */ PARAMETRIC_TIME keyTime;
	/*   c */ float x;
	/*  10 */ float y;
	/*  14 */ float z;
	/*  18 */ float w;
};

enum eInterpolationType {
	LINEAR = 0,
	SLERP = 1,
	DISCRETE = 2
};

struct KeyFramerData {
	/*   0 */ KeyFramerData* pNextKeyFramerData;
	/*   4 */ KeyFramerData* pFirstKeyFramerData;
	/*   8 */ UINT mUniqueId;
	/*   c */ struct KeyFrameDataNode* mpFirstKeyFrameDataNode;
	/*  10 */ UINT mNumberOfKeys;
	/*  14 */ enum eInterpolationType InterpolationType;
};

struct iInterpolator3f {
	/*   0 */ __vtbl_ptr_type* $vf10062;
};

struct KeyFrameDataParser : /* 0 */ struct iBehavior {
	/*   8 */ KeyFramerData* mKeyFrameData;
	/*   c */ PARAMETRIC_TIME mInitialParametricTime;
};

struct TestKeyFramer : /* 0 */ struct iBehavior {
	/*   8 */ int mTime;
	/*   c */ TIME mLength;
	/*  10 */ int mTimeDirection;
};

struct HermiteTimeEnvelope : /* 0 */ struct iBehavior {
	/*   8 */ float mM0;
	/*   c */ float mM1;
};

struct LinearInterpolator3f : /* 0 */ struct iInterpolator3f {
};

struct LinearColorInterpolator3f : /* 0 */ struct iInterpolator3f {
};

struct SimpleKeyFramer : /* 0 */ struct iBehavior {
	/*   8 */ float data[2][4];
	/*  28 */ struct Channel4f* mTimeChannel;
	/*  2c */ struct ConstantBlockSizeMemoryManager* mpChannelPoolManager;
};

enum eTVModes {
	kNTSC = 0,
	kPAL = 1,
	kTVMODES_MAX = 2
};

struct iGraphicsObject {
	/*   0 */ struct Channel4f* mPositionChannel;
	/*   4 */ struct Channel4f* mScaleChannel;
	/*   8 */ struct Channel4f* mRotationChannel;
	/*   c */ struct Channel4f* mGlobalColorChannel;
	/*  10 */ struct Channel4f* mVisibilityChannel;
	/*  14 */ bool mbExternalPositionChannel;
	/*  15 */ bool mbExternalScaleChannel;
	/*  16 */ bool mbExternalRotationChannel;
	/*  17 */ bool mbExternalGlobalColorChannel;
	/*  18 */ bool mbExternalVisibilityChannel;
	/*  1c */ char* pMyName;
	/*  20 */ struct ConstantBlockSizeMemoryManager* mpChannelPoolManager;
	/*  24 */ __vtbl_ptr_type* $vf9756;
};

struct Widget3D : /* 0 */ struct iGraphicsObject {
	/*  28 */ struct Channel4f* mTextureChannel;
	/*  2c */ struct Channel4f* mpAnimationFrameChannel;
	/*  30 */ unsigned int mGeometryPtr;
	/*  34 */ struct HudWidget* mpWidget3dData;
	/*  38 */ bool mbExternalTextureChannel;
	/*  39 */ bool mbExternalAnimationChannel;
	/*  3a */ bool mbEnableSplitScreenHack;
};

struct WidgetSprite : /* 0 */ struct iGraphicsObject {
	/*  28 */ struct Channel4f* mTextureChannel;
	/*  2c */ bool mbExternalTextureChannel;
};

enum eTextAlignment {
	kTEXT_ALIGN_LEFT = 0,
	kTEXT_ALIGN_CENTER = 1,
	kTEXT_ALIGN_RIGHT = 2,
	kTEXT_ALIGN_MAX = 3
};

struct WidgetSlider : /* 0 */ struct iGraphicsObject {
	/*  28 */ bool mHasOutline;
	/*  2c */ int mOutlineScale;
	/*  30 */ unsigned int mMaxScale;
	/*  34 */ unsigned int mMaxValue;
	/*  38 */ unsigned int mSliderEmptyColor;
};

struct packedWidgetTableEntry {
	/*   0 */ int id;
	/*   4 */ struct HudWidget* pWidget;
};

struct Rc2HudMoby {
	/*   0 */ MobyInstance _pause_mobys[2];
	/* 200 */ int _pause_palette_buffer[2048];
	/* 2200 */ int _pause_palette_locs[8];
	/* 2220 */ int _pause_palette_cnt;
};

struct sceDmaPacket {
	/*   0 */ u_int* pCurrent;
	/*   4 */ u_long128* pBase;
	/*   8 */ u_long128* pDmaTag;
	/*   c */ u_int pad03;
};

struct sceIpuDmaEnv {
	/*   0 */ u_int d4madr;
	/*   4 */ u_int d4tadr;
	/*   8 */ u_int d4qwc;
	/*   c */ u_int d4chcr;
	/*  10 */ u_int d3madr;
	/*  14 */ u_int d3qwc;
	/*  18 */ u_int d3chcr;
	/*  1c */ u_int ipubp;
	/*  20 */ u_int ipuctrl;
};

enum sceMpegStrType {
	sceMpegStrM2V = 0,
	sceMpegStrIPU = 1,
	sceMpegStrPCM = 2,
	sceMpegStrADPCM = 3,
	sceMpegStrDATA = 4
};

enum sceMpegCbType {
	sceMpegCbError = 0,
	sceMpegCbNodata = 1,
	sceMpegCbStopDMA = 2,
	sceMpegCbRestartDMA = 3,
	sceMpegCbBackground = 4,
	sceMpegCbTimeStamp = 5,
	sceMpegCbStr = 6
};

struct sceMpegCbDataStr {
	/*   0 */ enum sceMpegCbType type;
	/*   4 */ u_char* header;
	/*   8 */ u_char* data;
	/*   c */ u_int len;
	/*  10 */ long int pts;
	/*  18 */ long int dts;
};

struct sceMpeg {
	/*   0 */ int width;
	/*   4 */ int height;
	/*   8 */ int frameCount;
	/*  10 */ long int pts;
	/*  18 */ long int dts;
	/*  20 */ u_long flags;
	/*  28 */ long int pts2nd;
	/*  30 */ long int dts2nd;
	/*  38 */ u_long flags2nd;
	/*  40 */ void* sys;
};

struct TimeStamp {
	/*   0 */ long int pts;
	/*   8 */ long int dts;
	/*  10 */ int pos;
	/*  14 */ int len;
};

struct ViBuf {
	/*   0 */ u_long128* data;
	/*   4 */ u_long128* tag;
	/*   8 */ int n;
	/*   c */ int dmaStart;
	/*  10 */ int dmaN;
	/*  14 */ int readBytes;
	/*  18 */ int buffSize;
	/*  1c */ struct sceIpuDmaEnv env;
	/*  40 */ int sema;
	/*  44 */ int isActive;
	/*  48 */ long int totalBytes;
	/*  50 */ struct TimeStamp* ts;
	/*  54 */ int n_ts;
	/*  58 */ int count_ts;
	/*  5c */ int wt_ts;
};

struct VideoDec {
	/*   0 */ struct sceMpeg mpeg;
	/*  48 */ struct ViBuf vibuf;
	/*  a8 */ u_int state;
	/*  ac */ int sema;
	/*  b0 */ int hid_endimage;
	/*  b4 */ int hid_vblank;
};

struct ReadBuf {
	/*   0 */ unsigned char data[327680];
	/* 50000 */ int put;
	/* 50004 */ int count;
	/* 50008 */ int size;
};

struct VoData {
	/*   0 */ unsigned char v[851968];
};

struct VoTag {
	/*   0 */ int status;
	/*   4 */ int buffer;
	/*   8 */ int dummy[14];
	/*  40 */ unsigned int v[20416][2];
};

struct VoBuf {
	/*   0 */ struct VoData* data;
	/*   4 */ struct VoTag* tag;
	/*   8 */ int write;
	/*   c */ int count;
	/*  10 */ int size;
};

struct SpuStreamHeader {
	/*   0 */ char id[4];
	/*   4 */ int size;
	/*   8 */ int type;
	/*   c */ int rate;
	/*  10 */ int ch;
	/*  14 */ int interSize;
	/*  18 */ int loopStart;
	/*  1c */ int loopEnd;
};

struct SpuStreamBody {
	/*   0 */ char id[4];
	/*   4 */ int size;
};

struct _AudioDec {
	/*   0 */ int state;
	/*   4 */ enum sceMpegStrType type;
	/*   8 */ struct SpuStreamHeader sshd;
	/*  28 */ struct SpuStreamBody ssbd;
	/*  30 */ int hdrCount;
	/*  34 */ u_char* data;
	/*  38 */ int put;
	/*  3c */ int count;
	/*  40 */ int size;
	/*  44 */ int totalBytes;
	/*  48 */ int iopBuff;
	/*  4c */ int iopBuffSize;
	/*  50 */ int totalBytesSent;
	/*  54 */ int iopZero;
	/*  58 */ int iopLastPos;
	/*  5c */ int iopPausePos;
	/*  60 */ int spuLastPos;
	/*  64 */ int spuPausePos;
};

typedef struct _AudioDec AudioDec;

struct StrFile {
	/*   0 */ int size;
	/*   4 */ u_char* iopBuf;
	/*   8 */ int pos;
};

struct sceIpuRAW8 {
	/*   0 */ unsigned char y[256];
	/* 100 */ unsigned char cb[64];
	/* 140 */ unsigned char cr[64];
};

struct SemaParam {
	/*   0 */ int currentCount;
	/*   4 */ int maxCount;
	/*   8 */ int initCount;
	/*   c */ int numWaitThreads;
	/*  10 */ u_int attr;
	/*  14 */ u_int option;
};

union QWORD {
	/*   0 */ u_long128 q;
	/*   0 */ long unsigned int l[2];
	/*   0 */ unsigned int i[4];
	/*   0 */ short unsigned int s[8];
	/*   0 */ unsigned char c[16];
};

struct sceMpegCbDataError {
	/*   0 */ enum sceMpegCbType type;
	/*   4 */ char* errMessage;
};

struct sceMpegCbDataTimeStamp {
	/*   0 */ enum sceMpegCbType type;
	/*   8 */ long int pts;
	/*  10 */ long int dts;
};

union sceMpegCbData {
	/*   0 */ enum sceMpegCbType type;
	/*   0 */ struct sceMpegCbDataError error;
	/*   0 */ struct sceMpegCbDataTimeStamp ts;
	/*   0 */ struct sceMpegCbDataStr str;
};

typedef /* function */ void** sceMpegCallback;

struct dbg_menu {
	/*   0 */ char name[32];
	/*  20 */ struct dbg_command** commands;
	/*  24 */ char padding[32];
};

struct t_IopModuleEntry {
	/*   0 */ u16 m_Id;
	/*   4 */ u32 m_InfoStart;
	/*   8 */ u32 m_TextStart;
	/*   c */ u32 m_TextSize;
	/*  10 */ u32 m_DataSize;
	/*  14 */ u32 m_BssSize;
	/*  18 */ u32 m_Entry;
	/*  1c */ u32 m_Gp;
	/*  20 */ u16 m_Version;
	/*  22 */ u16 m_Flags;
	/*  24 */ u16 m_NewFlags;
	/*  26 */ char m_Name[64];
};

typedef /* function */ void** fnTransition_Pre;
typedef /* function */ void** fnTransition_Update;
typedef /* function */ void** fnTransition_PostUpdate;
typedef /* function */ void** fnTransition_Draw;
typedef /* function */ void** fnTransition_Post;

struct t_TransitionInfo {
	/*   0 */ int m_WadId;
	/*   4 */ fnTransition_Pre m_fnTransitionPre;
	/*   8 */ fnTransition_Update m_fnTransitionUpdate;
	/*   c */ fnTransition_PostUpdate m_fnTransitionPostUpdate;
	/*  10 */ fnTransition_Draw m_fnTransitionDraw;
	/*  14 */ fnTransition_Post m_fnTransitionPost;
};

struct t_Transition {
	/*   0 */ short int m_LevelFrom;
	/*   2 */ short int m_LevelTo;
	/*   4 */ int m_Id;
	/*   8 */ unsigned int m_Arg1;
	/*   c */ unsigned int m_Arg2;
};

struct SFXBlock {
	/*   0 */ int DataID;
	/*   4 */ int Version;
	/*   8 */ int Flags;
	/*   c */ int BlockID;
	/*  10 */ char BlockNum;
	/*  11 */ char pad1;
	/*  12 */ short int pad2;
	/*  14 */ short int pad3;
	/*  16 */ short int NumSounds;
	/*  18 */ short int NumGrains;
	/*  1a */ short int NumVAGs;
	/*  1c */ void* FirstSound;
	/*  20 */ void* FirstGrain;
	/*  24 */ void* VagsInSR;
	/*  28 */ int VagDataSize;
	/*  2c */ int SRAMAllocSize;
	/*  30 */ void* NextBlock;
	/*  34 */ void* BlockNames;
	/*  38 */ void* SFXUD;
};

struct t_TransitionHdr {
	/*   0 */ unsigned int m_Flags;
	/*   4 */ unsigned int m_GsRam_off;
	/*   8 */ unsigned int m_Main_off;
	/*   c */ unsigned int m_PlanetTex_off;
	/*  10 */ unsigned int m_NumPermGsTex;
	/*  14 */ unsigned int m_GsTexHeader_off;
	/*  18 */ unsigned int m_Tfrag_off;
	/*  1c */ unsigned int m_NumTfragPiffs;
	/*  20 */ unsigned int m_TfragPiffsHeader_off;
	/*  24 */ unsigned int m_Sky_off;
	/*  28 */ unsigned int m_NumMobyClasses;
	/*  2c */ unsigned int m_NumMobyInstances;
	/*  30 */ unsigned int m_MobyHeader_off;
	/*  34 */ unsigned int m_MobyInstancesHeader_off;
	/*  38 */ unsigned int m_NumMobyPiffs;
	/*  3c */ unsigned int m_MobyPiffsHeader_off;
	/*  40 */ unsigned int m_Particle_off;
	/*  44 */ unsigned int m_NumParticlePiffs;
	/*  48 */ unsigned int m_ParticlePiffsHeader_off;
	/*  4c */ unsigned int m_NumFxPiffs;
	/*  50 */ unsigned int m_FxPiffsHeader_off;
	/*  54 */ unsigned int m_ChromeTex;
	/*  58 */ unsigned int m_ChromePal;
	/*  5c */ unsigned int m_MainTex_off;
	/*  60 */ unsigned int m_ParticleTex_off;
	/*  64 */ unsigned int m_FxTex_off;
	/*  68 */ unsigned int m_NumMovies;
	/*  6c */ unsigned int m_Movie_offs[16];
	/*  ac */ unsigned int m_LevelSettings_off;
	/*  b0 */ unsigned int m_NumSounds;
	/*  b4 */ unsigned int m_Sounds_offs[16];
};

struct t_MobyInstanceHdr {
	/*   0 */ unsigned int m_Class;
	/*   4 */ float m_PosX;
	/*   8 */ float m_PosY;
	/*   c */ float m_PosZ;
	/*  10 */ float m_RotX;
	/*  14 */ float m_RotY;
	/*  18 */ float m_RotZ;
	/*  1c */ float m_Scale;
	/*  20 */ unsigned int m_Ambient;
	/*  24 */ unsigned int m_DirLights;
};

struct t_TransitionData_Undefined {
	/*   0 */ int m_Timer;
};

struct t_TransitionData_E3 {
	/*   0 */ unsigned char* m_pImage;
	/*   4 */ char m_Text[64];
	/*  44 */ char m_TextDots[7];
	/*  4c */ int m_Timer;
	/*  50 */ bool m_bUnloadedSounds;
};

struct t_TransitionData_Space {
	/*   0 */ void* m_pPlanetTex;
	/*   8 */ uint64 m_PlanetTex0;
	/*  10 */ char m_StrPlanetName[64];
	/*  50 */ bool m_bMovieDone;
	/*  51 */ bool m_bPlayingFinalAproach;
};

struct t_TransitionData_ShuttleInterior {
	/*   0 */ bool m_bMovieDone;
	/*   1 */ bool m_bPlayingFinalAproach;
};

struct dc_floatdata {
	/*   0 */ float* val;
	/*   4 */ float lower;
	/*   8 */ float upper;
	/*   c */ float step;
	/*  10 */ float scale;
};

struct SandStormParms_t {
	/*   0 */ float fWindMinScale[3];
	/*   c */ float fWindMaxScale[3];
	/*  18 */ char bWindBidirectional[4];
	/*  1c */ float fWindNormalizeSpeed;
	/*  20 */ float fWindChangeAccel;
	/*  24 */ float fWindChangeDecel;
	/*  28 */ float fWindChangeMaxRate;
	/*  2c */ short int iWindChangeMinTime;
	/*  2e */ short int iWindChangeMaxTime;
	/*  30 */ float fMaxCameraMove;
	/*  34 */ float fCameraMoveScale[2];
	/*  3c */ float fMaxCameraRotateMove;
	/*  40 */ float fCameraRotateMoveScale[2];
	/*  48 */ float fMaxCameraRotateRoll;
	/*  4c */ float fCameraRotateRollScale;
	/*  50 */ int iNumDistanceBlurs;
	/*  54 */ unsigned char cDepthOfFieldR;
	/*  55 */ unsigned char cDepthOfFieldG;
	/*  56 */ unsigned char cDepthOfFieldB;
	/*  57 */ unsigned char cDepthOfFieldA;
	/*  58 */ float fDepthOfFieldWaver;
	/*  5c */ float fDepthOfFieldWaverDecay;
	/*  60 */ short int iDepthOfFieldWaverTimer;
	/*  62 */ signed char iFullScreenBlurLayerPlacement;
	/*  63 */ unsigned char cFullScreenBlurR;
	/*  64 */ unsigned char cFullScreenBlurG;
	/*  65 */ unsigned char cFullScreenBlurB;
	/*  66 */ unsigned char cFullScreenBlurA;
	/*  67 */ char bFullScreenBlurAdditive;
	/*  68 */ char sandTexture[2];
	/*  6c */ float fTexReps[3][2];
	/*  84 */ float fMinTexReps[2];
	/*  8c */ char bLayerAdditive[2];
	/*  8e */ char bLayerUseDestAlpha[2];
	/*  90 */ int iLayerColor[2];
	/*  98 */ float fLayerScrollRate[3][2];
	/*  b0 */ float fLayerScrollScaleMult[3][2];
	/*  c8 */ float fSubLayerScrollMult[2][2];
	/*  d8 */ float fLayerZoomFadeStart[2];
	/*  e0 */ float fLayerZoomFadeEnd[2];
	/*  e8 */ float fSkewFactor[2];
	/*  f0 */ short int iLightningMinTime;
	/*  f2 */ short int iLightningMaxTime;
	/*  f4 */ short int iLightningFullEffectDelayMinTime;
	/*  f6 */ short int iLightningFullEffectDelayMaxTime;
	/*  f8 */ float fLightningReflashChance;
	/*  fc */ short int iLightningFullEffectReflashMinTime;
	/*  fe */ short int iLightningFullEffectReflashMaxTime;
	/* 100 */ short int iPartDensity;
	/* 104 */ float fPartFarDist;
	/* 108 */ int iPartColor;
	/* 10c */ float fPartMotionFade;
	/* 110 */ float fPartRadius;
	/* 114 */ float fPartFallSpeed;
	/* 118 */ float fPartFlurryAmplitude;
	/* 11c */ float fPartFlurryPeriod;
	/* 120 */ int iDoorwayClipPlane;
};

enum PE_EnvironmentEffectsType_e {
	PE_EE_DEFAULT = 0,
	PE_EE_SANDY = 1,
	PE_EE_SNOWY = 2,
	PE_EE_RAINY = 3,
	PE_EE_NUM_TYPES = 4
};

struct M8226_Interface_t {
	/*   0 */ /* function */ void** UpdateOutdoorStatus;
	/*   4 */ /* function */ void** IsHeroOutdoors;
	/*   8 */ /* function */ void** IsDoorwayTouchingCamera;
	/*   c */ /* function */ void** GetDoorwayTransitionFrac;
	/*  10 */ /* function */ void** DrawDoorwaysToZBuffer;
	/*  14 */ /* function */ void** DrawSingleDoorwayToZBuffer;
	/*  18 */ /* function */ void** GetNumDoorways;
	/*  1c */ /* function */ void** AreDoorwaysFacingCamera;
	/*  20 */ /* function */ void** AreDoorwaysBackFacingCamera;
	/*  24 */ /* function */ void** AreDoorwaysOutInOut;
	/*  28 */ /* function */ void** IsDoorwayDrawn;
	/*  2c */ /* function */ void** GetDoorwayTessilation;
	/*  30 */ /* function */ void** GetDoorwayVerts;
	/*  34 */ /* function */ void** GetOutInOutAlpha;
	/*  38 */ /* function */ void** IsDoorwayBehindAnotherDoorway;
	/*  3c */ /* function */ void** ViewClipDoorway;
	/*  40 */ /* function */ void** GetDoorwayClipPlane;
	/*  44 */ /* function */ void** CameraWasTeleported;
	/*  48 */ /* function */ void** MakeLightningStrike;
	/*  4c */ /* function */ void** MakeGroundRainParticles;
};

struct t_PostEffectsInfo {
	/*   0 */ int m_iPane;
	/*   4 */ int m_iFrustum;
	/*   8 */ int m_PrevScreenW;
	/*   c */ int m_PrevScreenH;
	/*  10 */ f32 m_PrevPane_sx;
	/*  14 */ f32 m_PrevPane_sy;
	/*  18 */ int m_ScreenW;
	/*  1c */ int m_ScreenH;
	/*  20 */ int m_ScreenW_log2;
	/*  24 */ int m_ScreenH_log2;
	/*  28 */ int m_ScreenW_d64;
	/*  2c */ int m_PaneW;
	/*  30 */ int m_PaneH;
	/*  34 */ int m_Pane_x1;
	/*  38 */ int m_Pane_y1;
	/*  3c */ int m_Pane_x2;
	/*  40 */ int m_Pane_y2;
	/*  44 */ f32 m_Pane_sx;
	/*  48 */ f32 m_Pane_sy;
};

struct TN_Info {
	/*   0 */ float heroDamageFactor;
	/*   4 */ float enemyDamageFactor;
	/*   8 */ float botThreatFactor;
	/*   c */ float crateHealthFactor;
	/*  10 */ float crateAmmoPercent;
	/*  14 */ float ammoFromEnemyFactor;
	/*  18 */ float speedFactor;
	/*  1c */ float accuracyFactor;
	/*  20 */ float vehicleDamageFactor;
};

struct TN_Data {
	/*   0 */ float killedHp;
	/*   4 */ struct TN_Info info[5];
};

struct SkillPointDef {
	/*   0 */ int skill_id;
	/*   4 */ int level_id;
	/*   8 */ int mission_id;
	/*   c */ int name_tag;
	/*  10 */ int desc_tag;
	/*  14 */ int skill_type;
	/*  18 */ int visibility_type;
	/*  1c */ int difficulty;
	/*  20 */ int xp_reward;
	/*  24 */ int bolt_reward;
	/*  28 */ struct RewardData reward;
};

enum ST_Vehicles {
	ST_VHCL_LANDSTALKER = 0,
	ST_VHCL_PUMA = 1,
	ST_VHCL_HOVERBIKE = 2,
	ST_VHCL_HOVERSHIP = 3,
	ST_VHCL_TOTAL_VEHICLES = 4
};

typedef int I32;

struct ConfigUtil_File {
	/*   0 */ char* m_data;
	/*   4 */ char* m_ptr;
	/*   8 */ U32 m_data_size;
	/*   c */ U32 m_pad;
};

struct ConfigUtil_OutputElement {
	/*   0 */ I32 m_bracket;
	/*   4 */ I32 m_word;
	/*   8 */ I32 m_valid_value;
	/*   c */ float m_value;
	/*  10 */ char* m_text;
	/*  14 */ I32 m_text_len;
	/*  18 */ char* m_subtext;
	/*  1c */ I32 m_subtext_len;
	/*  20 */ char* m_UID;
	/*  24 */ I32 m_UID_len;
};

struct ConfigUtil_Output {
	/*   0 */ struct ConfigUtil_OutputElement* m_elems;
	/*   4 */ U32 m_num_elems;
	/*   8 */ U32 m_max_elems;
	/*   c */ unsigned int m_pad[2];
};

struct ConfigUtil_CodexElement {
	/*   0 */ char m_word[56];
	/*  38 */ U32 m_length;
	/*  3c */ U32 m_word_val;
};

struct ConfigUtil_Codex {
	/*   0 */ struct ConfigUtil_CodexElement* m_elems;
	/*   4 */ U32 m_num_elems;
	/*   8 */ U32 m_max_elems;
	/*   c */ unsigned int m_pad[2];
};

struct StdTextPile {
	/*   0 */ char* name;
	/*   4 */ char* heap;
	/*   8 */ char* heap_end;
	/*   c */ I32 heap_size;
};

struct MathUtilities {
};

// warning: multiple differing types with the same name, only one recovered
enum NetConnectStatus {
	ConnectStatusClosed = 0,
	ConnectStatusDisconnected = 0,
	ConnectStatusOpen = 1,
	ConnectStatusPending = 2,
	ConnectStatusFailed = 3,
	ConnectStatusNeedDisconnect = 4,
	ConnectStatusDisconnecting = 5,
	ExtraConnectStaus = 16777215
};

// warning: multiple differing types with the same name, only one recovered
enum NetConnectFailureReason {
	ConnectFailureReasonNone = 0,
	ConnectFailureReasonError = 1,
	ConnectFailureReasonClientVer = 2,
	ConnectFailureReasonServerVer = 3,
	ConnectFailureReasonFull = 4,
	ConnectFailureReasonWorldID = 5,
	ConnectFailureReasonAuth = 6,
	ConnectFailureReasonEncryption = 7,
	ConnectFailureReasonAccessKey = 8,
	ConnectFailureReasonAuxUDPFailure = 9,
	ExtraConnectFailureReason = 16777215
};

// warning: multiple differing types with the same name, only one recovered
enum NetClientStatus {
	ClientStatusNone = 0,
	ClientStatusNotConnected = 1,
	ClientStatusConnected = 2,
	ClientStatusJoining = 3,
	ClientStatusJoined = 4,
	ClientStatusJoinedSessionMaster = 5,
	ExtraNetClientStatus = 16777215
};

// warning: multiple differing types with the same name, only one recovered
enum NetErrorCode {
	NetErrorNone = 0,
	NetErrorNotConnected = 1,
	NetErrorConnectionLost = 2,
	NetErrorConnectionFailed = 3,
	NetErrorClientRejected = 4,
	NetErrorDisconnectFailed = 5,
	NetErrorNewClient = 6,
	NetErrorBadSessionMaster = 7,
	NetErrorBadIndex = 8,
	NetErrorBadDataStreamChannel = 9,
	NetErrorBadPointer = 10,
	NetErrorObjectNotShared = 11,
	NetErrorBadPacketReceived = 12,
	NetErrorSendFailed = 13,
	NetErrorTimedOut = 14,
	NetErrorBadConnectionIndex = 15,
	NetErrorBadMode = 16,
	NetErrorDmeNotInitialized = 17,
	NetErrorInitFailed = 18,
	NetErrorNoFreeObject = 19,
	NetErrorOpenDataStreamFailed = 20,
	NetErrorClientNotValid = 21,
	NetErrorMemory = 22,
	NetErrorInvalidArg = 23,
	NetErrorMsgError = 24,
	NetErrorTooManyPendingEvents = 25,
	NetErrorUDPNotEnabled = 26,
	NetErrorUpdate = 27,
	NetErrorGameIsFull = 28,
	NetErrorHostGameFailed = 29,
	NetErrorUnknown = 30,
	NetErrorMsgTooLarge = 31,
	NetErrorSecurity = 32,
	NetErrorNotImplemented = 33,
	NetErrorBadServerVersion = 34,
	NetErrorCommError = 35,
	NetErrorBufferError = 36,
	NetErrorUDPError = 37,
	NetErrorSetDefaultsNotCalled = 38,
	NetErrorSizeofParamMismatch = 39,
	NetErrorDeprecated = 40,
	NetErrorStreamMedia = 41,
	NetErrorStreamMediaComm = 42,
	NetErrorMutex = 43,
	NetErrorServerError = 44,
	NetErrorHostnameError = 45,
	NetErrorLookupError = 46,
	NetErrorTimebaseError = 47,
	NetErrorTokenNotEnabled = 48,
	NetErrorTokenError = 49,
	NetErrorBadPort = 50,
	NetErrorBadConnectivityType = 51,
	ExtraNetErrorCode = 16777215
};

// warning: multiple differing types with the same name, only one recovered
enum NetDisconnectReason {
	NetDisconnectNone = 0,
	NetDisconnectNormal = 1,
	NetDisconnectConnectFail = 2,
	NetDisconnectStreamMediaFail = 3,
	NetDisconnectUpdateFail = 4,
	NetDisconnectInactivity = 5,
	NetDisconnectShutdown = 6,
	NetDisconnectMessageLengthMismatch = 7,
	NetDisconnectAppDefinedStart = 128,
	MaxDisconnectReason = 255,
	ExtraNetDisconnectReason = -1
};

// warning: multiple differing types with the same name, only one recovered
struct NetTypeConnectCallbackData {
	/*   0 */ HDME ConnectionHandle;
	/*   4 */ enum NetConnectStatus ConnectStatus;
	/*   8 */ enum NetConnectFailureReason FailureReason;
	/*   c */ enum NetErrorCode ErrorCode;
	/*  10 */ void* pUserData;
};

typedef /* function */ void** NetTypeConnectCallback;

// warning: multiple differing types with the same name, only one recovered
struct NetTypeClientConnectCallbackData {
	/*   0 */ HDME ConnectionHandle;
	/*   4 */ int ClientIndex;
	/*   8 */ char* ClientIpString;
	/*   c */ enum NetClientStatus ClientStatus;
	/*  10 */ int UserSpecified;
	/*  14 */ void* pUserData;
};

typedef /* function */ void** NetTypeClientConnectCallback;
typedef /* function */ void** NetTypePeerToPeerHostChangeCallback;
typedef /* function */ void** NetTypeTokenOwnershipNotifyCallback;

// warning: multiple differing types with the same name, only one recovered
struct NetTokenParams {
	/*   0 */ NetTypeTokenOwnershipNotifyCallback pfTokenOwnershipNotifyCallback;
	/*   4 */ void* pTokenOwnershipNotifyCallbackData;
	/*   8 */ int bUseToken;
};

typedef /* function */ void** NetTypeSystemStatusCallback;

// warning: multiple differing types with the same name, only one recovered
enum NetStreamMediaGridType {
	NetStreamMediaGridTypeRelay = 0,
	NetStreamMediaGridTypeDirect = 1,
	ExtraNetStreamMediaGridType = 16777215
};

typedef /* function */ void** NetTypeStreamMediaAudioRecordCallback;
typedef /* function */ void** NetTypeStreamMediaAudioPlayCallback;

// warning: multiple differing types with the same name, only one recovered
struct NetAudioDataCharacteristics {
	/*   0 */ int nChannelsIn;
	/*   4 */ int nBitsPerSampleIn;
	/*   8 */ int nSampleRateIn;
	/*   c */ int nChannelsOut;
	/*  10 */ int nBitsPerSampleOut;
	/*  14 */ int nSampleRateOut;
};

// warning: multiple differing types with the same name, only one recovered
struct NetColorArray {
	/*   0 */ int cbSize;
	/*   4 */ int lineSize;
	/*   8 */ int xsize;
	/*   c */ int ysize;
	/*  10 */ char data[16];
};

typedef /* function */ void** NetTypeStreamMediaVideoRecordCallback;
typedef /* function */ void** NetTypeStreamMediaVideoPlayCallback;

// warning: multiple differing types with the same name, only one recovered
struct NetVideoDataCharacteristics {
	/*   0 */ int XSize;
	/*   4 */ int YSize;
};

typedef /* function */ void** NetTypeStreamMediaCustomVideoRecordCallback;
typedef /* function */ void** NetTypeStreamMediaCustomVideoPlayCallback;

// warning: multiple differing types with the same name, only one recovered
struct NetStreamMediaParams {
	/*   0 */ int bDefaultSet;
	/*   4 */ int bUseStreamMedia;
	/*   8 */ unsigned int NumChannels;
	/*   c */ unsigned int MaxIncomingAudioStreams;
	/*  10 */ unsigned int RecordNoDataTimeout;
	/*  14 */ unsigned int SendBufferSize;
	/*  18 */ unsigned int RecvBufferSize;
	/*  1c */ enum NetStreamMediaGridType GridType;
	/*  20 */ struct NetAudioDataCharacteristics AudioDataCharacteristics;
	/*  38 */ NetTypeStreamMediaAudioRecordCallback pfAudioRecordCallback;
	/*  3c */ void* pAudioRecordCallbackData;
	/*  40 */ NetTypeStreamMediaAudioPlayCallback pfAudioPlayCallback;
	/*  44 */ void* pAudioPlayCallbackData;
	/*  48 */ struct NetVideoDataCharacteristics VideoDataCharacteristics;
	/*  50 */ NetTypeStreamMediaVideoRecordCallback pfVideoRecordCallback;
	/*  54 */ void* pVideoRecordCallbackData;
	/*  58 */ NetTypeStreamMediaVideoPlayCallback pfVideoPlayCallback;
	/*  5c */ void* pVideoPlayCallbackData;
	/*  60 */ NetTypeStreamMediaCustomVideoRecordCallback pfCustomVideoRecordCallback;
	/*  64 */ void* pCustomVideoRecordCallbackData;
	/*  68 */ NetTypeStreamMediaCustomVideoPlayCallback pfCustomVideoPlayCallback;
	/*  6c */ void* pCustomVideoPlayCallbackData;
};

// warning: multiple differing types with the same name, only one recovered
struct NetConnectInParams {
	/*   0 */ int bDefaultSet;
	/*   4 */ int MaxClients;
	/*   8 */ struct NetConnectionInfo ConnectionInfo;
	/*  a4 */ NetTypeConnectCallback pfLocalConnectCallback;
	/*  a8 */ void* pLocalConnectCallbackData;
	/*  ac */ NetTypeConnectCallback pfLocalDisconnectCallback;
	/*  b0 */ void* pLocalDisconnectCallbackData;
	/*  b4 */ NetTypeClientConnectCallback pfRemoteClientConnectCallback;
	/*  b8 */ void* pRemoteClientConnectCallbackData;
	/*  bc */ NetTypeClientConnectCallback pfRemoteClientDisconnectCallback;
	/*  c0 */ void* pRemoteClientDisconnectCallbackData;
	/*  c4 */ NetTypePeerToPeerHostChangeCallback pfPeerToPeerHostChangeCallback;
	/*  c8 */ void* pHostChangeCallbackData;
	/*  cc */ NetTypeSystemStatusCallback pfSystemStatusCallback;
	/*  d0 */ void* pSystemStatusCallbackData;
	/*  d4 */ struct NetStreamMediaParams StreamMediaParams;
	/* 144 */ int UserSpecified;
	/* 148 */ int AuxUDPBindPort;
	/* 14c */ struct NetTokenParams TokenParams;
	/* 158 */ int bUseTimeBase;
	/* 15c */ unsigned int SendBufferSize;
	/* 160 */ unsigned int RecvBufferSize;
};

// warning: multiple differing types with the same name, only one recovered
struct NetDisconnectParams {
	/*   0 */ HDME ConnectionHandle;
	/*   4 */ enum NetDisconnectReason Reason;
	/*   8 */ NetTypeConnectCallback pfLocalDisconnectCallback;
	/*   c */ void* pUserData;
};

// warning: multiple differing types with the same name, only one recovered
struct NetLocalizationParams {
	/*   0 */ enum NetCharacterEncodingType CharacterEncodingType;
	/*   4 */ enum NetLanguageType LanguageType;
};

// warning: multiple differing types with the same name, only one recovered
enum EnumNetPlatformID {
	EnumNetPlatformID_Unknown = 0,
	EnumNetPlatformID_PS2 = 1,
	EnumNetPlatformID_PSP = 2,
	ExtraEnumNetPlatformID = 16777215
};

// warning: multiple differing types with the same name, only one recovered
struct NetDmeVersion {
	/*   0 */ unsigned int nVersion;
	/*   4 */ char szVersion[16];
};

// warning: multiple differing types with the same name, only one recovered
struct NetUpdateError {
	/*   0 */ HDME ConnectionHandle;
	/*   4 */ enum NetErrorCode NetError;
};

// warning: multiple differing types with the same name, only one recovered
struct NetUpdateConnErrors {
	/*   0 */ unsigned int SizeofNetUpdateErrors;
	/*   4 */ struct NetUpdateError aErrors[4];
	/*  24 */ enum NetErrorCode UDPError;
};

// warning: multiple differing types with the same name, only one recovered
enum NetSessionType {
	NetSessionTypeGame = 0,
	NetSessionTypePeer = 1,
	NetSessionTypeIntegratedServer = 2,
	ExtraNetSessionType = 16777215
};

// warning: multiple differing types with the same name, only one recovered
struct NetLANPeerDesc {
	/*   0 */ struct NetDmeVersion DmeVersion;
	/*  14 */ enum EnumNetPlatformID NetPlatformID;
	/*  18 */ int ApplicationID;
	/*  1c */ struct NetAddress PeerAddress;
	/*  34 */ struct NetLocalizationParams Localization;
	/*  3c */ unsigned char ApplicationName[72];
	/*  84 */ unsigned char UserName[32];
};

// warning: multiple differing types with the same name, only one recovered
struct NetData {
	/*   0 */ int nSize;
	/*   4 */ void* pData;
};

// warning: multiple differing types with the same name, only one recovered
struct NetConnectOutParams {
	/*   0 */ int bIsSet;
	/*   4 */ enum NetErrorCode ErrorCode;
	/*   8 */ HDME ConnectionHandle;
};

// warning: multiple differing types with the same name, only one recovered
struct NetHostPeerToPeerInParams {
	/*   0 */ int bDefaultSet;
	/*   4 */ NetTypeConnectCallback pfLocalConnectCallback;
	/*   8 */ void* pLocalConnectCallbackData;
	/*   c */ NetTypeConnectCallback pfLocalDisconnectCallback;
	/*  10 */ void* pLocalDisconnectCallbackData;
	/*  14 */ NetTypeClientConnectCallback pfRemoteClientConnectCallback;
	/*  18 */ void* pRemoteClientConnectCallbackData;
	/*  1c */ NetTypeClientConnectCallback pfRemoteClientDisconnectCallback;
	/*  20 */ void* pRemoteClientDisconnectCallbackData;
	/*  24 */ NetTypeSystemStatusCallback pfSystemStatusCallback;
	/*  28 */ void* pSystemStatusCallbackData;
	/*  2c */ unsigned int MaxClients;
	/*  30 */ struct NetStreamMediaParams StreamMediaParams;
	/*  a0 */ int UserSpecified;
	/*  a4 */ int bEnabDisconnectFwd;
	/*  a8 */ struct NetTokenParams TokenParams;
	/*  b4 */ int bUseTimeBase;
	/*  b8 */ unsigned int SendBufferSize;
	/*  bc */ unsigned int RecvBufferSize;
};

// warning: multiple differing types with the same name, only one recovered
struct NetHostPeerToPeerOutParams {
	/*   0 */ int bIsSet;
	/*   4 */ enum NetErrorCode ErrorCode;
	/*   8 */ HDME ConnectionHandle;
};

typedef /* function */ void** NetTypeLookupCallback;

// warning: multiple differing types with the same name, only one recovered
struct NetTypeLookupParams {
	/*   0 */ char szHostName[256];
	/* 100 */ char szServerIP[16];
	/* 110 */ NetTypeLookupCallback pfLookupResponse;
};

// warning: multiple differing types with the same name, only one recovered
struct NetLANFindCallbackDataArgs {
	/*   0 */ short int nNumClients;
	/*   2 */ short int nMaxNumClients;
	/*   4 */ enum NetSessionType SessionType;
	/*   8 */ struct NetLANPeerDesc PeerDesc;
	/*  ac */ struct NetData Details;
	/*  b4 */ void* pUserData;
};

typedef /* function */ void** NetLANFindCallback;

// warning: multiple differing types with the same name, only one recovered
struct NetLANFindInParams {
	/*   0 */ int bDefaultSet;
	/*   4 */ enum NetSessionType SessionType;
	/*   8 */ unsigned int Filter;
	/*   c */ struct NetData Details;
	/*  14 */ unsigned int UDPPort;
	/*  18 */ NetLANFindCallback pfnLANFindCallback;
	/*  1c */ void* pUserData;
};

// warning: multiple differing types with the same name, only one recovered
enum NetClientEventType {
	NetClientEventJoin = 0,
	NetClientEventLeave = 1,
	ExtraNetClientEventType = 16777215
};

// warning: multiple differing types with the same name, only one recovered
struct NetRemoteClientEventData {
	/*   0 */ enum NetClientEventType EventType;
	/*   4 */ HDME ConnectionHandle;
	/*   8 */ int ClientIndex;
	/*   c */ void* pUserData;
};

// warning: multiple differing types with the same name, only one recovered
struct NetCompletionData {
	/*   0 */ enum NetErrorCode Result;
	/*   4 */ void* pUserData;
};

// warning: multiple differing types with the same name, only one recovered
struct NetSMChangeData {
	/*   0 */ HDME ConnectionHandle;
	/*   4 */ int SMClientIndex;
	/*   8 */ void* pUserData;
};

// warning: multiple differing types with the same name, only one recovered
struct NetJoinOutParams {
	/*   0 */ int bIsSet;
	/*   4 */ enum NetErrorCode ErrorCode;
};

enum MGCL_ERROR_CODE {
	MGCL_SUCCESS = 0,
	MGCL_CONNECTION_ERROR = -1,
	MGCL_CONNECTION_FAILED = -2,
	MGCL_DISCONNECT_FAILED = -3,
	MGCL_NOT_CONNECTED = -4,
	MGCL_SEND_FAILED = -5,
	MGCL_INITIALIZATION_FAILED = -6,
	MGCL_SHUTDOWN_ERROR = -7,
	MGCL_NETWORK_ERROR = -8,
	MGCL_AUTHENTICATION_FAILED = -9,
	MGCL_SESSIONBEGIN_FAILED = -10,
	MGCL_SESSIONEND_FAILED = -11,
	MGCL_UNSUCCESSFUL = -12,
	MGCL_INVALID_ARG = -13,
	MGCL_NATRESOLVE_FAILED = -14,
	MGCL_GAME_NAME_EXISTS = -15,
	MGCL_WORLDID_INUSE = -16,
	MGCL_DME_ERROR = -17,
	MGCL_CALL_MGCL_CLOSE_BEFORE_REINITIALIZING = -18,
	MGCL_NUM_GAME_WORLDS_PER_LOBBY_WORLD_EXCEEDED = -19,
	ExtraMGCLStatusCode = 16777215
};

enum MGCL_GAME_HOST_TYPE {
	MGCLGameHostClientServer = 0,
	MGCLGameHostIntegratedServer = 1,
	MGCLGameHostPeerToPeer = 2,
	MGCLGameHostLANPlay = 3,
	MGCLGameHostClientServerAuxUDP = 4,
	ExtraMGCLGameHost = 16777215
};

struct MediusServerCreateGameOnMeRequest {
	/*   0 */ char MessageID[21];
	/*  15 */ char GameName[64];
	/*  55 */ char GameStats[256];
	/* 155 */ char GamePassword[32];
	/* 178 */ int ApplicationID;
	/* 17c */ int MaxClients;
	/* 180 */ int MinClients;
	/* 184 */ int GameLevel;
	/* 188 */ int PlayerSkillLevel;
	/* 18c */ int RulesSet;
	/* 190 */ int GenericField1;
	/* 194 */ int GenericField2;
	/* 198 */ int GenericField3;
	/* 19c */ int GenericField4;
	/* 1a0 */ int GenericField5;
	/* 1a4 */ int GenericField6;
	/* 1a8 */ int GenericField7;
	/* 1ac */ int GenericField8;
	/* 1b0 */ enum MGCL_GAME_HOST_TYPE GameHostType;
	/* 1b4 */ struct NetAddressList AddressList;
	/* 1e4 */ int WorldID;
	/* 1e8 */ int AccountID;
};

// warning: multiple differing types with the same name, only one recovered
enum MediusErrorCode {
	MediusErrorNone = 0,
	MediusErrorInitializing = -1,
	MediusErrorConnecting = -2,
	MediusErrorDisconnecting = -3,
	MediusErrorClosing = -4,
	MediusErrorSendingMessage = -5,
	MediusErrorFileNotFound = -6,
	MediusErrorDeviceNotFound = -7,
	MediusErrorDirectoryNotFound = -8,
	MediusErrorGeneral = -10,
	MediusErrorSessionInactive = -11,
	MediusErrorItemNotFound = -12,
	MediusErrorItemAlreadyExists = -13,
	MediusErrorNoResult = -14,
	MediusErrorNotInitialized = -15,
	MediusErrorNotConnected = -16,
	MediusErrorAlreadyConnected = -17,
	MediusErrorCallMediusCloseBeforeReinitializing = -18,
	MediusErrorCallMediusCloseBareBeforeReinitializing = -19,
	MediusErrorFeatureNotEnabled = -20,
	MediusErrorInvalidParameter = -21,
	MediusErrorOutOfMemory = -22,
	MediusErrorOutOfSlots = -23,
	MediusAPIExtraErrorCode = 16777215
};

// warning: multiple differing types with the same name, only one recovered
enum MediusBuddyAddType {
	AddSingle = 0,
	AddSymmetric = 1,
	ExtraMediusAddType = 16777215
};

// warning: multiple differing types with the same name, only one recovered
enum MediusGameHostType {
	MediusGameHostClientServer = 0,
	MediusGameHostIntegratedServer = 1,
	MediusGameHostPeerToPeer = 2,
	MediusGameHostLANPlay = 3,
	MediusGameHostClientServerAuxUDP = 4,
	ExtraMediusGameHost = 16777215
};

// warning: multiple differing types with the same name, only one recovered
enum MediusLadderType {
	MediusLadderTypePlayer = 0,
	MediusLadderTypeClan = 1,
	ExtraMediusLadderType = 16777215
};

// warning: multiple differing types with the same name, only one recovered
enum MediusWorldStatus {
	WorldInactive = 0,
	WorldStaging = 1,
	WorldActive = 2,
	WorldClosed = 3,
	WorldPendingCreation = 4,
	WorldPendingConnectToGame = 5,
	ExtraMediusWorldStatus = 16777215
};

// warning: multiple differing types with the same name, only one recovered
struct MediusAccountUpdateStatsRequest {
	/*   0 */ char MessageID[21];
	/*  15 */ char SessionKey[17];
	/*  26 */ char Stats[256];
};

// warning: multiple differing types with the same name, only one recovered
struct MediusAddToBuddyListFwdConfirmationRequest {
	/*   0 */ char MessageID[21];
	/*  18 */ int OriginatorAccountID;
	/*  1c */ char OriginatorAccountName[32];
	/*  3c */ enum MediusBuddyAddType addType;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusEndGameReport {
	/*   0 */ char SessionKey[17];
	/*  14 */ int MediusWorldID;
	/*  18 */ char WinningTeam[64];
	/*  58 */ char WinningPlayer[32];
	/*  78 */ int FinalScore;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusGameInfoResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ int ApplicationID;
	/*  20 */ int MinPlayers;
	/*  24 */ int MaxPlayers;
	/*  28 */ int GameLevel;
	/*  2c */ int PlayerSkillLevel;
	/*  30 */ int PlayerCount;
	/*  34 */ char GameStats[256];
	/* 134 */ char GameName[64];
	/* 174 */ int RulesSet;
	/* 178 */ int GenericField1;
	/* 17c */ int GenericField2;
	/* 180 */ int GenericField3;
	/* 184 */ int GenericField4;
	/* 188 */ int GenericField5;
	/* 18c */ int GenericField6;
	/* 190 */ int GenericField7;
	/* 194 */ int GenericField8;
	/* 198 */ enum MediusWorldStatus WorldStatus;
	/* 19c */ enum MediusGameHostType GameHostType;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusGetLadderStatsWideRequest {
	/*   0 */ char MessageID[21];
	/*  18 */ int AccountID_or_ClanID;
	/*  1c */ enum MediusLadderType LadderType;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusGetLadderStatsWideResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ int AccountID_or_ClanID;
	/*  20 */ int Stats[100];
};

// warning: multiple differing types with the same name, only one recovered
struct MediusGetMyIPRequest {
	/*   0 */ char MessageID[21];
	/*  15 */ char SessionKey[17];
};

// warning: multiple differing types with the same name, only one recovered
struct MediusGetMyIPResponse {
	/*   0 */ char MessageID[21];
	/*  15 */ char IP[20];
	/*  2c */ enum MediusCallbackStatus StatusCode;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusPlayerReport {
	/*   0 */ char SessionKey[17];
	/*  14 */ int MediusWorldID;
	/*  18 */ char Stats[256];
};

// warning: multiple differing types with the same name, only one recovered
struct MediusStatusResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusUpdateClanStatsRequest {
	/*   0 */ char MessageID[21];
	/*  15 */ char SessionKey[17];
	/*  28 */ int ClanID;
	/*  2c */ char Stats[256];
};

// warning: multiple differing types with the same name, only one recovered
struct MediusUpdateClanStatsResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusUpdateLadderStatsWideRequest {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusLadderType LadderType;
	/*  1c */ int Stats[100];
};

// warning: multiple differing types with the same name, only one recovered
struct MediusWorldReport {
	/*   0 */ int MediusWorldID;
	/*   4 */ int PlayerCount;
	/*   8 */ char GameName[64];
	/*  48 */ char GameStats[256];
	/* 148 */ int MinPlayers;
	/* 14c */ int MaxPlayers;
	/* 150 */ int GameLevel;
	/* 154 */ int PlayerSkillLevel;
	/* 158 */ int RulesSet;
	/* 15c */ int GenericField1;
	/* 160 */ int GenericField2;
	/* 164 */ int GenericField3;
	/* 168 */ int GenericField4;
	/* 16c */ int GenericField5;
	/* 170 */ int GenericField6;
	/* 174 */ int GenericField7;
	/* 178 */ int GenericField8;
	/* 17c */ enum MediusWorldStatus WorldStatus;
};

enum eNW_STATE {
	eNW_STATE_NONE = 0,
	eNW_STATE_NETCONFIGED = 1,
	eNW_STATE_IRXLOADED = 2,
	eNW_STATE_INTERFACEUP = 3,
	eNW_STATE_LIBINITED = 4,
	eNW_STATE_NETREGISTERED = 5,
	eNW_STATE_CONNECTPENDING = 6,
	eNW_STATE_CONNECTSUCCESS = 7,
	eNW_STATE_CONNECTFAILURE = 8,
	eNW_STATE_JOINPENDING = 9,
	eNW_STATE_JOINSUCCESS = 10,
	eNW_STATE_JOINFAILURE = 11,
	eNW_STATE_FINAL = 12
};

typedef /* function */ void** tNW_JoinCallback;
typedef /* function */ void** tNW_SendGameStateUpdateCallback;
typedef /* function */ void** tNW_LobbyUpdate;
typedef /* function */ void** tNW_GuiCallbackPtr;

enum eNW_JoinResponse {
	eNW_INVALID = 0,
	eNW_ACCEPTED = 1,
	eNW_GAME_FULL = 2,
	eNW_ALREADY_JOINED = 3,
	eNW_NO_UNRESERVED_SLOTS = 4,
	eNW_GAME_ALREADY_STARTED = 5,
	eNW_NO_ROOM_ON_TEAM = 6,
	eNW_NOT_ALLOWED = 7,
	eNW_JOIN_RESPONSE_EXTRA = 2147483647
};

enum eNW_PlayerType {
	kGS_PlayerType_Nobody = 0,
	kGS_PlayerType_Buddy = 1,
	kGS_PlayerType_ClanMember = 2,
	kGS_PlayerType_Both = 3,
	kGS_PlayerType_BuddyUsingUnreserved = 4,
	kGS_PlayerType_ClanUsingUnreserved = 5,
	kGS_PlayerType_BothUsingUnreserved = 6,
	kGS_PlayerType_BothUsingBuddy = 7,
	kGS_PlayerType_BothUsingClan = 8
};

struct tNW_PlayerInfoStats {
	/*   0 */ unsigned int crc;
	/*   4 */ int rank[6];
	/*  1c */ int padding[1];
	/*  20 */ char headsetAttached;
	/*  21 */ char isClanLeader;
	/*  22 */ char hasLocalPlayer;
	/*  23 */ char pad;
	/*  24 */ int clanID;
	/*  28 */ int totalGamesWithCheaters;
	/*  2c */ int consecutiveGamesWithCheaters;
	/*  30 */ char lastGameHadCheater;
};

struct TourneyRoundInfo {
	/*   0 */ char strTournName[16];
	/*  10 */ char team1Name[24];
	/*  28 */ char team2Name[24];
	/*  40 */ char roundStartTimeString[36];
	/*  64 */ unsigned int roundStartTime;
	/*  68 */ unsigned int tournId;
};

struct TourneyRoundJoinInfo {
	/*   0 */ char name[64];
	/*  40 */ char password[32];
	/*  60 */ int maxPlayers;
	/*  64 */ int minPlayers;
	/*  68 */ int level;
	/*  6c */ int skillLevel;
	/*  70 */ int rulesSet;
	/*  74 */ int genericField1;
	/*  78 */ int genericField2;
	/*  7c */ int genericField3;
	/*  80 */ bool bWrench;
	/*  81 */ bool bMachinegun;
	/*  82 */ bool bShotgun;
	/*  83 */ bool bRocketLauncher;
	/*  84 */ bool bSniperGun;
	/*  85 */ bool bMinegun;
	/*  86 */ bool bGrenadeLauncher;
	/*  87 */ bool bFlail;
	/*  88 */ bool bMagmaCannon;
};

struct tReservations {
	/*   0 */ int m_id;
	/*   4 */ int m_timeout;
};

struct tNW_Info {
	/*   0 */ enum eNW_STATE State;
	/*   4 */ unsigned int UniqueIdCnt;
	/*   8 */ HDME MyConnectionIndex;
	/*   c */ HDME MediusConnectionIndex;
	/*  10 */ int MyClientIndex;
	/*  14 */ int NumLocalPlayers;
	/*  18 */ int NumLocalBots;
	/*  1c */ int NumClients;
	/*  20 */ int NumPlayers;
	/*  24 */ int MaxPlayers;
	/*  28 */ int kbd_device;
	/*  2c */ int MyTeam;
	/*  30 */ int MySkin;
	/*  34 */ int MyAccountId;
	/*  38 */ int GameSequenceNumber;
	/*  3c */ int NumReservations;
	/*  40 */ struct tReservations Reservations[10];
	/*  90 */ int LeaderPartyIDs[10];
	/*  b8 */ bool IsClanChallenge;
	/*  bc */ int* mpIgnoreListNumEntries;
	/*  c0 */ int* mpIgnoreListEntries;
	/*  c4 */ char MySessionKey[17];
	/*  d8 */ int MyClanId;
	/*  dc */ char MyClanName[33];
	/*  fd */ bool ClanLeader;
	/*  fe */ char MyUserName[15];
	/* 10d */ char MyPassword[15];
	/* 11c */ int MyAccountCityId;
	/* 120 */ bool MyLicenseAccepted;
	/* 124 */ int MyMediusWorldId;
	/* 128 */ int MyRoomWorldId;
	/* 12c */ int MyCityWorldId;
	/* 130 */ unsigned int lastMediusServerTimeT;
	/* 138 */ long int lastMediusServerTimeReceived;
	/* 140 */ unsigned int TourneyRoundBeginTime;
	/* 144 */ char MyTag[5];
	/* 149 */ char MyIp[20];
	/* 160 */ struct tNW_PlayerInfoStats MyStats;
	/* 194 */ char MyStatsHaveDropPenalty;
	/* 195 */ char IsGameRanked;
	/* 198 */ int GameLevel;
	/* 19c */ char GameName[64];
	/* 1dc */ char GamePassword[32];
	/* 1fc */ int PartyMemberIDs[4];
	/* 20c */ int PartyRoomID;
	/* 210 */ int PartyID;
	/* 214 */ int NetFrameTime;
	/* 218 */ int LastTrueNetFrameTime;
	/* 21c */ int JoinGameTime;
	/* 220 */ bool ezNetCnfLoaded;
	/* 221 */ bool INukedTheMicroCode;
	/* 224 */ int ClientIndex[10];
	/* 24c */ bool SessionMaster;
	/* 24d */ bool newSessionMaster;
	/* 250 */ int SessionMasterClientIndex;
	/* 254 */ int onlyLocalPlayers;
	/* 258 */ int originalOnlyLocalPlayers;
	/* 25c */ bool m_bPeer2PeerGame;
	/* 25d */ bool m_bUseEncryption;
	/* 25e */ bool m_bZeroAggregation;
	/* 25f */ char m_UseAuxUdp;
	/* 260 */ bool m_bHardwarePresent;
	/* 261 */ bool m_bVoiceEnabled;
	/* 262 */ char m_LobbyMUISIp[32];
	/* 284 */ int m_LobbyMUISPort;
	/* 288 */ char m_LobbyMASIp[32];
	/* 2a8 */ int m_LobbyMASPort;
	/* 2ac */ int m_LastGameCreationTime;
	/* 2b0 */ tNW_GuiCallbackPtr m_GuiSetBusyCallback;
	/* 2b4 */ tNW_GuiCallbackPtr m_GuiRefreshCallback;
	/* 2b8 */ enum MediusErrorCode m_LastMediusError;
	/* 2bc */ enum MGCL_ERROR_CODE m_LastMGCLError;
	/* 2c0 */ enum NetErrorCode m_LastNetError;
	/* 2c4 */ enum NetErrorCode m_LastMediusNetError;
	/* 2c8 */ enum NetErrorCode m_LastGameServerNetError;
	/* 2cc */ int m_NumConsecutiveNetErrors;
	/* 2d0 */ bool m_bMediusInitialized;
	/* 2d1 */ bool m_bMediusConnected;
	/* 2d2 */ bool m_bMUISUpdate;
	/* 2d4 */ int m_LastMediusUpdateTime;
	/* 2d8 */ int m_MoveGameWorldOnMe;
	/* 2dc */ struct MediusGameInfoResponse m_GameInfo;
	/* 47c */ bool m_bForcePlayerReport;
	/* 480 */ int m_LastPlayerReportTime;
	/* 484 */ bool m_bForceWorldReport;
	/* 488 */ int m_LastWorldReportTime;
	/* 48c */ struct MediusWorldReport m_WorldReport;
	/* 60c */ bool m_bUpdateLadderStatsPending;
	/* 610 */ enum MediusCallbackStatus m_UpdateLadderStatsStatus;
	/* 614 */ bool m_bGetLadderStatsPending;
	/* 618 */ int* m_LadderStatDest;
	/* 61c */ enum MediusCallbackStatus m_GetLadderStatsStatus;
	/* 620 */ bool m_bUpdateClanStatsPending;
	/* 624 */ enum MediusCallbackStatus m_UpdateClanStatsStatus;
	/* 628 */ bool m_bAccountUpdateStatsPending;
	/* 62c */ enum MediusCallbackStatus m_AccountUpdateStatsStatus;
	/* 630 */ bool m_bWaitingForJoinResponse;
	/* 634 */ enum eNW_JoinResponse m_JoinResponse;
	/* 638 */ short int superCheat;
	/* 63c */ int TimeBanditsHack;
	/* 640 */ int sendMessageToPlayerClient[10];
	/* 668 */ int sendMessageData[10];
	/* 690 */ int receivedMessage;
	/* 694 */ int receivedMessageData;
	/* 698 */ int receivedMessagePlayerIdx;
	/* 69c */ int m_LastPacketReceived[10];
	/* 6c4 */ bool m_bSessionMasterLagging;
	/* 6c5 */ char m_ClientIndexRemapper[256];
	/* 7c8 */ int m_LastUdpPacketReceived[10];
	/* 7f0 */ int m_LastUdpPacketReceivedFromAnyone;
	/* 7f4 */ char m_RussiaHouseTransportFlagHack;
	/* 7f5 */ char playerHasBeenDeleted[10];
	/* 7ff */ char deletedPlayerName[16][10];
	/* 89f */ char deletedPlayerTeam[10];
	/* 8ac */ int deletedPlayerAccountId[10];
	/* 8d4 */ struct MediusSystemMessageEntry SystemMessageQueue[3];
	/* 1534 */ int myUDPBindPort;
	/* 1538 */ struct TourneyRoundInfo tourneyRoundInfo;
	/* 15a4 */ bool tourneyYouAreEliminated;
	/* 15a8 */ int m_BlockedPlayers[16];
	/* 15e8 */ int m_BlockedPlayerQueueIdx;
	/* 15ec */ struct tNW_DownloadedTweaks DLTweaks;
	/* 1678 */ bool fastNwUpdate;
};

struct sceDNAS2UniqueID {
	/*   0 */ unsigned int category;
	/*   4 */ void* ptr;
	/*   8 */ int* sizep;
	/*   c */ int result;
};

typedef struct sceDNAS2UniqueID sceDNAS2UniqueID_t;

struct _nwGameFindUserData {
	/*   0 */ int arraySize;
	/*   4 */ int curIndex;
	/*   8 */ struct NetLANPeerDesc* peerDescArray;
};

// warning: multiple differing types with the same name, only one recovered
enum MediusAccountType {
	MediusChildAccount = 0,
	MediusMasterAccount = 1,
	ExtraMediusAccountType = 16777215
};

// warning: multiple differing types with the same name, only one recovered
enum MediusApplicationType {
	MediusAppTypeGame = 0,
	LobbyChatChannel = 1,
	ExtraMediusApplicationType = 16777215
};

// warning: multiple differing types with the same name, only one recovered
enum MediusChatMessageType {
	Broadcast = 0,
	Whisper = 1,
	BroadcastAcrossEntireUniverse = 2,
	MediusClanChatType = 3,
	MediusBuddyChatType = 4,
	ExtraMediusChatMessageType = 16777215
};

// warning: multiple differing types with the same name, only one recovered
enum MediusBinaryMessageType {
	BroadcastBinaryMsg = 0,
	TargetBinaryMsg = 1,
	BroadcastBinaryMsgAcrossEntireUniverse = 2,
	ExtraMediusBinaryMessageType = 16777215
};

// warning: multiple differing types with the same name, only one recovered
enum MediusClanChallengeStatus {
	ClanChallengeRequest = 0,
	ClanChallengeAccepted = 1,
	ClanChallengeRevoked = 2,
	ClanChallengeRefused = 3,
	ClanChallengeConfirmed = 4,
	ExtraMediusClanChallengeStatus = 16777215
};

// warning: multiple differing types with the same name, only one recovered
enum MediusClanInvitationsResponseStatus {
	ClanInvitationUndecided = 0,
	ClanInvitationAccept = 1,
	ClanInvitationDecline = 2,
	ClanInvitationRevoked = 3,
	ExtraMediusClanInvitationsResponseStatus = 16777215
};

// warning: multiple differing types with the same name, only one recovered
enum MediusClanMessageStatus {
	ClanMessageUnread = 0,
	ClanMessageModified = 1,
	ClanMessageDeleted = 2,
	ClanMessageRead = 3,
	ExtraMediusClanMessageStatus = 16777215
};

// warning: multiple differing types with the same name, only one recovered
enum MediusClanStatus {
	ClanActive = 0,
	ClanDisbanded = -1,
	ExtraMediusClanStatus = 16777215
};

// warning: multiple differing types with the same name, only one recovered
enum MediusConnectionType {
	Modem = 0,
	Ethernet = 1,
	Wireless = 2,
	ExtraMediusConnectionType = 16777215
};

// warning: multiple differing types with the same name, only one recovered
enum MediusLobbyFilterMaskLevelType {
	MediusLobbyFilterMaskLevel0 = 0,
	MediusLobbyFilterMaskLevel1 = 1,
	MediusLobbyFilterMaskLevel2 = 2,
	MediusLobbyFilterMaskLevel3 = 4,
	MediusLobbyFilterMaskLevel4 = 8,
	MediusLobbyFilterMaskLevel12 = 16,
	MediusLobbyFilterMaskLevel123 = 32,
	MediusLobbyFilterMaskLevel1234 = 64,
	MediusLobbyFilterMaskLevel23 = 128,
	MediusLobbyFilterMaskLevel234 = 256,
	MediusLobbyFilterMaskLevel34 = 512,
	ExtraMediusLobbyFilterMaskLevelType = 16777215
};

// warning: multiple differing types with the same name, only one recovered
enum MediusLobbyFilterType {
	MediusLobbyFilterEqualsLobby = 0,
	MediusLobbyFilterEqualsFilter = 1,
	ExtraMediusLobbyFilter = 16777215
};

// warning: multiple differing types with the same name, only one recovered
enum MediusPlayerStatus {
	MediusPlayerDisconnected = 0,
	MediusPlayerInAuthWorld = 1,
	MediusPlayerInChatWorld = 2,
	MediusPlayerInGameWorld = 3,
	MediusPlayerInOtherUniverse = 4,
	LastMediusPLayerStatus = 5,
	ExtraMediusPlayerStatus = 16777215
};

// warning: multiple differing types with the same name, only one recovered
enum MediusTimeZone {
	MediusTimeZone_IDLW = -1200,
	MediusTimeZone_HST = -1000,
	MediusTimeZone_AKST = -900,
	MediusTimeZone_AKDT = -800,
	MediusTimeZone_PST = -801,
	MediusTimeZone_PDT = -700,
	MediusTimeZone_MST = -701,
	MediusTimeZone_MDT = -600,
	MediusTimeZone_CST = -601,
	MediusTimeZone_CDT = -500,
	MediusTimeZone_EST = -501,
	MediusTimeZone_EDT = -400,
	MediusTimeZone_AST = -401,
	MediusTimeZone_NST = -350,
	MediusTimeZone_ADT = -300,
	MediusTimeZone_NDT = -250,
	MediusTimeZone_WAT = -100,
	MediusTimeZone_GMT = 0,
	MediusTimeZone_UTC = 1,
	MediusTimeZone_WET = 2,
	MediusTimeZone_BST = 100,
	MediusTimeZone_IRISHST = 101,
	MediusTimeZone_WEST = 102,
	MediusTimeZone_CET = 103,
	MediusTimeZone_CEST = 200,
	MediusTimeZone_SWEDISHST = 201,
	MediusTimeZone_FST = 202,
	MediusTimeZone_CAT = 203,
	MediusTimeZone_SAST = 204,
	MediusTimeZone_EET = 205,
	MediusTimeZone_ISRAELST = 206,
	MediusTimeZone_EEST = 300,
	MediusTimeZone_BT = 301,
	MediusTimeZone_MSK = 302,
	MediusTimeZone_IRANST = 350,
	MediusTimeZone_MSD = 400,
	MediusTimeZone_INDIANST = 550,
	MediusTimeZone_JT = 750,
	MediusTimeZone_HKT = 800,
	MediusTimeZone_CCT = 801,
	MediusTimeZone_AWST = 802,
	MediusTimeZone_MT = 850,
	MediusTimeZone_KST = 900,
	MediusTimeZone_JST = 901,
	MediusTimeZone_ACST = 950,
	MediusTimeZone_AEST = 1000,
	MediusTimeZone_GST = 1001,
	MediusTimeZone_ACDT = 1050,
	MediusTimeZone_AEDT = 1100,
	MediusTimeZone_SST = 1101,
	MediusTimeZone_NZST = 1200,
	MediusTimeZone_IDLE = 1201,
	MediusTimeZone_NZDT = 1300,
	MediusTimeZone_EXTRA = 16777215
};

// warning: multiple differing types with the same name, only one recovered
enum MediusWorldGenericFieldLevelType {
	MediusWorldGenericFieldLevel0 = 0,
	MediusWorldGenericFieldLevel1 = 1,
	MediusWorldGenericFieldLevel2 = 2,
	MediusWorldGenericFieldLevel3 = 4,
	MediusWorldGenericFieldLevel4 = 8,
	MediusWorldGenericFieldLevel12 = 16,
	MediusWorldGenericFieldLevel123 = 32,
	MediusWorldGenericFieldLevel1234 = 64,
	MediusWorldGenericFieldLevel23 = 128,
	MediusWorldGenericFieldLevel234 = 256,
	MediusWorldGenericFieldLevel34 = 512,
	ExtraMediusWorldGenericFieldLevelType = 16777215
};

// warning: multiple differing types with the same name, only one recovered
enum MediusWorldSecurityLevelType {
	WORLD_SECURITY_NONE = 0,
	WORLD_SECURITY_PLAYER_PASSWORD = 1,
	WORLD_SECURITY_CLOSED = 2,
	WORLD_SECURITY_SPECTATOR_PASSWORD = 4,
	WORLD_SECURITY_EXTRA = 16777215
};

// warning: multiple differing types with the same name, only one recovered
struct MediusPlayerOnlineState {
	/*   0 */ enum MediusPlayerStatus ConnectStatus;
	/*   4 */ int MediusLobbyWorldID;
	/*   8 */ int MediusGameWorldID;
	/*   c */ char LobbyName[64];
	/*  4c */ char GameName[64];
};

// warning: multiple differing types with the same name, only one recovered
struct MediusAccountGetIDResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ int AccountID;
	/*  1c */ enum MediusCallbackStatus StatusCode;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusAccountLoginResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ int AccountID;
	/*  20 */ enum MediusAccountType AccountType;
	/*  24 */ int MediusWorldID;
	/*  28 */ struct NetConnectionInfo ConnectInfo;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusAccountRegistrationResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ int AccountID;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusAddPlayerToClanRequest {
	/*   0 */ char MessageID[21];
	/*  15 */ char SessionKey[17];
	/*  28 */ int PlayerAccountID;
	/*  2c */ char WelcomeMessage[200];
};

// warning: multiple differing types with the same name, only one recovered
struct MediusAddToBuddyListResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusAddToIgnoreListResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusChannelInfoResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ char LobbyName[64];
	/*  5c */ int ActivePlayerCount;
	/*  60 */ int MaxPlayers;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusChannelList_ExtraInfoResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ int MediusWorldID;
	/*  20 */ short unsigned int PlayerCount;
	/*  22 */ short unsigned int MaxPlayers;
	/*  24 */ short unsigned int GameWorldCount;
	/*  28 */ enum MediusWorldSecurityLevelType SecurityLevel;
	/*  2c */ unsigned int GenericField1;
	/*  30 */ unsigned int GenericField2;
	/*  34 */ unsigned int GenericField3;
	/*  38 */ unsigned int GenericField4;
	/*  3c */ enum MediusWorldGenericFieldLevelType GenericFieldLevel;
	/*  40 */ char LobbyName[64];
	/*  80 */ char EndOfList;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusGenericChatFwdMessage {
	/*   0 */ int TimeStamp;
	/*   4 */ int OriginatorAccountID;
	/*   8 */ enum MediusChatMessageType MessageType;
	/*   c */ char OriginatorAccountName[32];
	/*  2c */ char Message[64];
};

// warning: multiple differing types with the same name, only one recovered
struct MediusBinaryFwdMessage {
	/*   0 */ char MessageID[21];
	/*  18 */ int OriginatorAccountID;
	/*  1c */ enum MediusBinaryMessageType MessageType;
	/*  20 */ char Message[400];
};

// warning: multiple differing types with the same name, only one recovered
struct MediusGenericChatSetFilterResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ struct MediusGenericChatFilter ChatFilter;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusCheckMyClanInvitationsResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ int ClanInvitationID;
	/*  20 */ int ClanID;
	/*  24 */ enum MediusClanInvitationsResponseStatus ResponseStatus;
	/*  28 */ char Message[200];
	/*  f0 */ int LeaderAccountID;
	/*  f4 */ char LeaderAccountName[32];
	/* 114 */ char EndOfList;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusClanLadderListResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ int ClanID;
	/*  1c */ char ClanName[32];
	/*  3c */ unsigned int LadderPosition;
	/*  40 */ enum MediusCallbackStatus StatusCode;
	/*  44 */ char EndOfList;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusClanLadderPositionResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ unsigned int LadderPosition;
	/*  1c */ unsigned int TotalRankings;
	/*  20 */ enum MediusCallbackStatus StatusCode;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusClearGameListFilterResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusConfirmClanTeamChallengeResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusCreateChannelResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ int MediusWorldID;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusCreateClanResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ int ClanID;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusDeleteClanMessageResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusDisbandClanResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusErrorMessage {
	/*   0 */ int ErrorCode;
	/*   4 */ char ErrorMessage[256];
};

// warning: multiple differing types with the same name, only one recovered
struct MediusFindPlayerResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ int ApplicationID;
	/*  20 */ char ApplicationName[32];
	/*  40 */ enum MediusApplicationType ApplicationType;
	/*  44 */ int MediusWorldID;
	/*  48 */ int AccountID;
	/*  4c */ char AccountName[32];
	/*  6c */ char EndOfList;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusFindWorldByNameResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ int ApplicationID;
	/*  20 */ char ApplicationName[32];
	/*  40 */ enum MediusApplicationType ApplicationType;
	/*  44 */ int MediusWorldID;
	/*  48 */ char WorldName[64];
	/*  88 */ enum MediusWorldStatus WorldStatus;
	/*  8c */ char EndOfList;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusGameList_ExtraInfoResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ int MediusWorldID;
	/*  20 */ short unsigned int PlayerCount;
	/*  22 */ short unsigned int MinPlayers;
	/*  24 */ short unsigned int MaxPlayers;
	/*  28 */ int GameLevel;
	/*  2c */ int PlayerSkillLevel;
	/*  30 */ int RulesSet;
	/*  34 */ int GenericField1;
	/*  38 */ int GenericField2;
	/*  3c */ int GenericField3;
	/*  40 */ int GenericField4;
	/*  44 */ int GenericField5;
	/*  48 */ int GenericField6;
	/*  4c */ int GenericField7;
	/*  50 */ int GenericField8;
	/*  54 */ enum MediusWorldSecurityLevelType SecurityLevel;
	/*  58 */ enum MediusWorldStatus WorldStatus;
	/*  5c */ enum MediusGameHostType GameHostType;
	/*  60 */ char GameName[64];
	/*  a0 */ char GameStats[256];
	/* 1a0 */ char EndOfList;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusGameWorldPlayerListResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ int AccountID;
	/*  20 */ char AccountName[32];
	/*  40 */ char Stats[256];
	/* 140 */ enum MediusConnectionType ConnectionClass;
	/* 144 */ char EndOfList;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusGetAllClanMessagesResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ int ClanMessageID;
	/*  20 */ char Message[200];
	/*  e8 */ enum MediusClanMessageStatus Status;
	/*  ec */ char EndOfList;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusGetAnnouncementsResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ int AnnouncementID;
	/*  20 */ char Announcement[1000];
	/* 408 */ char EndOfList;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusGetBuddyList_ExtraInfoResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ int AccountID;
	/*  20 */ char AccountName[32];
	/*  40 */ struct MediusPlayerOnlineState OnlineState;
	/*  cc */ char EndOfList;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusGetIgnoreListResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ int IgnoreAccountID;
	/*  20 */ char IgnoreAccountName[32];
	/*  40 */ enum MediusPlayerStatus PlayerStatus;
	/*  44 */ char EndOfList;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusGetClanByIDResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ int ApplicationID;
	/*  20 */ char ClanName[32];
	/*  40 */ int LeaderAccountID;
	/*  44 */ char LeaderAccountName[32];
	/*  64 */ char Stats[256];
	/* 164 */ enum MediusClanStatus Status;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusGetClanByNameResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ int ClanID;
	/*  20 */ int LeaderAccountID;
	/*  24 */ char LeaderAccountName[32];
	/*  44 */ char Stats[256];
	/* 144 */ enum MediusClanStatus Status;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusGetClanInvitationsSentResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ int AccountID;
	/*  20 */ char AccountName[32];
	/*  40 */ char ResponseMsg[200];
	/* 108 */ enum MediusClanInvitationsResponseStatus ResponseStatus;
	/* 10c */ int ResponseTime;
	/* 110 */ char EndOfList;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusGetClanMemberList_ExtraInfoResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ int AccountID;
	/*  20 */ char AccountName[32];
	/*  40 */ char Stats[256];
	/* 140 */ struct MediusPlayerOnlineState OnlineState;
	/* 1cc */ int LadderStat;
	/* 1d0 */ unsigned int LadderPosition;
	/* 1d4 */ unsigned int TotalRankings;
	/* 1d8 */ char EndOfList;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusGetClanTeamChallengeHistoryResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ int AgainstClanID;
	/*  20 */ enum MediusClanChallengeStatus Status;
	/*  24 */ char EndOfList;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusGetClanTeamChallengesResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ int ChallengerClanID;
	/*  20 */ int AgainstClanID;
	/*  24 */ enum MediusClanChallengeStatus Status;
	/*  28 */ int ResponseTime;
	/*  2c */ char ChallengeMsg[200];
	/*  f4 */ char ResponseMsg[200];
	/* 1bc */ char EndOfList;
	/* 1c0 */ int ClanChallengeID;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusGetLobbyPlayerNames_ExtraInfoResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ int AccountID;
	/*  20 */ char AccountName[32];
	/*  40 */ struct MediusPlayerOnlineState OnlineState;
	/*  cc */ char EndOfList;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusGetLocationsResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ int LocationID;
	/*  1c */ char LocationName[64];
	/*  5c */ enum MediusCallbackStatus StatusCode;
	/*  60 */ char EndOfList;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusGetMyClanMessagesResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ int ClanID;
	/*  20 */ char Message[200];
	/*  e8 */ char EndOfList;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusGetMyClansResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ int ClanID;
	/*  20 */ int ApplicationID;
	/*  24 */ char ClanName[32];
	/*  44 */ int LeaderAccountID;
	/*  48 */ char LeaderAccountName[32];
	/*  68 */ char Stats[256];
	/* 168 */ enum MediusClanStatus Status;
	/* 16c */ char EndOfList;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusGetPolicyResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ char Policy[256];
	/* 11c */ char EndOfText;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusGetServerTimeResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ int GMT_time;
	/*  20 */ enum MediusTimeZone Local_server_timezone;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusGetTotalRankingsResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ unsigned int TotalRankings;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusGetWorldSecurityLevelResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ int MediusWorldID;
	/*  20 */ enum MediusApplicationType AppType;
	/*  24 */ enum MediusWorldSecurityLevelType SecurityLevel;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusInvitePlayerToClanResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusJoinChannelResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ struct NetConnectionInfo ConnectInfo;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusJoinGameResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ enum MediusGameHostType GameHostType;
	/*  20 */ struct NetConnectionInfo ConnectInfo;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusLadderList_ExtraInfoResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ unsigned int LadderPosition;
	/*  20 */ int LadderStat;
	/*  24 */ int AccountID;
	/*  28 */ char AccountName[32];
	/*  48 */ char AccountStats[256];
	/* 148 */ struct MediusPlayerOnlineState OnlineState;
	/* 1d4 */ char EndOfList;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusLadderPosition_ExtraInfoResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ unsigned int LadderPosition;
	/*  20 */ unsigned int TotalRankings;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusModifyClanMessageResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusPickLocationResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusPlayerInfoResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ char AccountName[32];
	/*  3c */ int ApplicationID;
	/*  40 */ enum MediusPlayerStatus PlayerStatus;
	/*  44 */ enum MediusConnectionType ConnectionClass;
	/*  48 */ char Stats[256];
};

// warning: multiple differing types with the same name, only one recovered
struct MediusReassignGameMediusWorldID {
	/*   0 */ int OldMediusWorldID;
	/*   4 */ int NewMediusWorldID;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusRemoveFromBuddyListResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusRemoveFromIgnoreListResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusRemovePlayerFromClanResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusRequestClanTeamChallengeResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusRespondToClanInvitationResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusRespondToClanTeamChallengeResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusRevokeClanInvitationResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusRevokeClanTeamChallengeResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusSendClanMessageResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusSessionBeginResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ char SessionKey[17];
};

// warning: multiple differing types with the same name, only one recovered
struct MediusSessionEndResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusSetGameListFilterResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ unsigned int FilterID;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusSetLobbyWorldFilterResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ unsigned int FilterMask1;
	/*  20 */ unsigned int FilterMask2;
	/*  24 */ unsigned int FilterMask3;
	/*  28 */ unsigned int FilterMask4;
	/*  2c */ enum MediusLobbyFilterType LobbyFilterType;
	/*  30 */ enum MediusLobbyFilterMaskLevelType FilterMaskLevel;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusTextFilterResponse {
	/*   0 */ char MessageID[21];
	/*  15 */ char Text[64];
	/*  58 */ enum MediusCallbackStatus StatusCode;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusTransferClanLeadershipResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusVersionServerResponse {
	/*   0 */ char MessageID[21];
	/*  15 */ char VersionServer[56];
};

// warning: multiple differing types with the same name, only one recovered
struct MediusUniverseNewsResponse {
	/*   0 */ char MessageID[21];
	/*  18 */ enum MediusCallbackStatus StatusCode;
	/*  1c */ char News[256];
	/* 11c */ char EndOfText;
};

typedef /* function */ void** MediusTypeAccountDeleteCallback;
typedef /* function */ void** MediusTypeAccountGetIDCallback;
typedef /* function */ void** MediusTypeAccountLoginCallback;
typedef /* function */ void** MediusTypeAccountRegistrationCallback;
typedef /* function */ void** MediusTypeAddToBuddyListCallback;
typedef /* function */ void** MediusTypeAddToIgnoreListCallback;
typedef /* function */ void** MediusTypeChannelInfoCallback;
typedef /* function */ void** MediusTypeGenericChatFwdMessageCallback;
typedef /* function */ void** MediusTypeBinaryFwdMessageCallback;
typedef /* function */ void** MediusTypeClearGameListFilterCallback;
typedef /* function */ void** MediusTypeConnectCallback;
typedef /* function */ void** MediusTypeCreateChannelCallback;
typedef /* function */ void** MediusTypeErrorMessageCallback;
typedef /* function */ void** MediusTypeFindPlayerCallback;
typedef /* function */ void** MediusTypeFindWorldByNameCallback;
typedef /* function */ void** MediusTypeGameInfoCallback;
typedef /* function */ void** MediusTypeGameWorldPlayerListCallback;
typedef /* function */ void** MediusTypeGetAnnouncementsCallback;
typedef /* function */ void** MediusTypeGetIgnoreListCallback;
typedef /* function */ void** MediusTypeGetPolicyCallback;
typedef /* function */ void** MediusTypeJoinChannelCallback;
typedef /* function */ void** MediusTypeJoinGameCallback;
typedef /* function */ void** MediusTypePlayerInfoCallback;
typedef /* function */ void** MediusTypeRemoveFromBuddyListCallback;
typedef /* function */ void** MediusTypeRemoveFromIgnoreListCallback;
typedef /* function */ void** MediusTypeSessionBeginCallback;
typedef /* function */ void** MediusTypeSessionEndCallback;
typedef /* function */ void** MediusTypeSetGameListFilterCallback;
typedef /* function */ void** MediusTypeVersionServerCallback;
typedef /* function */ void** MediusTypeGetWorldSecurityLevelCallback;
typedef /* function */ void** MediusTypeGetLocationsCallback;
typedef /* function */ void** MediusTypePickLocationCallback;
typedef /* function */ void** MediusTypeGenericChatSetFilterCallback;
typedef /* function */ void** MediusTypeTextFilterCallback;
typedef /* function */ void** MediusTypeUniverseNewsCallback;
typedef /* function */ void** MediusTypeUniverseVariableInfoCallback;
typedef /* function */ void** MediusTypeChannelList_ExtraInfoCallback;
typedef /* function */ void** MediusTypeGameList_ExtraInfoCallback;
typedef /* function */ void** MediusTypeGetBuddyList_ExtraInfoCallback;
typedef /* function */ void** MediusTypeGetLobbyPlayerNames_ExtraInfoCallback;
typedef /* function */ void** MediusTypeGetTotalRankingsCallback;
typedef /* function */ void** MediusTypeLadderList_ExtraInfoCallback;
typedef /* function */ void** MediusTypeLadderPosition_ExtraInfoCallback;
typedef /* function */ void** MediusTypeSetLobbyWorldFilterCallback;
typedef /* function */ void** MediusTypeGetServerTimeCallback;
typedef /* function */ void** MediusTypeCreateClanCallback;
typedef /* function */ void** MediusTypeDisbandClanCallback;
typedef /* function */ void** MediusTypeGetMyClansCallback;
typedef /* function */ void** MediusTypeGetClanByIDCallback;
typedef /* function */ void** MediusTypeGetClanByNameCallback;
typedef /* function */ void** MediusTypeTransferClanLeadershipCallback;
typedef /* function */ void** MediusTypeRemovePlayerFromClanCallback;
typedef /* function */ void** MediusTypeInvitePlayerToClanCallback;
typedef /* function */ void** MediusTypeCheckMyClanInvitationsCallback;
typedef /* function */ void** MediusTypeGetClanInvitationsSentCallback;
typedef /* function */ void** MediusTypeRespondToClanInvitationCallback;
typedef /* function */ void** MediusTypeRevokeClanInvitationCallback;
typedef /* function */ void** MediusTypeGetMyClanMessagesCallback;
typedef /* function */ void** MediusTypeSendClanMessageCallback;
typedef /* function */ void** MediusTypeModifyClanMessageCallback;
typedef /* function */ void** MediusTypeDeleteClanMessageCallback;
typedef /* function */ void** MediusTypeGetAllClanMessagesCallback;
typedef /* function */ void** MediusTypeRequestClanTeamChallengeCallback;
typedef /* function */ void** MediusTypeRespondToClanTeamChallengeCallback;
typedef /* function */ void** MediusTypeRevokeClanTeamChallengeCallback;
typedef /* function */ void** MediusTypeConfirmClanTeamChallengeCallback;
typedef /* function */ void** MediusTypeGetClanTeamChallengeHistoryCallback;
typedef /* function */ void** MediusTypeGetClanTeamChallengesCallback;
typedef /* function */ void** MediusTypeClanLadderListCallback;
typedef /* function */ void** MediusTypeClanLadderPositionCallback;
typedef /* function */ void** MediusTypeGetClanMemberList_ExtraInfoCallback;

struct MediusFile_tag {
	/*   0 */ unsigned char Filename[128];
	/*  80 */ unsigned char ServerChecksum[16];
	/*  90 */ unsigned int FileID;
	/*  94 */ unsigned int FileSize;
	/*  98 */ unsigned int CreationTimeStamp;
	/*  9c */ unsigned int OwnerID;
	/*  a0 */ unsigned int GroupID;
	/*  a4 */ short unsigned int OwnerPermissionRWX;
	/*  a6 */ short unsigned int GroupPermissionRWX;
	/*  a8 */ short unsigned int GlobalPermissionRWX;
	/*  aa */ short unsigned int ServerOperationID;
};

typedef struct MediusFile_tag MediusFile;

// warning: multiple differing types with the same name, only one recovered
struct MediusFileCreateResponse_tag {
	/*   0 */ MediusFile MediusFileInfo;
	/*  ac */ enum MediusCallbackStatus StatusCode;
	/*  b0 */ char MessageID[21];
};

typedef struct MediusFileCreateResponse_tag MediusFileCreateResponse;

// warning: multiple differing types with the same name, only one recovered
struct MediusFileUploadResponse_tag {
	/*   0 */ unsigned char Data[464];
	/* 1d0 */ int iStartByteIndex;
	/* 1d4 */ int iDataSize;
	/* 1d8 */ int iPacketNumber;
	/* 1dc */ int iXferStatus;
	/* 1e0 */ enum MediusCallbackStatus StatusCode;
	/* 1e4 */ char MessageID[21];
};

typedef struct MediusFileUploadResponse_tag MediusFileUploadResponse;

// warning: multiple differing types with the same name, only one recovered
struct MediusFileCloseResponse_tag {
	/*   0 */ MediusFile MediusFileInfo;
	/*  ac */ enum MediusCallbackStatus StatusCode;
	/*  b0 */ char MessageID[21];
};

typedef struct MediusFileCloseResponse_tag MediusFileCloseResponse;

// warning: multiple differing types with the same name, only one recovered
struct MediusFileDownloadResponse_tag {
	/*   0 */ unsigned char Data[464];
	/* 1d0 */ int iStartByteIndex;
	/* 1d4 */ int iDataSize;
	/* 1d8 */ int iPacketNumber;
	/* 1dc */ int iXferStatus;
	/* 1e0 */ enum MediusCallbackStatus StatusCode;
	/* 1e4 */ char MessageID[21];
};

typedef struct MediusFileDownloadResponse_tag MediusFileDownloadResponse;

// warning: multiple differing types with the same name, only one recovered
struct MediusFileDeleteResponse_tag {
	/*   0 */ enum MediusCallbackStatus StatusCode;
	/*   4 */ char MessageID[21];
};

typedef struct MediusFileDeleteResponse_tag MediusFileDeleteResponse;

// warning: multiple differing types with the same name, only one recovered
struct MediusFileListResponse_tag {
	/*   0 */ MediusFile MediusFileInfo;
	/*  ac */ enum MediusCallbackStatus StatusCode;
	/*  b0 */ char MessageID[21];
	/*  c5 */ char EndOfList;
};

typedef struct MediusFileListResponse_tag MediusFileListResponse;
typedef /* function */ void** MediusFileTypeCreateCallback;
typedef /* function */ void** MediusFileTypeUploadCallback;
typedef /* function */ void** MediusFileTypeCloseCallback;
typedef /* function */ void** MediusFileTypeDownloadCallback;
typedef /* function */ void** MediusFileTypeDeleteCallback;
typedef /* function */ void** MediusFileTypeListCallback;

struct tNW_MediusCallbacks {
	/*   0 */ /* function */ void** m_AccountChangePasswordCallback;
	/*   4 */ /* function */ void** m_AccountCreateCallback;
	/*   8 */ /* function */ void** m_AccountDeleteCallback;
	/*   c */ /* function */ void** m_AccountGetIDCallback;
	/*  10 */ /* function */ void** m_AccountLoginCallback;
	/*  14 */ /* function */ void** m_AccountLogoutCallback;
	/*  18 */ /* function */ void** m_BinaryMsgCallback;
	/*  1c */ /* function */ void** m_BuddyAddBuddyCallback;
	/*  20 */ /* function */ void** m_BuddyGetBuddyListCallback;
	/*  24 */ /* function */ void** m_BuddyRemoveBuddyCallback;
	/*  28 */ /* function */ void** m_ChatCallback;
	/*  2c */ /* function */ void** m_ClanByIDCallback;
	/*  30 */ /* function */ void** m_ClanByNameCallback;
	/*  34 */ /* function */ void** m_ClanConfirmChallengeCallback;
	/*  38 */ /* function */ void** m_ClanCreateClanCallback;
	/*  3c */ /* function */ void** m_ClanDeleteMessageCallback;
	/*  40 */ /* function */ void** m_ClanDisbandClanCallback;
	/*  44 */ /* function */ void** m_ClanGetAllMessagesCallback;
	/*  48 */ /* function */ void** m_ClanGetChallengeHistoryListCallback;
	/*  4c */ /* function */ void** m_ClanGetChallengeListCallback;
	/*  50 */ /* function */ void** m_ClanGetClanInfoCallback;
	/*  54 */ /* function */ void** m_ClanGetInvitesCallback;
	/*  58 */ /* function */ void** m_ClanGetLadderListCallback;
	/*  5c */ /* function */ void** m_ClanGetMembersCallback;
	/*  60 */ /* function */ void** m_ClanGetMyMessagesCallback;
	/*  64 */ /* function */ void** m_ClanGetSentInvitesCallback;
	/*  68 */ /* function */ void** m_ClanInvitePlayerCallback;
	/*  6c */ /* function */ void** m_ClanInviteResponseCallback;
	/*  70 */ /* function */ void** m_ClanInviteRevokeCallback;
	/*  74 */ /* function */ void** m_ClanLadderPositionCallback;
	/*  78 */ /* function */ void** m_ClanModifyMessageCallback;
	/*  7c */ /* function */ void** m_ClanRemovePlayerCallback;
	/*  80 */ /* function */ void** m_ClanRespondToChallengeCallback;
	/*  84 */ /* function */ void** m_ClanRevokeChallengeCallback;
	/*  88 */ /* function */ void** m_ClanSendChallengeCallback;
	/*  8c */ /* function */ void** m_ClanSendMessageCallback;
	/*  90 */ /* function */ void** m_ClanTransferClanLeadershipCallback;
	/*  94 */ /* function */ void** m_ClanUpdateClanTagCallback;
	/*  98 */ /* function */ void** m_ErrorMessageCallback;
	/*  9c */ /* function */ void** m_FileCloseCallback;
	/*  a0 */ /* function */ void** m_FileCreateCallback;
	/*  a4 */ /* function */ void** m_FileDeleteCallback;
	/*  a8 */ /* function */ void** m_FileDownloadCallback;
	/*  ac */ /* function */ void** m_FileListCallback;
	/*  b0 */ /* function */ void** m_FileUploadCallback;
	/*  b4 */ /* function */ void** m_GameAcquireGameInfoCallback;
	/*  b8 */ /* function */ void** m_GameAcquireGamePlayersCallback;
	/*  bc */ /* function */ void** m_GameHostP2PConnectCallback;
	/*  c0 */ /* function */ void** m_GameJoinCallback;
	/*  c4 */ /* function */ void** m_GameFindCallback;
	/*  c8 */ /* function */ void** m_GameListClearFilterCallback;
	/*  cc */ /* function */ void** m_GameListGetGameListCallback;
	/*  d0 */ /* function */ void** m_GameListSetFilterCallback;
	/*  d4 */ /* function */ void** m_GameRefreshGameInfoCallback;
	/*  d8 */ /* function */ void** m_GameRefreshGamePlayersCallback;
	/*  dc */ /* function */ void** m_GetTotalRankingsCallback;
	/*  e0 */ /* function */ void** m_IgnoreListAddToIgnoreListCallback;
	/*  e4 */ /* function */ void** m_IgnoreListGetIgnoreListCallback;
	/*  e8 */ /* function */ void** m_IgnoreListRemoveFromIgnoreListCallback;
	/*  ec */ /* function */ void** m_LadderGetLadderListCallback;
	/*  f0 */ /* function */ void** m_LadderPositionCallback;
	/*  f4 */ /* function */ void** m_LocationQueryLocationsCallback;
	/*  f8 */ /* function */ void** m_LocationSelectLocationCallback;
	/*  fc */ /* function */ void** m_MediusVersionCallback;
	/* 100 */ /* function */ void** m_PlayerFindPlayerCallback;
	/* 104 */ /* function */ void** m_PlayerGetPlayerInfoCallback;
	/* 108 */ /* function */ void** m_RoomClearRoomFilterCallback;
	/* 10c */ /* function */ void** m_RoomCreateCallback;
	/* 110 */ /* function */ void** m_RoomGetInfoCallback;
	/* 114 */ /* function */ void** m_RoomJoinCallback;
	/* 118 */ /* function */ void** m_RoomRefreshPlayerListCallback;
	/* 11c */ /* function */ void** m_RoomRefreshRoomListCallback;
	/* 120 */ /* function */ void** m_RoomSetRoomFilterCallback;
	/* 124 */ /* function */ void** m_SessionBeginCallback;
	/* 128 */ /* function */ void** m_SessionEndCallback;
	/* 12c */ /* function */ void** m_SessionGetUniversesCallback;
	/* 130 */ /* function */ void** m_SessionGetUniverseNewsCallback;
	/* 134 */ /* function */ void** m_SessionMediusConnectCallback;
	/* 138 */ /* function */ void** m_SessionRemoteClientConnectCallback;
	/* 13c */ /* function */ void** m_SessionRemoteClientDisconnectCallback;
	/* 140 */ /* function */ void** m_SetLocalizationParametersCallback;
	/* 144 */ /* function */ void** m_UtilChatToggleCallback;
	/* 148 */ /* function */ void** m_UtilFilterCallback;
	/* 14c */ /* function */ void** m_UtilGetPolicyCallback;
	/* 150 */ /* function */ void** m_UtilGetSecurityCallback;
	/* 154 */ /* function */ void** m_UtilMarkMessageCallback;
	/* 158 */ /* function */ void** m_UtilRefreshAnnouncementListCallback;
	/* 15c */ /* function */ void** m_UtilUpdateServerTimeCallback;
	/* 160 */ /* function */ void** m_UtilSetAutoChatHistoryCallback;
};

// warning: multiple differing types with the same name, only one recovered
struct RSA_KEYPAIR {
	/*   0 */ struct RSA_KEY publicKey;
	/*  40 */ struct RSA_KEY privateKey;
};

// warning: multiple differing types with the same name, only one recovered
struct NetUsePeerToPeerInParams {
	/*   0 */ unsigned int UdpBindPort;
	/*   4 */ unsigned int UPnPMemoryCeiling;
	/*   8 */ int bEnableLANBroadcastComms;
	/*   c */ unsigned int GlobalBufferPoolSize;
};

// warning: multiple differing types with the same name, only one recovered
struct NetUseObjectsInParams {
	/*   0 */ unsigned int MaxStructures;
	/*   4 */ unsigned int MaxFieldsPerStructure;
	/*   8 */ unsigned int MaxObjects;
	/*   c */ unsigned int MaxDataStreamTypes;
	/*  10 */ unsigned int MaxDataStreams;
};

typedef /* function */ void** NetMallocCallback;
typedef /* function */ void** NetReallocCallback;
typedef /* function */ void** NetFreeCallback;

// warning: multiple differing types with the same name, only one recovered
struct NetMemoryCallbackParams {
	/*   0 */ NetMallocCallback pfMallocCallback;
	/*   4 */ NetReallocCallback pfReallocCallback;
	/*   8 */ NetFreeCallback pfFreeCallback;
};

typedef /* function */ void** NetTypeSystemMessageCallback;

// warning: multiple differing types with the same name, only one recovered
enum NetConnectivityType {
	NetConnectivityNone = 0,
	NetConnectivityInternet = 1,
	NetConnectivityLAN = 2,
	ExtraNetConnectivityType = -1
};

// warning: multiple differing types with the same name, only one recovered
struct NetInitializeInParams {
	/*   0 */ int bDefaultSet;
	/*   4 */ struct NetLocalizationParams Localization;
	/*   c */ int ApplicationID;
	/*  10 */ unsigned char ApplicationName[72];
	/*  58 */ struct RSA_KEYPAIR* pLocalKeyPair;
	/*  5c */ struct RSA_KEYPAIR* pApplicationKeyPair;
	/*  60 */ enum NetConnectivityType ConnectivityType;
	/*  64 */ NetTypeSystemMessageCallback pfSystemMessageCallback;
	/*  68 */ void* pSystemMessageCallbackData;
};

// warning: multiple differing types with the same name, only one recovered
struct NetInitializeOutParams {
	/*   0 */ int bIsSet;
	/*   4 */ enum NetErrorCode ErrorCode;
	/*   8 */ char szVersion[16];
};

typedef /* function */ void** tNW_CallbackFunc;

struct stAudioControlDmeObject {
	/*   0 */ int bGlobalChatEnabled;
};

struct stAudioInfo {
	/*   0 */ int eAudioRecordingState;
	/*   4 */ int bAudioPlaying;
	/*   8 */ int iAudioType;
	/*   c */ int iClientIndexPlaying;
	/*  10 */ int iTickRecord;
	/*  14 */ int iJoinedChannel;
	/*  18 */ struct stAudioControlDmeObject* pstSharedAudioControlObject;
	/*  1c */ int bAudioObjectCreated;
	/*  20 */ int iAudioObjectIndex;
	/*  24 */ int iMyClientIndex;
};

struct sceNetcnfifData {
	/*   0 */ char attach_ifc[256];
	/* 100 */ char attach_dev[256];
	/* 200 */ char dhcp_host_name[256];
	/* 300 */ char address[256];
	/* 400 */ char netmask[256];
	/* 500 */ char gateway[256];
	/* 600 */ char dns1_address[256];
	/* 700 */ char dns2_address[256];
	/* 800 */ char phone_numbers1[256];
	/* 900 */ char phone_numbers2[256];
	/* a00 */ char phone_numbers3[256];
	/* b00 */ char auth_name[256];
	/* c00 */ char auth_key[256];
	/* d00 */ char peer_name[256];
	/* e00 */ char vendor[256];
	/* f00 */ char product[256];
	/* 1000 */ char chat_additional[256];
	/* 1100 */ char outside_number[256];
	/* 1200 */ char outside_delay[256];
	/* 1300 */ int ifc_type;
	/* 1304 */ int mtu;
	/* 1308 */ int ifc_idle_timeout;
	/* 130c */ int dev_type;
	/* 1310 */ int phy_config;
	/* 1314 */ int dialing_type;
	/* 1318 */ int dev_idle_timeout;
	/* 131c */ int p0;
	/* 1320 */ unsigned char dhcp;
	/* 1321 */ unsigned char dns1_nego;
	/* 1322 */ unsigned char dns2_nego;
	/* 1323 */ unsigned char f_auth;
	/* 1324 */ unsigned char auth;
	/* 1325 */ unsigned char pppoe;
	/* 1326 */ unsigned char prc_nego;
	/* 1327 */ unsigned char acc_nego;
	/* 1328 */ unsigned char accm_nego;
	/* 1329 */ unsigned char p1;
	/* 132a */ unsigned char p2;
	/* 132b */ unsigned char p3;
	/* 132c */ int p4[5];
};

// warning: multiple differing types with the same name, only one recovered
struct NetErrorThresholdCallbackData {
	/*   0 */ int ObjectIndex;
	/*   4 */ int FieldIndex;
	/*   8 */ int FieldSize;
	/*   c */ int FieldCount;
	/*  10 */ void* pCurrentData;
	/*  14 */ void* pLastUpdateData;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusPlayerInfoRequest {
	/*   0 */ char MessageID[21];
	/*  15 */ char SessionKey[17];
	/*  28 */ int AccountID;
};

struct tNW_ClientJoinMessage {
	/*   0 */ int numPlayers;
	/*   4 */ int accountID;
	/*   8 */ int partyID;
	/*   c */ int extraPartySlots;
	/*  10 */ int rank[6];
	/*  28 */ short int team[2];
	/*  2c */ short int skin[2];
	/*  30 */ char name[16][2];
	/*  50 */ char clanTag[8];
};

struct tNW_JoinResponseMessage {
	/*   0 */ enum eNW_JoinResponse status;
	/*   4 */ char joiningClient;
	/*   5 */ char name[16][10];
	/*  a5 */ char clanTag[8][10];
};

struct tNW_PlayerSetupMessage {
	/*   0 */ int playerIndex;
	/*   4 */ char team;
	/*   5 */ char skin;
	/*   6 */ char state;
	/*   7 */ char name[16];
	/*  17 */ char clanTag[8];
};

struct tNW_PlayerHasHeadSetMessage {
	/*   0 */ int hasHeadSet;
};

struct tNW_GameOptions {
	/*   0 */ signed char gameFlags[59];
	/*  3c */ unsigned int weaponFlags;
	/*  40 */ signed char pointValues[11];
	/*  4b */ unsigned char upgradeTimerMultipliers[11];
};

struct mpGameInitSettings {
	/*   0 */ int gameRules;
	/*   4 */ int gameType;
	/*   8 */ int gameTimeEnd;
	/*   c */ int playerNamesOn;
};

struct tNW_GameSettings {
	/*   0 */ char playerNames[16][10];
	/*  a0 */ char playerClanTags[8][10];
	/*  f0 */ char playerSkins[10];
	/*  fa */ char playerTeams[10];
	/* 104 */ char playerClients[10];
	/* 10e */ char playerState[10];
	/* 118 */ char playerTypes[10];
	/* 124 */ float playerRank[10];
	/* 14c */ float playerRankDeviation[10];
	/* 174 */ int accountIds[10];
	/* 19c */ int gameStartTime;
	/* 1a0 */ int gameLoadStartTime;
	/* 1a4 */ short int gameLevel;
	/* 1a6 */ char numPlayers;
	/* 1a7 */ char superCheat;
	/* 1a8 */ char numPlayersAtStart;
	/* 1a9 */ char gameRules;
	/* 1aa */ char gameType;
	/* 1ac */ short unsigned int playerHeadSet;
	/* 1ae */ char playerNamesOn;
	/* 1af */ char teamSpawnPtIdx[10];
	/* 1bc */ unsigned int spawnSeed;
	/* 1c0 */ int netObjectIndex;
};

typedef /* function */ void** tNW_RemotePlayerCallback;

// warning: multiple differing types with the same name, only one recovered
struct MediusAccountDeleteRequest {
	/*   0 */ char MessageID[21];
	/*  15 */ char SessionKey[17];
	/*  26 */ char MasterPassword[32];
};

enum MGCL_ALERT_LEVEL {
	MGCL_ALERT_NONE = 0,
	MGCL_ALERT_LOW = 1,
	MGCL_ALERT_MID = 2,
	MGCL_ALERT_HIGH = 3,
	ExtraMGCLAlertCode = 16777215
};

struct MediusServerReportType {
	/*   0 */ char SessionKey[17];
	/*  12 */ short int MaxWorlds;
	/*  14 */ short int MaxPlayersPerWorld;
	/*  16 */ short int ActiveWorldCount;
	/*  18 */ short int TotalActivePlayers;
	/*  1c */ enum MGCL_ALERT_LEVEL AlertLevel;
};

struct tNW_MGCL_Data {
	/*   0 */ bool m_bMGCL_API_Initialized;
	/*   1 */ char m_MGCLSessionKey[17];
	/*  12 */ bool m_bDone_MGCLConnect1_MAS;
	/*  13 */ bool m_bDone_MGCLConnect2_MPS;
	/*  14 */ bool m_bDone_MGCLSessionBegin;
	/*  15 */ bool m_bDone_MGCLSessionEnd;
	/*  16 */ bool m_bDone_MGCLAuthenticationSend;
	/*  18 */ int m_iDone_MGCLCreateGameOnSelf;
	/*  1c */ int m_iDone_MGCLEndGameOnSelf;
	/*  20 */ bool m_bMGCL_CurrentHost;
	/*  21 */ bool m_bMGCL_Connected;
	/*  22 */ bool m_bForceSendMGCLReport;
	/*  23 */ bool m_bSecurityDisabled;
	/*  24 */ char m_HostServer0_IP[32];
	/*  44 */ char m_HostServer0_Port[32];
	/*  64 */ char m_HostServer1_IP[32];
	/*  84 */ char m_HostServer1_Port[32];
	/*  a4 */ int m_HostServer_WorldID;
	/*  a8 */ bool m_timerStarted;
	/*  ac */ unsigned int m_timerStart;
	/*  b0 */ unsigned int m_time_LastServerReportSent;
	/*  b4 */ unsigned int m_time_LastPlayerReportSent;
	/*  b8 */ unsigned int m_time_LastWorldReportSent;
	/*  bc */ int m_MediusWorldID;
	/*  c0 */ int m_regionId;
	/*  c4 */ enum MediusWorldStatus m_WorldStatus;
	/*  c8 */ int m_MediusServerResponse;
	/*  cc */ struct NetConnectionInfo netConnectInfo_ForMPS;
	/* 168 */ struct MediusServerReportType serverReport;
};

enum lgAudPinID {
	LGAUD_PIN_NONE = 0,
	LGAUD_PIN_MASTER = 1,
	LGAUD_PIN_MIC = 2,
	LGAUD_PIN_LINE = 3,
	LGAUD_PIN_DIGITAL = 4,
	LGAUD_PIN_WAVE = 5,
	LGAUD_PIN_SPEAKER = 6,
	LGAUD_PIN_HEADPHONES = 7,
	LGAUD_PIN_SUBWOOFER = 8,
	LGAUD_PIN_EMBEDDED = 9,
	LGAUD_PIN_HACK_TO_EXTEND_ENUM_TO_32_BIT = 2147483647
};

struct lgAudMixerDesc {
	/*   0 */ enum lgAudPinID Pid;
	/*   4 */ u_short Controls;
};

struct lgAudSamplingFormat {
	/*   0 */ u_char Channels;
	/*   1 */ u_char BitResolution;
	/*   2 */ u_short LowerSamplingRate;
	/*   4 */ u_short HigherSamplingRate;
};

struct lgAudSamplingRequest {
	/*   0 */ u_char Channels;
	/*   1 */ u_char BitResolution;
	/*   2 */ u_short SamplingRate;
	/*   4 */ u_short BufferMilliseconds;
};

struct lgAudOpenParam {
	/*   0 */ u_char Mode;
	/*   2 */ struct lgAudSamplingRequest RecordingFormat;
	/*   8 */ struct lgAudSamplingRequest PlaybackFormat;
};

struct lgAudDeviceDesc {
	/*   0 */ u_char RecordingFormatsCount;
	/*   2 */ struct lgAudSamplingFormat RecordingFormats[16];
	/*  62 */ u_char PlaybackFormatsCount;
	/*  64 */ struct lgAudSamplingFormat PlaybackFormats[16];
	/*  c4 */ u_char RecordingMixersCount;
	/*  c8 */ struct lgAudMixerDesc RecordingMixers[8];
	/* 108 */ u_char PlaybackMixersCount;
	/* 10c */ struct lgAudMixerDesc PlaybackMixers[8];
};

enum eCOMMON_RESULT {
	eCOMMON_RESULT_OK = 0,
	eCOMMON_RESULT_ERROR = 1,
	eCOMMON_RESULT_INVALID_PARAM = 2,
	eCOMMON_RESTUL_EXTRA = 16777215
};

enum AsyncOp {
	kAsyncOp_None = -1,
	kAsyncOp_Read = 0,
	kAsyncOp_Write = 1
};

enum AsyncOpState {
	kAsyncOpState_Idle = 0,
	kAsyncOpState_Busy = 1
};

struct Schedule {
	/*   0 */ int threadId;
	/*   4 */ int remaining;
	/*   8 */ int frequency;
	/*   c */ int alarmId;
	/*  10 */ int inUse;
};

// warning: multiple differing types with the same name, only one recovered
struct NetStreamMediaAudioRecordData {
	/*   0 */ enum NetStreamMediaAudioType AudioType;
	/*   4 */ unsigned char* pBuffer;
	/*   8 */ unsigned int BufSize;
	/*   c */ unsigned int BytesStored;
	/*  10 */ char TransportFlags;
	/*  14 */ void* pUserData;
};

// warning: multiple differing types with the same name, only one recovered
struct NetStreamMediaChannelInfo {
	/*   0 */ HDME ConnectionHandle;
	/*   4 */ unsigned int ChannelNum;
	/*   8 */ unsigned int ClientCount;
};

// warning: multiple differing types with the same name, only one recovered
struct NetStreamMediaChannelStateData {
	/*   0 */ int bCanRecord;
};

typedef NMS* HNMS;
typedef short unsigned int NCI_RETCODE;

// warning: multiple differing types with the same name, only one recovered
struct NCI_CODEC_IO_BLOCK {
	/*   0 */ short int* pPCMBuffer;
	/*   4 */ short unsigned int wSamplesInPCMBuffer;
	/*   8 */ unsigned char* pNellyBuffer;
	/*   c */ short unsigned int wNellyBufferSize;
	/*   e */ short unsigned int wNellyBufferReadByteOffset;
	/*  10 */ unsigned char chNellyBufferReadBitOffset;
	/*  12 */ short unsigned int wNellyBufferWriteByteOffset;
	/*  14 */ unsigned char chNellyBufferWriteBitOffset;
};

// warning: multiple differing types with the same name, only one recovered
struct NCI_CODEC_INFO_BLOCK {
	/*   0 */ short unsigned int wNCIVersion;
	/*   2 */ char sCodecVersion[32];
	/*  28 */ long unsigned int dwCodecClassID;
	/*  30 */ long unsigned int dwCodecID;
	/*  38 */ short unsigned int wSamplingRate;
	/*  3a */ short unsigned int wNumBitsPerSample;
	/*  3c */ short unsigned int wNumSamplesPerFrame;
	/*  3e */ short unsigned int wNumChannels;
	/*  40 */ short unsigned int wInterleaveBlockSize;
	/*  48 */ long unsigned int dwBitRate;
	/*  50 */ long unsigned int dwMinPacketBits;
	/*  58 */ long unsigned int dwAvgPacketBits;
	/*  60 */ long unsigned int dwMaxPacketBits;
	/*  68 */ short unsigned int wNumPrimeFlushFrames;
	/*  6a */ short unsigned int wNumPrimeFlushSamples;
};

struct NMS {
	/*   0 */ void* pEncoderMem;
	/*   4 */ void* pDecoderMem1;
	/*   8 */ void* pDecoderMem2;
	/*   c */ void* pDecoderMem3;
	/*  10 */ struct NCI_CODEC_IO_BLOCK IOBlockEncode;
	/*  28 */ struct NCI_CODEC_IO_BLOCK IOBlockDecode[3];
};

// warning: multiple differing types with the same name, only one recovered
struct _sifm_rpc_data {
	/*   0 */ void* paddr;
	/*   4 */ unsigned int pid;
	/*   8 */ int tid;
	/*   c */ unsigned int mode;
};

typedef /* function */ void** sceSifMEndFunc;

// warning: multiple differing types with the same name, only one recovered
struct _sifm_client_data {
	/*   0 */ struct _sifm_rpc_data rpcd;
	/*  10 */ unsigned int command;
	/*  14 */ void* buff;
	/*  18 */ void* gp;
	/*  1c */ sceSifMEndFunc func;
	/*  20 */ void* para;
	/*  24 */ void* serve;
	/*  28 */ int sema;
	/*  2c */ int unbind;
	/*  30 */ int buffersize;
	/*  34 */ int stacksize;
	/*  38 */ int prio;
};

typedef struct _sifm_client_data sceSifMClientData;

struct sceInetAddress {
	/*   0 */ int reserved;
	/*   4 */ char data[12];
};

typedef struct sceInetAddress sceInetAddress_t;

struct sceInetParam {
	/*   0 */ int type;
	/*   4 */ int local_port;
	/*   8 */ struct sceInetAddress remote_addr;
	/*  18 */ int remote_port;
	/*  1c */ int reserved[9];
};

typedef struct sceInetParam sceInetParam_t;

struct IPAddress {
	/*   0 */ sceInetAddress_t address;
};

struct IPEndPoint {
	/*   0 */ sceInetAddress_t address;
	/*  10 */ int port;
};

struct nwSocket {
	static sceSifMClientData s_cd;
	static char s_netBuffer[1024];
	static bool s_initialized;
	/*   0 */ struct IPAddress m_targetIPAddress;
	/*  10 */ struct IPEndPoint m_targetEndPoint;
	/*  24 */ struct IPEndPoint m_genericLocalEndPoint;
	/*  38 */ int m_socketHandle;
	/*  3c */ bool m_connected;
};

enum eINTERP_TYPE {
	POSITION = 0,
	ROTATION = 1,
	SCALE = 2,
	VISIBILITY = 3,
	VERTEXANIM_TIME = 4,
	COLOR = 5,
	eINTERP_TYPE_MAX = 6
	UNDEFINED = 6
};

// warning: multiple differing types with the same name, only one recovered
struct KeyFramerBehavior2f : /* 0 */ struct iBehavior {
	static unsigned int id;
	/*  14 */ iFrame* m_frame_to_mod;
	/*  18 */ float* m_ptr_times[6];
	/*  30 */ void* m_ptr_data[6];
	/*  48 */ int m_number_keys[6];
	/*  60 */ float m_duration;
	/*  64 */ struct Channel1f mTimeChannel;
	/*  68 */ enum eINTERP_TYPE m_interp_type;
};

struct Widget3d_2D : /* 0 */ iFrame {
	static unsigned int id;
	/*  40 */ struct Channel1f Rotation;
	/*  44 */ float m_widget_frame;
	/*  48 */ unsigned int m_widget_id;
	/*  4c */ void* m_widget_data_source;
};

typedef unsigned int tARGB;
typedef struct mtx3 IGE_MTX3;

struct GarbageCollector {
	/*   0 */ unsigned int m_current_position;
	/*   4 */ unsigned int m_max_position;
	/*   8 */ unsigned int m_min_position;
	/*   c */ unsigned int m_extra_data;
	/*  10 */ /* function */ void** m_callback_destroy_object;
};

// warning: multiple differing types with the same name, only one recovered
struct arrayCell {
	/*   0 */ HANDLE_ID key;
	/*   4 */ struct iObject* mp_ptr;
};

struct HashTable<iObject,1024> : /* 0 */ struct Lockable {
	static unsigned char m_vacated_sentinel;
	/*   4 */ int m_current_number_of_entries;
	/*   8 */ struct arrayCell m_data[1024];
};

struct HashTable<TimeLine,48> : /* 0 */ struct Lockable {
	static unsigned char m_vacated_sentinel;
	/*   4 */ int m_current_number_of_entries;
	/*   8 */ struct arrayCell m_data[48];
};

struct CanvasData {
	/*   0 */ struct BoundingRectangle m_rect;
	/*  18 */ unsigned int m_timeline_ids[16];
	/*  58 */ IgeSmartPtr<iFrame> msp_m_top_layer_frames[35];
	/*  e4 */ GuiState* pGuiStateCell[16];
	/* 124 */ GuiState* pGuiStateSwapToCell[16];
	/* 164 */ GuiState* mReturnState[16];
	/* 1a4 */ bool mReturned[16];
	/* 1b4 */ bool mRequestedKillThread[16];
	/* 1c4 */ int mCurrentThread;
	/* 1c8 */ int m_canvas_id;
	/* 1cc */ struct HashTable<iObject,1024> mHashIndex;
	/* 21d4 */ struct HashTable<TimeLine,48> mHashTimelineIndex;
	/* 235c */ EventQue mEventQue;
	/* 266c */ HANDLE_ID m_current_channel_id_counter;
	/* 2670 */ int m_norender_counter;
	/* 2674 */ void* mp_ige_data;
	/* 2678 */ unsigned int m_data_layer;
};

struct Channel3f {
	/*   0 */ float m_x;
	/*   4 */ float m_y;
	/*   8 */ float m_z;
	static unsigned int id;
};

struct Channel1UInt {
	/*   0 */ unsigned int m_ux;
	static unsigned int id;
};

enum eHeapType {
	HEAP_CHANNEL = 0,
	HEAP_WIDGET = 1,
	HEAP_EVENT_LIST = 2,
	HEAP_TIMELINE = 3,
	HEAP_FRAME_CONTAINER = 4,
	HEAP_TYPES_MAX = 5
};

struct GuiNullState : /* 0 */ struct GuiState {
};

enum eCONTROL_FLAGS {
	MASTER_OWNER_DELETE_CALLED = 1
};

enum eScreenTypes {
	NTSC_SCREEN = 0,
	PAL_SCREEN = 1,
	SCREEN_TYPES_MAX = 2
};

struct Scissoring_s {
	/*   0 */ float l;
	/*   4 */ float t;
	/*   8 */ float r;
	/*   c */ float b;
};

struct DrawParams {
	/*   0 */ int iUsing;
	/*   4 */ int iIcon;
	/*   8 */ void* pImage;
	/*   c */ float fShadowX;
	/*  10 */ float fShadowY;
	/*  14 */ unsigned int iShadowColor;
	/*  18 */ unsigned int vColors[4];
	/*  28 */ float fFade;
};

struct Widget3d : /* 0 */ struct iFrame {
	static unsigned int id;
	/*  40 */ struct Channel2f Rotation;
	/*  48 */ float m_widget_frame;
	/*  4c */ unsigned int m_widget_id;
	/*  50 */ void* m_widget_data_source;
};

enum eX_WINDOWTEXT_ALIGNMENT {
	ALIGN_WINDOWTEXT_X_LEFT = 0,
	ALIGN_WINDOWTEXT_X_CENTER = 1
};

enum eY_WINDOWTEXT_ALIGNMENT {
	ALIGN_WINDOWTEXT_Y_UP = 0,
	ALIGN_WINDOWTEXT_Y_CENTER = 1
};

typedef /* function */ void* FUNC_2FLOAT;
typedef /* function */ void* FUNC_1FLOAT;
typedef /* function */ void* FUNC_1UINT;
typedef /* function */ void* FUNC_2UINT;
typedef /* function */ void* FUNC_1PCHAR;
typedef /* function */ void* FUNC_ARGB;
typedef /* function */ void* FUNC_4ARGB;
typedef /* function */ void* FUNC_VOID;
typedef /* function */ void* FUNC_4FLOAT;
typedef /* function */ void* FUNC_PVOID1UINT;
typedef /* function */ void* FUNC_1UINTBOOL;
typedef /* function */ void* FUNC_2RUINT;
typedef /* function */ void* FUNC_1RFLOAT;
typedef /* function */ void* FUNC_2RFLOAT;
typedef /* function */ void* FUNC_4RFLOAT;
typedef /* function */ void* FUNC_1PP2S1UINT;

struct HashTable<bool ()(iObject *, float, float),8> : /* 0 */ struct Lockable {
	static unsigned char m_vacated_sentinel;
	/*   4 */ int m_current_number_of_entries;
	/*   8 */ struct arrayCell m_data[8];
};

struct Command<bool ()(iObject *, float, float),8> {
	/*   0 */ struct HashTable<bool ()(iObject *, float, float),8> commandHash;
};

struct HashTable<bool ()(iObject *, float &, float &),8> : /* 0 */ struct Lockable {
	static unsigned char m_vacated_sentinel;
	/*   4 */ int m_current_number_of_entries;
	/*   8 */ struct arrayCell m_data[8];
};

struct Command<bool ()(iObject *, float &, float &),8> {
	/*   0 */ struct HashTable<bool ()(iObject *, float &, float &),8> commandHash;
};

struct HashTable<bool ()(iObject *, char *),8> : /* 0 */ struct Lockable {
	static unsigned char m_vacated_sentinel;
	/*   4 */ int m_current_number_of_entries;
	/*   8 */ struct arrayCell m_data[8];
};

struct Command<bool ()(iObject *, char *),8> {
	/*   0 */ struct HashTable<bool ()(iObject *, char *),8> commandHash;
};

struct HashTable<bool ()(iObject *, char **, short int, short int, unsigned int),8> : /* 0 */ struct Lockable {
	static unsigned char m_vacated_sentinel;
	/*   4 */ int m_current_number_of_entries;
	/*   8 */ struct arrayCell m_data[8];
};

struct Command<bool ()(iObject *, char **, short int, short int, unsigned int),8> {
	/*   0 */ struct HashTable<bool ()(iObject *, char **, short int, short int, unsigned int),8> commandHash;
};

struct HashTable<bool ()(iObject *, float),8> : /* 0 */ struct Lockable {
	static unsigned char m_vacated_sentinel;
	/*   4 */ int m_current_number_of_entries;
	/*   8 */ struct arrayCell m_data[8];
};

struct Command<bool ()(iObject *, float),8> {
	/*   0 */ struct HashTable<bool ()(iObject *, float),8> commandHash;
};

struct HashTable<bool ()(iObject *, unsigned int),8> : /* 0 */ struct Lockable {
	static unsigned char m_vacated_sentinel;
	/*   4 */ int m_current_number_of_entries;
	/*   8 */ struct arrayCell m_data[8];
};

struct Command<bool ()(iObject *, unsigned int),8> {
	/*   0 */ struct HashTable<bool ()(iObject *, unsigned int),8> commandHash;
};

struct HashTable<bool ()(iObject *, unsigned int, unsigned int),8> : /* 0 */ struct Lockable {
	static unsigned char m_vacated_sentinel;
	/*   4 */ int m_current_number_of_entries;
	/*   8 */ struct arrayCell m_data[8];
};

struct Command<bool ()(iObject *, unsigned int, unsigned int),8> {
	/*   0 */ struct HashTable<bool ()(iObject *, unsigned int, unsigned int),8> commandHash;
};

struct HashTable<bool ()(iObject *, float &),8> : /* 0 */ struct Lockable {
	static unsigned char m_vacated_sentinel;
	/*   4 */ int m_current_number_of_entries;
	/*   8 */ struct arrayCell m_data[8];
};

struct Command<bool ()(iObject *, float &),8> {
	/*   0 */ struct HashTable<bool ()(iObject *, float &),8> commandHash;
};

struct HashTable<bool ()(iObject *),8> : /* 0 */ struct Lockable {
	static unsigned char m_vacated_sentinel;
	/*   4 */ int m_current_number_of_entries;
	/*   8 */ struct arrayCell m_data[8];
};

struct Command<bool ()(iObject *),8> {
	/*   0 */ struct HashTable<bool ()(iObject *),8> commandHash;
};

struct HashTable<bool ()(iObject *, float, float, float, float),8> : /* 0 */ struct Lockable {
	static unsigned char m_vacated_sentinel;
	/*   4 */ int m_current_number_of_entries;
	/*   8 */ struct arrayCell m_data[8];
};

struct Command<bool ()(iObject *, float, float, float, float),8> {
	/*   0 */ struct HashTable<bool ()(iObject *, float, float, float, float),8> commandHash;
};

struct HashTable<bool ()(iObject *, void *, unsigned int),8> : /* 0 */ struct Lockable {
	static unsigned char m_vacated_sentinel;
	/*   4 */ int m_current_number_of_entries;
	/*   8 */ struct arrayCell m_data[8];
};

struct Command<bool ()(iObject *, void *, unsigned int),8> {
	/*   0 */ struct HashTable<bool ()(iObject *, void *, unsigned int),8> commandHash;
};

struct HashTable<bool ()(iObject *, unsigned int, bool &),8> : /* 0 */ struct Lockable {
	static unsigned char m_vacated_sentinel;
	/*   4 */ int m_current_number_of_entries;
	/*   8 */ struct arrayCell m_data[8];
};

struct Command<bool ()(iObject *, unsigned int, bool &),8> {
	/*   0 */ struct HashTable<bool ()(iObject *, unsigned int, bool &),8> commandHash;
};

struct HashTable<bool ()(iObject *, unsigned int &, unsigned int &),8> : /* 0 */ struct Lockable {
	static unsigned char m_vacated_sentinel;
	/*   4 */ int m_current_number_of_entries;
	/*   8 */ struct arrayCell m_data[8];
};

struct Command<bool ()(iObject *, unsigned int &, unsigned int &),8> {
	/*   0 */ struct HashTable<bool ()(iObject *, unsigned int &, unsigned int &),8> commandHash;
};

struct HashTable<bool ()(iObject *, float &, float &, float &, float &),8> : /* 0 */ struct Lockable {
	static unsigned char m_vacated_sentinel;
	/*   4 */ int m_current_number_of_entries;
	/*   8 */ struct arrayCell m_data[8];
};

struct Command<bool ()(iObject *, float &, float &, float &, float &),8> {
	/*   0 */ struct HashTable<bool ()(iObject *, float &, float &, float &, float &),8> commandHash;
};

struct HashTable<bool ()(iObject *, unsigned int, unsigned int, unsigned int, unsigned int),8> : /* 0 */ struct Lockable {
	static unsigned char m_vacated_sentinel;
	/*   4 */ int m_current_number_of_entries;
	/*   8 */ struct arrayCell m_data[8];
};

struct Command<bool ()(iObject *, unsigned int, unsigned int, unsigned int, unsigned int),8> {
	/*   0 */ struct HashTable<bool ()(iObject *, unsigned int, unsigned int, unsigned int, unsigned int),8> commandHash;
};

struct HashTable<bool ()(iObject *, float, float),3> : /* 0 */ struct Lockable {
	static unsigned char m_vacated_sentinel;
	/*   4 */ int m_current_number_of_entries;
	/*   8 */ struct arrayCell m_data[3];
};

struct Command<bool ()(iObject *, float, float),3> {
	/*   0 */ struct HashTable<bool ()(iObject *, float, float),3> commandHash;
};

struct HashTable<bool ()(iObject *, float),3> : /* 0 */ struct Lockable {
	static unsigned char m_vacated_sentinel;
	/*   4 */ int m_current_number_of_entries;
	/*   8 */ struct arrayCell m_data[3];
};

struct Command<bool ()(iObject *, float),3> {
	/*   0 */ struct HashTable<bool ()(iObject *, float),3> commandHash;
};

struct HashTable<bool ()(iObject *, unsigned int),3> : /* 0 */ struct Lockable {
	static unsigned char m_vacated_sentinel;
	/*   4 */ int m_current_number_of_entries;
	/*   8 */ struct arrayCell m_data[3];
};

struct Command<bool ()(iObject *, unsigned int),3> {
	/*   0 */ struct HashTable<bool ()(iObject *, unsigned int),3> commandHash;
};

enum eWINDOWTEXT_SCROLL_ALWAYS {
	SCROLL_IF_NECESSARY = 0,
	SCROLL_ALWAYS = 1
};

enum eWINDOWTEXT_SCROLL_DIRECTION {
	SCROLL_V = 0,
	SCROLL_H = 1
};

enum eWINDOWTEXT_SCROLL_ONCE {
	SCROLL_REPEAT = 0,
	SCROLL_ONCE = 1
};

struct WidgetTextAreaData {
	/*   0 */ struct Channel2f Rotation;
	/*   8 */ int mFontTable;
	/*   c */ char* pExternalStringMemory;
	/*  10 */ char** pExternalStringListHandle;
	/*  14 */ short int stringListCnt;
	/*  16 */ short int selectedIdx;
	/*  18 */ unsigned int font_FX;
	/*  1c */ bool mAutoScale;
	/*  1e */ short unsigned int mMaxWidth;
	/*  20 */ float mMinimumScale;
	/*  24 */ float mTextScale;
	/*  28 */ float mSelectedLineX;
	/*  2c */ float mSelectedLineY;
	/*  30 */ struct ChannelARGB colorSelected;
	/*  34 */ struct Channel2f Scroll;
	/*  3c */ struct Channel1f m_line_spacing;
	/*  40 */ short unsigned int m_widget_text_area_control;
	/*  42 */ unsigned char pointSize;
	/*  44 */ short int scroll_delay;
	/*  48 */ float scroll_speed;
	/*  4c */ short int scroll_repeat;
	/*  4e */ short int scroll_delay_counter;
	/*  50 */ char font_text;
	/*  51 */ char auto_scroll_state;
	/*  52 */ char did_first_pass;
};

typedef /* function */ void** FNP_PRESENTER_CB;

struct WidgetWheel : /* 0 */ struct iFrame {
	/*  40 */ struct Channel2f Rotation;
	/*  48 */ FNP_PRESENTER_CB pPresenter;
	/*  4c */ struct ChannelARGB color;
	/*  50 */ int mTextureId;
};

// warning: multiple differing types with the same name, only one recovered
struct Master {
	/*   0 */ unsigned int UID;
	/*   4 */ struct Master* pNext;
	/*   8 */ struct Master* pPrev;
	/*   c */ __vtbl_ptr_type* $vf2418;
};

struct VehicleMaster : /* 0 */ struct Master {
	static struct VehicleMaster MasterMemory[0];
};

struct ShotMaster : /* 0 */ struct Master {
	static struct ShotMaster MasterMemory[0];
};

struct BaseMaster : /* 0 */ struct Master {
	static struct BaseMaster MasterMemory[0];
};

struct PowerupMaster : /* 0 */ struct Master {
	static struct PowerupMaster MasterMemory[0];
};

struct Game : /* 0 */ struct Guber {
	/*  18 */ int m_ResetWorld;
};

enum eGadgetID {
	GADGET_UNDEFINED = 0,
	GADGET_WRENCH = 1,
	GADGET_MACHINEGUN = 2,
	GADGET_SHOTGUN = 3,
	GADGET_ROCKETLAUNCHER = 4,
	GADGET_SNIPERGUN = 5,
	GADGET_MINEGUN = 6,
	GADGET_GRENADELAUNCHER = 7,
	GADGET_HOLOSHIELD = 8,
	GADGET_MINITURRET = 9,
	GADGET_BFG = 10,
	GADGET_GRINDRAIL = 11,
	GADGET_EMP = 12,
	GADGET_HACKERRAY = 13,
	GADGET_MP_GRAPPLING_HOOK = 14,
	GADGET_FLAIL = 15,
	GADGET_SHIELDLINK = 16,
	GADGET_MP_CHARGE_BOOTS = 17,
	GADGET_MP_MAGNE_BOOTS = 18,
	GADGET_MP_GRIND_BOOTS = 19,
	TOTAL_GADGETS = 20
	TOTAL_GADGETS_DEFS_SIZE = 20
	GADGET_MP_UNEQUIP = 20
};

struct tNW_ConvertToJuggernaut {
	/*   0 */ char netPlayerIndex;
};

struct tNW_KillDeathMessage {
	/*   0 */ signed char killingPlayerIndex;
	/*   1 */ unsigned char deathState;
	/*   2 */ signed char deadPlayerIndex;
	/*   3 */ signed char killingWeapon;
	/*   4 */ signed char killType;
	/*   8 */ unsigned int killerUID;
	/*   c */ unsigned int deathData;
	/*  10 */ short int iTag;
	/*  12 */ short int iTagFlg;
	/*  14 */ int netFrameTime;
};

struct HeroOpt {
	/*   0 */ bool RemoteGadgetLeanUpdateMachinegun;
	/*   1 */ bool RemoteGadgetLeanUpdateShotgun;
	/*   2 */ bool RemoteGadgetLeanUpdateRocket;
	/*   3 */ bool RemoteGadgetLeanUpdateSniper;
	/*   4 */ bool RemoteGadgetLeanUpdateGrenade;
	/*   5 */ bool RemoteGadgetLeanUpdateHoloshield;
	/*   6 */ bool RemoteGadgetUpdateOnlyOnEvent;
	/*   7 */ bool RemoteInterpsOnlyNoBehavior;
	/*   8 */ bool LessRemoteKneeBump;
	/*   9 */ bool LessRemoteMatchGroundSlope;
	/*   a */ bool NoRemoteOffScreenAnim;
	/*   b */ bool _leanUpdateKicksAss_UpdateWasSkippedFlag;
};

struct DeathMatchGameData {
	/*   0 */ int resurrectionPts[64];
	/* 100 */ int pad1;
	/* 104 */ int randomSpawn;
	/* 108 */ int smartSpawnPts;
	/* 10c */ int pad[13];
};

struct update191 {
	/*   0 */ int swing;
	/*   4 */ float radius;
	/*   8 */ int vehicle;
	/*   c */ float maxMomentum;
	/*  10 */ float initMomentum;
	/*  14 */ float curMomentum;
	/*  18 */ int priorityCube;
	/*  1c */ int ignoreCube;
	/*  20 */ float maxRange;
	/*  24 */ float radialGain;
	/*  28 */ float radialDamp;
	/*  2c */ float radialLimit;
	/*  30 */ int waitForSegment;
	/*  34 */ int alignHero;
	/*  38 */ float turnSpeed;
	/*  3c */ int trigger;
	/*  40 */ float shellScroll;
	/*  44 */ int pad[3];
};

struct update6315 {
	/*   0 */ struct mtx4 blurMat;
	/*  40 */ struct vec4 vel;
	/*  50 */ struct vec4 targetPos;
	/*  60 */ float speed;
	/*  64 */ float decel;
	/*  68 */ int returnTimer;
	/*  6c */ int soundReplayTimer;
	/*  70 */ float blurCnt;
	/*  74 */ short int attackIdCnt;
	/*  76 */ short int autoRebound;
	/*  78 */ short int lastSeq;
	/*  7a */ short int lastThrowDamageId;
	/*  7c */ short int attackId;
	/*  7e */ short int targetPosValid;
};

struct update4239 {
	/*   0 */ struct vec4 up;
	/*  10 */ struct quat qSplash;
	/*  20 */ char cShowEffect;
	/*  21 */ char cShowTangentEffects;
	/*  22 */ char cPerformDamage;
	/*  23 */ char cTubeTimer[1];
	/*  24 */ int stateTimer;
	/*  28 */ float zAccel;
	/*  2c */ int alpha;
	/*  30 */ int lastState;
	/*  34 */ int shockAlpha;
	/*  38 */ int shotUID;
	/*  3c */ struct Hero* pUser;
	/*  40 */ int LOD;
	/*  44 */ int level10;
	/*  48 */ int level10head;
	/*  4c */ float vapShellSize;
	/*  50 */ struct vec4 weaponGravAtImpact;
};

struct HeroJumpPadInterface {
	/*   0 */ /* function */ void** IsJumpPadOn;
};

struct M8309_Interface_t {
	/*   0 */ /* function */ void** GetTeam;
	/*   4 */ /* function */ void** SetLockedStatusAll;
	/*   8 */ /* function */ void** SetLockedStatus;
	/*   c */ /* function */ void** GetNumUnlockedNodes;
	/*  10 */ /* function */ void** UnlockRandomNode;
	/*  14 */ /* function */ void** GetNumHomeNodes;
	/*  18 */ /* function */ void** SetHomeNodes;
	/*  1c */ /* function */ void** Disable;
	/*  20 */ /* function */ void** IsDisabled;
};

// warning: multiple differing types with the same name, only one recovered
struct RemoteHero : /* 0 */ struct Hero {
	/* 2fe0 */ struct GAMECAMERA DummyCamera;
	/* 3450 */ struct PAD RemotePad;
	/* 3a10 */ bool completedEnoughUpdates;
	/* 3a11 */ bool rotOutOfSyncLastUpdate;
	/* 3a12 */ char padFrameChunksReceived;
	/* 3a13 */ char posOutOfSyncLastUpdate;
	/* 3a14 */ char stateAtSyncFrame;
	/* 3a20 */ struct vec4 receivedSyncPos;
	/* 3a30 */ struct vec4 posAtSyncFrame;
	/* 3a40 */ struct vec4 syncPosDifference;
	/* 3a50 */ struct vec4f receivedSyncRot;
	/* 3a60 */ struct vec4f rotAtSyncFrame;
	/* 3a70 */ float interpVel;
	/* 3a74 */ float syncRotDifference;
	/* 3a78 */ int flags;
	/* 3a7c */ int sequenceIdOfSyncData;
	/* 3a80 */ enum HERO_STATE_ENUM receivedState;
	/* 3a90 */ struct vec4 remoteCorrectionVel;
	/* 3aa0 */ float remoteCorrectionRotVel;
	/* 3aa4 */ char syncFrameOffset;
};

struct tNW_VehiclePosRotUpdateMessage {
	/*   0 */ unsigned char flags;
	/*   4 */ unsigned int UID;
	/*   8 */ int timeStamp;
	/*   c */ short int rot_x;
	/*   e */ short int rot_y;
	/*  10 */ short int rot_z;
	/*  12 */ short int pos_x;
	/*  14 */ short int pos_y;
	/*  16 */ short int pos_z;
};

struct update10094 {
	/*   0 */ VehicleBase* pVehicle;
	/*   4 */ moby* pVehiclePad;
	/*   8 */ float fStageFrac;
	/*   c */ float fEffectRadius;
	/*  10 */ float fEffectHeight;
	/*  14 */ float fCollScale;
	/*  18 */ int iColor;
	/*  1c */ int iGlowsColor;
	/*  20 */ struct vec4 vSpawnPadSurfacePos;
};

struct update8248 {
	/*   0 */ struct SubVars sVars;
	/*  50 */ struct TargetVars tVars;
	/*  e0 */ struct FlashVars fVars;
	/*  f0 */ struct EffectorVars eVars;
	/* 100 */ struct ReactVars rVars;
	/* 180 */ struct FpsCamVars driverFpsVars;
	/* 2e0 */ VehicleBase* pVehicleBase;
	/* 2e4 */ float fCameraYaw;
	/* 2e8 */ float fLastCameraBodyZ;
	/* 2ec */ float fLastReticuleFrac;
	/* 2f0 */ char bHasLegs;
	/* 2f1 */ unsigned char cChargedMortarBarrels;
	/* 2f2 */ char cTimer;
	/* 2f3 */ char cDriverCameraActive;
	/* 2f4 */ moby* pLegs;
	/* 2f8 */ float fFacingYaw;
	/* 2fc */ float fAimPitch;
	/* 300 */ float fYawSpeed;
	/* 304 */ float fPitchSpeed;
	/* 308 */ float fGunRotSpeed;
	/* 30c */ int iGunFireTimer;
	/* 310 */ int iMortarChargeTimer;
	/* 314 */ int iMortarFireTimer;
	/* 318 */ float fMortarPitch;
	/* 31c */ float fMortarRotSpeed;
	/* 320 */ moby* pController;
	/* 324 */ float fMortarAimYaw;
	/* 328 */ float fMortarAimPitch;
	/* 32c */ float fMortarAimYawSpeed;
	/* 330 */ float fMortarAimPitchSpeed;
	/* 334 */ float fLastPassengerCameraBodyZ;
	/* 338 */ float fLastPassengerReticuleFrac;
	/* 33c */ char cPassengerCameraActive;
	/* 33d */ char cMortarBarrelToFire;
	/* 33e */ char bLegsControlled;
	/* 33f */ char killHornSound;
	/* 340 */ int iMortarProjectileGroup;
	/* 344 */ float fFrontCanopyPitch;
	/* 348 */ float fBackCanopyPitch;
	/* 34c */ char bPreexplodeSoundPlayed;
	/* 34d */ char bExplodeSoundPlayed;
	/* 34e */ unsigned char cHitEffectAnyActive;
	/* 34f */ unsigned char cHitEffectLastUsed;
	/* 350 */ short int iSoundTurning;
	/* 352 */ short int iSoundMortarCharge;
	/* 354 */ char bAutoGrabPlayer;
	/* 355 */ char bCannotExitVehicle;
	/* 356 */ short int iSoundHorn;
	/* 358 */ moby* pStationaryTurretBase;
	/* 35c */ unsigned char cHitEffectTimers[2];
	/* 35e */ char cPadB[1];
	/* 35f */ char bAutoSpawn;
	/* 360 */ float fHitEffectPitches[2];
	/* 368 */ float fHitEffectYaws[2];
	/* 370 */ char mortarRefireDelay[6];
	/* 376 */ char cMortarBarrelCharging;
	/* 377 */ char cNextMortarTarget;
	/* 378 */ moby* pMortarTargets[6];
	/* 390 */ struct vec4 vLastCameraPos;
	/* 3a0 */ struct vec4f vLastCameraRot;
	/* 3b0 */ struct vec4 vLastPassengerCameraPos;
	/* 3c0 */ struct vec4f vLastPassengerCameraRot;
	/* 3d0 */ struct Manipulator gunPitchManips[2];
	/* 450 */ struct Manipulator gunRotManips[2];
	/* 4d0 */ struct Manipulator mortarManip;
	/* 510 */ struct Manipulator frontCanopyManip;
	/* 550 */ struct Manipulator backCanopyManip;
};

struct GuberMoby : /* 0 */ struct Guber {
	/*  18 */ MobyInstance* pMoby;
	/*  1c */ short unsigned int modeBits;
	/*  20 */ MobyUpdateFn* pNetUpdateFunc;
	/*  24 */ int clientUpdateTime;
	/*  28 */ int teamNum;
	/*  2c */ bool enableAutoMigrateMaster;
	/*  30 */ int lastMasterMigrateTime;
	/*  34 */ int currentMaster;
	/*  38 */ int nextMaster;
	/*  3c */ int masterTransferTime;
	/*  40 */ int lastMasterMessageTime;
	/*  44 */ int masterHandler;
	/*  48 */ int assignedMaster;
	/*  4c */ int lastAssignedTransferMaster;
	/*  50 */ unsigned char lastMessageNum;
	/*  51 */ unsigned char messageNum;
	static int sLastPlayerDroppedTime;
	static struct GuberMoby* pNetMobyClassEventHandler;
	static struct GuberMoby ObjectMemory[512];
};

struct Base : /* 0 */ struct GuberMoby {
	static struct Base ObjectMemory[0];
};

struct Team : /* 0 */ struct Guber {
	/*  18 */ int Color;
	/*  1c */ int NumPlayers;
	/*  20 */ int NumBases;
	/*  24 */ unsigned int PlayerUID[10];
	/*  4c */ Base* OurBase[0];
	/*  4c */ int EngineerBotPlayer;
	static struct Team ObjectMemory[0];
	static char TeamColor[3][11];
	static int NumTeams;
};

struct Powerup : /* 0 */ struct Guber {
	static struct Powerup ObjectMemory[0];
};

struct TeamMaster : /* 0 */ struct Master {
	static struct TeamMaster MasterMemory[0];
};

typedef /* function */ void* MobyMasterUpdateFn;

struct GuberMobyMaster : /* 0 */ struct Master {
	/*  10 */ MobyInstance* pMoby;
	/*  14 */ MobyMasterUpdateFn* pMasterUpdateFunc;
	/*  18 */ int LastMasterUpdate;
	static struct GuberMobyMaster MasterMemory[512];
};

struct tShot {
	/*   0 */ MobyInstance* pMoby;
	/*   4 */ char bLocal;
	/*   5 */ char bHitSomething;
	/*   6 */ char bVelocityPackedIntoTargetPos;
	/*   7 */ char miscInfo;
	/*   8 */ unsigned int flags;
	/*   c */ short int type;
	/*   e */ short int state;
	/*  10 */ int lifetime;
	/*  14 */ int creationTime;
	/*  18 */ struct Hero* sourcePlayer;
	/*  1c */ MobyInstance* excludeMoby;
	/*  20 */ struct Hero* targetPlayer;
	/*  24 */ VehicleBase* targetVehicle;
	/*  28 */ unsigned int targetUID;
	/*  2c */ unsigned int sourceUID;
	/*  30 */ unsigned int UID;
	/*  34 */ int damageIndex;
	/*  38 */ struct tShot* prev;
	/*  3c */ struct tShot* next;
	/*  40 */ struct vec4 targetPos;
};

struct tNW_GameStateMessage {
	/*   0 */ char gameType;
	/*   4 */ int timeEnd;
	/*   8 */ int timeStart;
	/*   c */ char gameState;
	/*   d */ char numTeams;
	/*   e */ short int teamTicketScore[10];
	/*  22 */ char baseTeam[10];
	/*  2c */ int winningTeam;
	/*  30 */ int winningPlayer;
	/*  34 */ int gameIsOver;
	/*  38 */ short int weaponKills[9][10];
	/*  ec */ short int weaponDeaths[9][10];
	/* 1a0 */ short int weaponShotsFired[9][10];
	/* 254 */ short int weaponShotsHit[9][10];
	/* 308 */ float vehicleTime[10];
	/* 330 */ short int vehicleWeaponKills[10];
	/* 344 */ short int vehicleWeaponDeaths[10];
	/* 358 */ short int vehicleRoadKills[10];
	/* 36c */ short int vehicleRoadDeaths[10];
	/* 380 */ short int vehicleShotsFired[10];
	/* 394 */ short int vehicleShotsHit[10];
	/* 3a8 */ short int playerKills[10];
	/* 3bc */ short int playerDeaths[10];
	/* 3d0 */ short int suicides[10];
	/* 3e4 */ short int multiKills[10];
	/* 3f8 */ short int sniperKills[10];
	/* 40c */ short int wrenchKills[10];
	/* 420 */ char conquestNodesCaptured[10];
	/* 42a */ char conquestNodeSaves[10];
	/* 434 */ char conquestDefensiveKills[10];
	/* 43e */ char conquestPoints[10];
	/* 448 */ char ctfFlagCaptures[10];
	/* 452 */ char ctfFlagSaves[10];
	/* 45c */ float kingHillHoldTime[10];
	/* 484 */ float juggernautTime[10];
	/* 4ac */ short int squats[10];
	/* 4c0 */ short int vehicleSquats[10];
	/* 4d4 */ short int ticketScore[10];
};

struct LocalPlayerYourBaseGameData {
	/*   0 */ int team1_spawnPts[3];
	/*   c */ int team2_spawnPts[3];
	/*  18 */ int nodeResurrectionPts[8];
	/*  38 */ int baseMobys[8];
	/*  58 */ int nodeMobys[8];
	/*  78 */ int team1_StartBase;
	/*  7c */ int team2_StartBase;
	/*  80 */ int baseTeam[8];
	/*  a0 */ int nodeTeam[8];
	/*  c0 */ int origBaseTeam[8];
	/*  e0 */ int baseHealth[8];
	/* 100 */ float totalHudHealth[8];
	/* 120 */ float prevHudHealth[8];
	/* 140 */ float hudHealth[8];
	/* 160 */ int numBases;
	/* 164 */ int winScore;
	/* 168 */ int team3_spawnPts[3];
	/* 174 */ int team4_spawnPts[3];
	/* 180 */ int homeNodeMobys[2];
	/* 188 */ int pad[8];
};

struct CTFGameData {
	/*   0 */ int blueFlagMoby[2];
	/*   8 */ int redFlagMoby[2];
	/*  10 */ int team3FlagMoby[2];
	/*  18 */ int team4FlagMoby[2];
	/*  20 */ int teamFlagPositions[4];
	/*  30 */ int pad[8];
};

struct FragMsg {
	/*   0 */ int killer;
	/*   4 */ int killee;
	/*   8 */ int killType;
	/*   c */ int displayFramesLeft;
	/*  10 */ int delayFrames;
};

struct PlayerStats {
	/*   0 */ short int weaponKills[9][10];
	/*  b4 */ short int weaponDeaths[9][10];
	/* 168 */ short int weaponShotsFired[9][10];
	/* 21c */ short int weaponShotsHit[9][10];
	/* 2d0 */ float vehicleTime[10];
	/* 2f8 */ short int vehicleWeaponKills[10];
	/* 30c */ short int vehicleWeaponDeaths[10];
	/* 320 */ short int vehicleRoadKills[10];
	/* 334 */ short int vehicleRoadDeaths[10];
	/* 348 */ short int vehicleShotsFired[10];
	/* 35c */ short int vehicleShotsHit[10];
	/* 370 */ short int playerKills[10];
	/* 384 */ short int playerDeaths[10];
	/* 398 */ short int suicides[10];
	/* 3ac */ short int multiKills[10];
	/* 3c0 */ short int sniperKills[10];
	/* 3d4 */ short int wrenchKills[10];
	/* 3e8 */ char conquestNodesCaptured[10];
	/* 3f2 */ char conquestNodeSaves[10];
	/* 3fc */ char conquestDefensiveKills[10];
	/* 406 */ char conquestPoints[10];
	/* 410 */ char ctfFlagCaptures[10];
	/* 41a */ char ctfFlagSaves[10];
	/* 424 */ float kingHillHoldTime[10];
	/* 44c */ float internalKingHillHoldTime[10];
	/* 474 */ float juggernautTime[10];
	/* 49c */ short int squats[10];
	/* 4b0 */ short int vehicleSquats[10];
	/* 4c4 */ short int ticketScore[10];
};

struct TeamStats {
	/*   0 */ short int teamTicketScore[10];
	/*  14 */ char teamUpgradesLevel1[10];
	/*  1e */ char teamUpgradesLevel2[10];
	/*  28 */ char teamUpgradesLevel3[10];
	/*  34 */ float teamCaptureTimer[10];
	/*  5c */ short int teamCaptureTimerSettings[10];
	/*  70 */ char numNodesOwned[10];
	/*  7c */ float percentNodesCaptured[10];
	/*  a4 */ float nodeHoldTime[10];
	/*  cc */ char flagCaptureCounts[10];
};

struct GameData {
	/*   0 */ int timeEnd;
	/*   4 */ int timeStart;
	/*   8 */ int gameState;
	/*   c */ int numTeams;
	/*  10 */ int winningTeam;
	/*  14 */ int winningPlayer;
	/*  18 */ int baseHoldTime;
	/*  1c */ int fragDisplayCount;
	/*  20 */ struct FragMsg fragMsg[3];
	/*  5c */ int gameEndReceived;
	/*  60 */ int gameEndReason;
	/*  64 */ int gameIsOver;
	/*  68 */ int numNodes;
	/*  6c */ int numStartPlayers;
	/*  70 */ int numStartTeams;
	/*  74 */ int MyTotalSquats;
	/*  78 */ int MyTotalTimesSquatted;
	/*  7c */ int MyTotalGangSquats;
	/*  80 */ int teamCaptain[10];
	/*  a8 */ struct PlayerStats playerStats;
	/* 580 */ struct TeamStats teamStats;
	/* 658 */ struct LocalPlayerYourBaseGameData* allYourBaseGameData;
	/* 65c */ struct CTFGameData* ctfGameData;
	/* 660 */ struct DeathMatchGameData* deathMatchGameData;
};

struct M9838_Interface_t {
	/*   0 */ /* function */ void** CreateMoby;
	/*   4 */ /* function */ void** SetTeam;
	/*   8 */ /* function */ void** GetTeam;
	/*   c */ /* function */ void** FindTeamBase;
	/*  10 */ /* function */ void** FlashBaseForCapture;
	/*  14 */ /* function */ void** FlashBaseForFlagTaken;
};

struct NodesOwned {
	/*   0 */ int UID;
	/*   4 */ int captureTime;
	/*   8 */ int lastUpdateTime;
	/*   c */ int team;
};

struct PlayerHillTime {
	/*   0 */ int captureTime;
	/*   4 */ int lastUpdateTime;
	/*   8 */ int gadgetId;
	/*   c */ float gadgetAmmo;
};

struct GadgetAvailability {
	/*   0 */ enum eGadgetID gadgetID;
	/*   4 */ int levelAvail;
};

enum eMpGadgetDamageType {
	GADGET_DAMAGE_PRIMARY = 0,
	GADGET_DAMAGE_SECONDARY = 1,
	GADGET_MP_DAMAGE_PRIMARY = 2,
	GADGET_MP_DAMAGE_SECONDARY = 3,
	GADGET_DAMAGE_TYPE_MAX = 4
};

enum e_GB_SetTypes {
	GB_SETTYPE_PLAYER = 0,
	GB_SETTYPE_BOT = 1,
	GB_SETTYPE_VEHICLE = 2
};

struct MapDef {
	/*   0 */ int map_img;
	/*   4 */ float left;
	/*   8 */ float right;
	/*   c */ float top;
	/*  10 */ float bottom;
};

struct tNW_Kick {
	/*   0 */ char netPlayerIndex;
};

struct tNW_MobyDestructMessage {
	/*   0 */ int mobyIdx;
	/*   4 */ int netTimeToDestroy;
};

struct t_TransitionData_Lobby {
	/*   0 */ int m_State;
	/*   4 */ int m_Timer;
	/*   8 */ int m_Direction;
	/*   c */ float m_PropBubblesTheta;
	/*  10 */ int m_nMapToRender;
	/*  14 */ float m_fLocalFadeFactor;
};

struct t_TransitionData_Multiplayer {
	/*   0 */ bool m_bDefaultArray[11];
	/*   c */ int m_nMapIDUsed;
	/*  10 */ int m_Timer;
	/*  14 */ int m_State;
	/*  20 */ struct vec4 m_vCamPos;
	/*  30 */ struct vec4f m_vCamRot;
	static int MAX_MAP_NAME_LENGTH;
	static int MAX_TIP_LENGTH;
	/*  40 */ char m_sMapNames[32][10];
	/* 180 */ char m_sGameTypeString[32];
	/* 1a0 */ char m_sTimed[32];
	/* 1c0 */ char m_sNumberOfCTFS[32];
	/* 1e0 */ char m_sPlayerNames[32];
	/* 200 */ char m_sVehicles[32];
	/* 220 */ char m_sNodes[32];
	/* 240 */ char m_sBaseDefenses[32];
	/* 260 */ char m_sUnlimitedAmmo[32];
	/* 280 */ char m_sChargeBootsAlways[32];
	/* 2a0 */ char m_sSpawnWithWeapons[32];
	/* 2c0 */ char m_sWeaponsString[32];
	/* 2e0 */ char m_sSubTitles[32][11];
	/* 440 */ char m_sValues[32][11];
	static int nNumTips;
	/* 5a0 */ char m_sTipToDisplay[256];
	/* 6a0 */ char m_sMapName[32];
	/* 6c0 */ char m_sGameName[32];
	/* 6e0 */ char m_sWeaponsLbl[32];
	/* 700 */ char m_sVehiclesLbl[32];
	/* 720 */ char m_sGameLbls[32][7];
	/* 800 */ char m_sGameValues[32][7];
	/* 8e0 */ int m_numGameSettings;
	/* 8e4 */ char m_sGameTypeLbls[32][6];
	/* 9a4 */ char m_sGameTypeValues[32][6];
	/* a64 */ int m_numGameTypes;
	/* a68 */ bool m_displayBecauseValid;
	/* a69 */ bool m_displayBecauseNotLobby;
	/* a6c */ int m_nTipToShow;
	/* a70 */ int m_nTimeInMinutes;
	/* a74 */ bool m_bWeaponEnabledSniper;
	/* a75 */ bool m_bWeaponEnabledMachineGunN60;
	/* a76 */ bool m_bWeaponEnabledShotGunBlitz;
	/* a77 */ bool m_bWeaponEnabledRocketLauncher;
	/* a78 */ bool m_bWeaponEnabledBombLauncherGravity;
	/* a79 */ bool m_bWeaponEnabledMineGlove;
	/* a7a */ bool m_bWeaponEnabledSheepinator;
	/* a7b */ bool m_bWeaponEnabledLavaGun;
};

/*   0 */ long double;

struct complex int {
	/*   0 */ int real;
	/*   4 */ int imag;
};

/*   0 */ complex float;

/*   0 */ complex double;

/*   0 */ complex long double;

enum cmp_type {
	CMP_SI = 0,
	CMP_DI = 1,
	CMP_SF = 2,
	CMP_DF = 3,
	CMP_MAX = 4
};

enum delay_type {
	DELAY_NONE = 0,
	DELAY_LOAD = 1,
	DELAY_HILO = 2,
	DELAY_HILO1 = 3,
	DELAY_FCMP = 4
};

enum processor_type {
	PROCESSOR_DEFAULT = 0,
	PROCESSOR_R3000 = 1,
	PROCESSOR_R3900 = 2,
	PROCESSOR_R6000 = 3,
	PROCESSOR_R4000 = 4,
	PROCESSOR_R4100 = 5,
	PROCESSOR_R4300 = 6,
	PROCESSOR_R4600 = 7,
	PROCESSOR_R4650 = 8,
	PROCESSOR_R5000 = 9,
	PROCESSOR_R5400 = 10,
	PROCESSOR_R5900 = 11,
	PROCESSOR_R8000 = 12
};

enum mips_abicalls_type {
	MIPS_ABICALLS_NO = 0,
	MIPS_ABICALLS_YES = 1
};

enum block_move_type {
	BLOCK_MOVE_NORMAL = 0,
	BLOCK_MOVE_NOT_LAST = 1,
	BLOCK_MOVE_LAST = 2
};

enum reg_class {
	NO_REGS = 0,
	M16_NA_REGS = 1,
	M16_REGS = 2,
	T_REG = 3,
	M16_T_REGS = 4,
	GR_REGS = 5,
	FP_REGS = 6,
	HI_REG = 7,
	LO_REG = 8,
	HILO_REG = 9,
	MD_REGS = 10,
	HI_AND_GR_REGS = 11,
	LO_AND_GR_REGS = 12,
	HILO_AND_GR_REGS = 13,
	HI1_REG = 14,
	LO1_REG = 15,
	HILO1_REG = 16,
	MD1_REGS = 17,
	HI1_AND_GR_REGS = 18,
	LO1_AND_GR_REGS = 19,
	HILO1_AND_GR_REGS = 20,
	HI01_REG = 21,
	LO01_REG = 22,
	HILO01_REG = 23,
	MD01_REGS = 24,
	HI01_AND_GR_REGS = 25,
	LO01_AND_GR_REGS = 26,
	HILO01_AND_GR_REGS = 27,
	ST_REGS = 28,
	ALL_REGS = 29,
	LIM_REG_CLASSES = 30
};

struct mips_frame_info {
	/*   0 */ long int total_size;
	/*   8 */ long int var_size;
	/*  10 */ long int args_size;
	/*  18 */ long int extra_size;
	/*  20 */ int gp_reg_size;
	/*  24 */ int fp_reg_size;
	/*  28 */ long int mask;
	/*  30 */ long int fmask;
	/*  38 */ long int gp_save_offset;
	/*  40 */ long int fp_save_offset;
	/*  48 */ long int gp_sp_offset;
	/*  50 */ long int fp_sp_offset;
	/*  58 */ int initialized;
	/*  5c */ int num_gp;
	/*  60 */ int num_fp;
	/*  68 */ long int insns_len;
};

struct mips_args {
	/*   0 */ int gp_reg_found;
	/*   4 */ int arg_number;
	/*   8 */ int arg_words;
	/*   c */ int fp_arg_words;
	/*  10 */ int last_arg_fp;
	/*  14 */ int fp_code;
	/*  18 */ int num_adjusts;
	/*  1c */ rtx_def* adjust[8];
};

typedef struct mips_args CUMULATIVE_ARGS;

enum machine_mode {
	VOIDmode = 0,
	PQImode = 1,
	QImode = 2,
	PHImode = 3,
	HImode = 4,
	PSImode = 5,
	SImode = 6,
	PDImode = 7,
	DImode = 8,
	TImode = 9,
	OImode = 10,
	QFmode = 11,
	HFmode = 12,
	TQFmode = 13,
	SFmode = 14,
	DFmode = 15,
	XFmode = 16,
	TFmode = 17,
	QCmode = 18,
	HCmode = 19,
	SCmode = 20,
	DCmode = 21,
	XCmode = 22,
	TCmode = 23,
	CQImode = 24,
	CHImode = 25,
	CSImode = 26,
	CDImode = 27,
	CTImode = 28,
	COImode = 29,
	BLKmode = 30,
	CCmode = 31,
	MAX_MACHINE_MODE = 32
};

enum mode_class {
	MODE_RANDOM = 0,
	MODE_INT = 1,
	MODE_FLOAT = 2,
	MODE_PARTIAL_INT = 3,
	MODE_CC = 4,
	MODE_COMPLEX_INT = 5,
	MODE_COMPLEX_FLOAT = 6,
	MAX_MODE_CLASS = 7
};

typedef int ptrdiff_t;
typedef int wchar_t;
typedef unsigned int wint_t;
typedef unsigned char UQItype;
typedef int SItype;
typedef unsigned int USItype;
typedef long int DItype;
typedef long unsigned int UDItype;
typedef float SFtype;
typedef double DFtype;
typedef long int word_type;

struct DIstruct {
	/*   0 */ SItype low;
	/*   4 */ SItype high;
};

typedef /* union */ void* DIunion;
typedef /* function */ void** func_ptr;
typedef short int HItype;
typedef short unsigned int UHItype;
// warning: multiple differing types with the same name, only one recovered
typedef UDItype fractype;
// warning: multiple differing types with the same name, only one recovered
typedef USItype halffractype;
// warning: multiple differing types with the same name, only one recovered
typedef DFtype FLO_type;
// warning: multiple differing types with the same name, only one recovered
typedef DItype intfrac;

// warning: multiple differing types with the same name, only one recovered
enum   {
	CLASS_SNAN = 0,
	CLASS_QNAN = 1,
	CLASS_ZERO = 2,
	CLASS_NUMBER = 3,
	CLASS_INFINITY = 4
};

typedef enum   fp_class_type;
typedef /* struct */ void* fp_number_type;
typedef /* union */ void* FLO_union_type;
typedef int __int32_t;
typedef long unsigned int clock_t;
typedef long int time_t;

struct exception {
	/*   0 */ int type;
	/*   4 */ char* name;
	/*   8 */ double arg1;
	/*  10 */ double arg2;
	/*  18 */ double retval;
	/*  20 */ int err;
};

enum __fdlibm_version {
	__fdlibm_ieee = -1,
	__fdlibm_svid = 0,
	__fdlibm_xopen = 1,
	__fdlibm_posix = 2
};

typedef /* union */ void* ieee_double_shape_type;
typedef /* union */ void* ieee_float_shape_type;

/*   0 */ __builtin_va_list;

// warning: multiple differing types with the same name, only one recovered
typedef int ssize_t;
typedef unsigned char unchar;
typedef short unsigned int ushort;
typedef unsigned int uint;
typedef long unsigned int ulong;
typedef char RT_1BYTE;
typedef unsigned char RT_U1BYTE;
typedef short int RT_2BYTE;
typedef short unsigned int RT_U2BYTE;
typedef int RT_4BYTE;
typedef unsigned int RT_U4BYTE;
typedef struct ccc_int128 RT_8BYTE;
typedef long long unsigned int RT_U8BYTE;
typedef float RT_4BYTE_FP;
typedef double RT_8BYTE_FP;
typedef RT_U1BYTE RT_BOOLEAN;
typedef RT_U4BYTE RT_BOOL;
// warning: multiple differing types with the same name, only one recovered
typedef /* struct */ void* RT_LINKADDRESS;
// warning: multiple differing types with the same name, only one recovered
typedef /* struct */ void* RT_DATA_INFO;
// warning: multiple differing types with the same name, only one recovered
typedef /* struct */ void* RT_DATA_VECTOR;
// warning: multiple differing types with the same name, only one recovered
typedef enum   RT_RESULT;
typedef /* function */ void** pf_rt_memory_malloc_callback;
typedef /* function */ void** pf_rt_memory_realloc_callback;
typedef /* function */ void** pf_rt_memory_free_callback;
// warning: multiple differing types with the same name, only one recovered
typedef /* struct */ void* RT_MEMORY_ALIGNED;
typedef /* struct */ void* DMA_PUMP_PARAMS;
typedef /* struct */ void* DMA_PROC_INFO;
typedef __builtin_va_list DMA_PUMP_HANDLE;
typedef /* struct */ void* LIBNETB_MEM_ALIGNED;
// warning: multiple differing types with the same name, only one recovered
typedef <err member> long128;
typedef /* struct */ void* DMA_PUMP;
typedef /* struct */ void* DMA_BLK_HDR;
typedef struct _sif_rpc_data sceSifRpcData;
typedef _sif_serve_data sceSifServeData;
typedef _sif_queue_data sceSifQueueData;
typedef struct _sifm_rpc_data sceSifMRpcData;

struct sceInetInfo {
	/*   0 */ int cid;
	/*   4 */ int proto;
	/*   8 */ int recv_queue_length;
	/*   c */ int send_queue_length;
	/*  10 */ struct sceInetAddress local_adr;
	/*  20 */ int local_port;
	/*  24 */ struct sceInetAddress remote_adr;
	/*  34 */ int remote_port;
	/*  38 */ int state;
	/*  3c */ int reserved[4];
};

typedef struct sceInetInfo sceInetInfo_t;

struct sceInetPollFd {
	/*   0 */ int cid;
	/*   4 */ short int events;
	/*   6 */ short int revents;
};

typedef struct sceInetPollFd sceInetPollFd_t;

struct sceInetIP_MREQ {
	/*   0 */ sceInetAddress_t multiaddr;
	/*  10 */ sceInetAddress_t interface;
};

typedef struct sceInetIP_MREQ sceInetIP_MREQ_t;

struct sceInetRoutingEntry {
	/*   0 */ struct sceInetAddress dstaddr;
	/*  10 */ struct sceInetAddress gateway;
	/*  20 */ struct sceInetAddress genmask;
	/*  30 */ int flags;
	/*  34 */ int mss;
	/*  38 */ int window;
	/*  3c */ char interface[9];
};

typedef struct sceInetRoutingEntry sceInetRoutingEntry_t;
typedef __builtin_va_list CID_B;

struct sceInetParam_b {
	/*   0 */ long int max_msg_len;
	/*   8 */ int b_sync_recv;
	/*   c */ struct sceInetParam param;
};

typedef struct sceInetParam_b sceInetParam_b_t;
typedef enum   LIBNETB_MSG_TYPE;
typedef /* struct */ void* CID_CONTROL;
typedef /* struct */ void* CID_STATE_UPDATE;
typedef /* struct */ void* CID_SYNC;

// warning: multiple differing types with the same name, only one recovered
struct CID_DATA {
	/*   0 */ RT_4BYTE msg_type;
	/*   4 */ RT_4BYTE cid_ee;
	/*   8 */ RT_4BYTE count;
	/*   c */ RT_4BYTE addr_count;
	/*  10 */ RT_4BYTE result;
	/*  14 */ RT_4BYTE flags;
	/*  18 */ __builtin_va_list p0;
	/*  1c */ __builtin_va_list p1;
	/*  20 */ RT_4BYTE s0;
	/*  24 */ RT_4BYTE s1;
	/*  28 */ RT_4BYTE n_recvd;
	/*  2c */ struct CID_DATA* next;
};

// warning: multiple differing types with the same name, only one recovered
struct CID {
	/*   0 */ RT_4BYTE msg_type;
	/*   4 */ RT_4BYTE last_flags;
	/*   8 */ RT_4BYTE result;
	/*   c */ RT_4BYTE b_opened;
	/*  10 */ RT_4BYTE cid_ee;
	/*  14 */ RT_4BYTE cid_iop;
	/*  18 */ RT_4BYTE type;
	/*  1c */ RT_4BYTE local_port;
	/*  20 */ RT_4BYTE remote_port;
	/*  24 */ RT_4BYTE remote_ip;
	/*  28 */ RT_4BYTE b_sync_recv;
	/*  2c */ RT_4BYTE b_sync_outstanding;
	/*  30 */ RT_4BYTE sync_count;
	/*  34 */ __builtin_va_list p_sync_buf;
	/*  38 */ struct CID_DATA* msg_head;
	/*  3c */ struct CID* next;
};

typedef __uint32_t __ULong;
typedef _fpos_t fpos_t;
typedef __sFILE FILE;
// warning: multiple differing types with the same name, only one recovered
typedef /* struct */ void* div_t;
// warning: multiple differing types with the same name, only one recovered
typedef /* struct */ void* ldiv_t;
typedef /* struct */ void* RT_MUTEX_DATA;
typedef enum   RT_CIPHER_TYPE;

// warning: multiple differing types with the same name, only one recovered
struct RC_KEY {
	/*   0 */ unsigned char key[64];
};

typedef /* struct */ void* RCDATA;

// warning: multiple differing types with the same name, only one recovered
struct KEY_CHAIN {
	/*   0 */ struct KEY_CHAIN* prev;
	/*   4 */ struct KEY_CHAIN* next;
	/*   8 */ RT_U4BYTE nID;
	/*   c */ RT_CIPHER_TYPE eCypherType;
	/*  10 */ RSA_KEY* pPubKey;
	/*  14 */ RCDATA* pEncrypt;
	/*  18 */ RCDATA* pDecrypt;
	/*  1c */ RC_KEY* pPeerKey;
};

// warning: multiple differing types with the same name, only one recovered
struct KEY_MASTER {
	/*   0 */ struct KEY_MASTER* prev;
	/*   4 */ struct KEY_MASTER* next;
	/*   8 */ struct KEY_CHAIN* first;
	/*   c */ struct KEY_CHAIN* last;
	/*  10 */ RT_U4BYTE nMasterID;
	/*  14 */ RT_U4BYTE nClientID;
	/*  18 */ RT_U4BYTE nGameID;
	/*  1c */ RSA_KEY* pPubKey;
	/*  20 */ RSA_KEY* pPriKey;
	/*  24 */ RCDATA* pEncrypt;
	/*  28 */ RCDATA* pDecrypt;
	/*  2c */ RC_KEY* pGameKey;
};

typedef /* struct */ void* CRYPT_DME_BASE_GLOBALS;
typedef /* function */ void** GETKEYMASTER_PTR;
typedef /* function */ void** GETKEYCHAIN_PTR;
typedef /* function */ void** KM_ENCRYPT2_PTR;
typedef /* function */ void** KM_DECRYPT2_PTR;
typedef /* function */ void** KM_GETVERSIONSTRINGPTR_PTR;
typedef /* function */ void** KM_CREATE_PTR;
typedef /* function */ void** KM_SETPUBLICKEY_PTR;
typedef /* function */ void** KM_GETPUBLICKEY_PTR;
typedef /* function */ void** KM_SETLOCALKEYPAIR_PTR;
typedef /* function */ void** KM_SETGAMESESSIONKEY_PTR;
typedef /* function */ void** KM_GETGAMESESSIONKEY_PTR;
typedef /* function */ void** KM_ADDSYMMETRICKEY_PTR;
typedef /* function */ void** KM_GETSYMMETRICKEY_PTR;
typedef /* function */ void** KM_COMPARESYMMETRICKEY_PTR;
typedef /* function */ void** KM_DELETESYMMETRICKEY_PTR;
typedef /* function */ void** KM_ENCRYPT_PTR;
typedef /* function */ void** KM_DECRYPT_PTR;
typedef /* function */ void** KM_COPYKEYS_PTR;
typedef /* function */ void** KM_DIGISIGN_PTR;
typedef /* function */ void** KM_DIGIVERIFY_PTR;
typedef /* function */ void** KM_DELETEKEYS_PTR;
typedef /* function */ void** KM_CREATERANDOMRCKEY_PTR;
typedef /* function */ void** KM_SETLOCALCLIENTID_PTR;
typedef /* function */ void** KM_DESTROY_PTR;
typedef /* function */ void** KM_CLEANUP_PTR;
typedef /* function */ void** KM_SHA1_PTR;
typedef /* function */ void** KM_MD5_PTR;
typedef /* function */ void** KM_SALTED_SHA1_PTR;
typedef /* function */ void** KM_SALTED_MD5_PTR;
typedef /* function */ void** KM_RSAADJUST_PTR;
typedef /* function */ void** GETSOFTWAREKEYPAIR_PTR;
typedef /* struct */ void* CRYPT_INTERFACE;
typedef RT_U4BYTE RT_TIME_VAL;
// warning: multiple differing types with the same name, only one recovered
typedef /* struct */ void* RT_TIME_STAMP;
// warning: multiple differing types with the same name, only one recovered
typedef /* struct */ void* RT_TIME_DATE;
typedef enum   RT_MSG_CLIENT_DISCONNECT_REASON;
typedef enum   RT_MSG_CONNECT_REJECT_REASON;
typedef enum   RT_MSG_FORCED_DISCONNECT_REASON;
typedef enum   RT_MSG_CLIENT_QUERY_TYPE;
typedef enum   RT_MSG_ENCODING_TYPE;
typedef enum   RT_MSG_LANGUAGE_TYPE;
typedef enum   RT_MSG_SERVER_CHEAT_QUERY_TYPE;
typedef enum   RT_MSG_TYPE;
typedef RT_U4BYTE RT_TOKEN_ID;
typedef enum   RT_TOKEN_MESSAGE_TYPE;
typedef enum   RT_TOKEN_STATE_TYPE;
typedef enum   RT_TOKEN_EVENT;
typedef /* struct */ void* RT_TOKEN_DATA;

// warning: multiple differing types with the same name, only one recovered
struct RT_TOKEN_SYSTEM_INFO {
	/*   0 */ RT_U4BYTE num_tokens;
	/*   4 */ RT_U4BYTE max_tokens;
	/*   8 */ RT_TOKEN_DATA* p_token_info_array;
};

typedef RT_U4BYTE RT_IP;
typedef enum   RT_MSG_CLIENT_REJECT;
typedef enum   RT_MSG_CLIENT_FDISCONNECT_REASON;
typedef enum   RT_MSG_CLIENT_METRIC_DATA_SET;
typedef enum   RT_MSG_CLIENT_CONNECT_TYPE;
typedef RT_U4BYTE RT_MSG_CLIENT_PORT;
typedef RT_U4BYTE RT_MSG_CLIENT_ID_CONNECTION;
typedef RT_U4BYTE RT_MSG_CLIENT_ID_CLIENT;
typedef RT_U4BYTE RT_MSG_CLIENT_ID_WORLD;
typedef RT_U4BYTE RT_MSG_CLIENT_TRANSPORT_FLAGS;
typedef RT_U4BYTE RT_MSG_CLIENT_QOS_FLAGS;
typedef /* function */ void** RT_MSG_CLIENT_CONNECT_CALLBACK;
typedef /* function */ void** RT_MSG_CLIENT_MSG_CALLBACK;
typedef /* function */ void** RT_MSG_CLIENT_CLIENT_EVENT_CALLBACK;
typedef /* function */ void** RT_MSG_CLIENT_FDISCONNECT_CALLBACK;
typedef /* function */ void** RT_MSG_CLIENT_SYSTEM_MESSAGE_CALLBACK;
typedef /* function */ void** RT_MSG_CLIENT_TOKEN_EVENT_CALLBACK;
typedef /* function */ void** RT_MSG_CLIENT_METRICS_EVENT_CALLBACK;
typedef /* struct */ void* RT_MSG_CLIENT_CONNECTION_OPTIONS;
typedef /* struct */ void* RT_MSG_CLIENT_METRIC;
typedef /* struct */ void* RT_MSG_CLIENT_METRIC_DATA;
typedef /* struct */ void* RT_MSG_CLIENT_SYSTEM_MSG_TYPE;
typedef /* function */ void** RT_MSG_CLIENT_GET_VERSION_STRING_PTR_FUNC_PTR;
typedef /* function */ void** RT_MSG_CLIENT_GET_BUILD_TIMESTAMP_FUNC_PTR;
typedef /* function */ void** RT_MSG_CLIENT_STARTUP_FUNC_PTR;
typedef /* function */ void** RT_MSG_CLIENT_SHUTDOWN_FUNC_PTR;
typedef /* function */ void** RT_MSG_CLIENT_CONNECT_FUNC_PTR;
typedef /* function */ void** RT_MSG_CLIENT_DISCONNECT_FUNC_PTR;
typedef /* function */ void** RT_MSG_CLIENT_DISCONNECT_ALL_FUNC_PTR;
typedef /* function */ void** RT_MSG_CLIENT_UPDATE_FUNC_PTR;
typedef /* function */ void** RT_MSG_CLIENT_UPDATE_ALL_FUNC_PTR;
typedef /* function */ void** RT_MSG_CLIENT_SEND_TARGET_FUNC_PTR;
typedef /* function */ void** RT_MSG_CLIENT_SEND_CLIENT_SET_FUNC_PTR;
typedef /* function */ void** RT_MSG_CLIENT_GET_BUFFER_STATUS_FUNC_PTR;
typedef /* function */ void** RT_MSG_CLIENT_GET_LOCAL_IP_FUNC_PTR;
typedef /* function */ void** RT_MSG_CLIENT_GET_BROADCAST_IP_FUNC_PTR;
typedef /* function */ void** RT_MSG_CLIENT_GET_HOST_BY_NAME_FUNC_PTR;
typedef /* function */ void** RT_MSG_CLIENT_GET_CONNECTION_IP_FUNC_PTR;
typedef /* function */ void** RT_MSG_CLIENT_RECEIVE_BROADCASTS_FUNC_PTR;
typedef /* function */ void** RT_MSG_CLIENT_GET_METRICS_FUNC_PTR;
typedef /* function */ void** RT_MSG_CLIENT_SET_SEND_AGGREGATION_TIME_FUNC_PTR;
typedef /* function */ void** RT_MSG_CLIENT_SET_SERVER_SEND_AGGREGATION_TIME_FUNC_PTR;
typedef /* function */ void** RT_MSG_CLIENT_SET_DEFAULT_CONNECT_OPTIONS_FUNC_PTR;
typedef /* function */ void** RT_MSG_CLIENT_DISPLAY_COMM_STATE_FUNC_PTR;
typedef /* function */ void** RT_MSG_CLIENT_GET_INTERFACE_DATA_FUNC_PTR;
typedef /* function */ void** RT_MSG_CLIENT_SET_SEND_MAX_MESSAGE_LEN_FUNC_PTR;
typedef /* function */ void** RT_MSG_CLIENT_WALLCLOCK_QUERY_FUNC_PTR;
typedef /* function */ void** RT_MSG_CLIENT_PEER_QUERY_FUNC_PTR;
typedef /* function */ void** RT_MSG_CLIENT_PEER_QUERY_LIST_FUNC_PTR;
typedef /* function */ void** RT_MSG_CLIENT_SEND_SYSTEMMSG_FUNC_PTR;
typedef /* function */ void** RT_MSG_CLIENT_SEND_TOKEN_MSG_FUNC_PTR;
typedef /* function */ void** RT_MSG_CLIENT_SEND_TOKEN_SET_MSG_FUNC_PTR;
typedef /* struct */ void* MSG_CLIENT_INTERFACE;
typedef enum   NetMessageClass;
typedef /* struct */ void* NetPeerToPeerHostChangeData;
typedef /* struct */ void* NetTokenOwnershipNotifyData;
typedef enum   NetSystemStatus;
typedef /* struct */ void* NetSystemStatusData;
typedef /* struct */ void* NetStreamMediaVideoRecordData;

// warning: multiple differing types with the same name, only one recovered
struct NetRGBArray {
	/*   0 */ int cbSize;
	/*   4 */ int lineSize;
	/*   8 */ int xsize;
	/*   c */ int ysize;
	/*  10 */ unsigned int data[16];
};

typedef /* struct */ void* NetStreamMediaVideoPlayData;
typedef /* struct */ void* NetStreamMediaCustomVideoRecordData;
typedef /* struct */ void* NetStreamMediaCustomVideoPlayData;
typedef /* struct */ void* NetBitMask;
typedef /* struct */ void* NetClientList;
typedef /* struct */ void* NetSendMessageInParams;
typedef /* struct */ void* NetSendMessageOutParams;
typedef /* struct */ void* NetLatencyMetricsInfo;
typedef /* struct */ void* NetLatencyMetricsDataArgs;
typedef /* function */ void** NetTypeLatencyMetricsCallback;
typedef /* struct */ void* NetLatencyMetricsParams;
typedef /* function */ void** NetTypePingCallback;
typedef /* struct */ void* NetResolveAddrData;
typedef /* function */ void** NetTypeResolveAddrCallback;
typedef /* struct */ void* NetResolveAddrInParams;
typedef /* struct */ void* NetResolveAddrOutParams;
typedef /* struct */ void* NetIncomingClientInParams;
typedef /* struct */ void* NetIncomingClientOutParams;
typedef /* struct */ void* NetClientMetric;
typedef /* struct */ void* NetBandwidthInfo;
typedef /* struct */ void* NetConnectionStatus;
typedef /* struct */ void* NetTypeLookupResponse;
typedef enum   NetObjectLifespan;
typedef enum   NetFieldTypes;
typedef /* function */ void** NetTypeDataStreamUpdateCallback;
typedef /* function */ void** NetTypeDataStreamEndCallback;
typedef enum   NetUpdateType;
typedef /* struct */ void* NetObjectFilterData;
typedef /* function */ void** NetTypeObjectFilterCallback;
typedef /* function */ void** NetTypeDataStreamFilterCallBack;
typedef /* struct */ void* NetTypeOwnershipUpdateData;
typedef /* struct */ void* NetTypeOwnershipRequestData;
typedef /* struct */ void* NetTypeClient;
typedef /* struct */ void* NetTypeDataStream;
typedef /* struct */ void* NetTypeShortVector2;
typedef /* struct */ void* NetTypeShortVector3;
typedef /* struct */ void* NetTypeIntVector2;
typedef /* struct */ void* NetTypeIntVector3;
typedef /* struct */ void* NetTypeFloatVector2;
typedef /* struct */ void* NetTypeDoubleVector2;
typedef /* struct */ void* NetTypeDoubleVector3;
typedef /* struct */ void* NetRegisterObjectFilterInParams;
typedef /* struct */ void* NetRegisterObjectFilterOutParams;
typedef /* struct */ void* NetStreamMediaClientInfo;
typedef /* struct */ void* NetStreamMediaIgnoreData;
typedef enum   RT_DYNAMIC_MODULES;
typedef enum   RT_NOTIFY_MODULE_ARG_TYPE;
typedef enum   RT_MODULE_NOTIFICATION_RESULT;
typedef /* function */ void** MODULE_NOTIFICATION_FUNC_PTR;
typedef /* struct */ void* INTERFACE_ENTRY;
typedef enum   RT_UDP_BUFFER_TYPE;
typedef enum   RT_UDP_EVENT_TYPE;
typedef RT_UDP_ICHANNEL* RT_UDP_CHANNEL;
typedef RT_UDP_ICONNECTION* RT_UDP_CONNECT;
typedef RT_U4BYTE RT_UDP_PORT;
typedef RT_U2BYTE RT_UDP_TRANSPORT_FLAGS;
typedef RT_U2BYTE RT_UDP_PROTOCOL_FLAGS;
typedef /* function */ void** RT_UDP_EVENT_CALLBACK;
typedef /* function */ void** RT_UDP_RESOLVE_CALLBACK;
typedef /* function */ void** RT_UDP_DATA_CALLBACK;
typedef /* function */ void** RT_UDP_UNCONNECTED_CALLBACK;
typedef /* struct */ void* RT_UDP_CHANNEL_OPTIONS;
typedef /* struct */ void* RT_UDP_CHANNEL_REF_OPTIONS;
typedef /* struct */ void* RT_UDP_RESOLVE_PARAMS;
typedef /* struct */ void* RT_UDP_CONNECT_PARAMS;
typedef /* struct */ void* RT_UDP_LATENCY_INFO;
typedef /* function */ void** RT_UDP_GET_VERSION_STRING_PTR;
typedef /* function */ void** RT_UDP_CREATE_PTR;
typedef /* function */ void** RT_UDP_DESTROY_PTR;
typedef /* function */ void** RT_UDP_SET_BUFFER_SIZE_PTR;
typedef /* function */ void** RT_UDP_SET_AGGREGATION_INTERVAL_PTR;
typedef /* function */ void** RT_UDP_GET_BUFFER_SIZE_PTR;
typedef /* function */ void** RT_UDP_GET_AGGREGATION_INTERVAL_PTR;
typedef /* function */ void** RT_UDP_GET_VIRTUAL_PORT_PTR;
typedef /* function */ void** RT_UDP_GET_BUFFER_STATS_PTR;
typedef /* function */ void** RT_UDP_RESOLVE_ADDRESS_PTR;
typedef /* function */ void** RT_UDP_GET_RESOLVED_ADDRESS_PTR;
typedef /* function */ void** RT_UDP_GET_LOCAL_ADDRESS_PTR;
typedef /* function */ void** RT_UDP_GET_ADDRESS_PTR;
typedef /* function */ void** RT_UDP_DISABLE_NAT_SERVICE_HEARTBEAT_PTR;
typedef /* function */ void** RT_UDP_CONNECT_PTR;
typedef /* function */ void** RT_UDP_DISCONNECT_PTR;
typedef /* function */ void** RT_UDP_SET_PEER_ID_PTR;
typedef /* function */ void** RT_UDP_SEND_PTR;
typedef /* function */ void** RT_UDP_SEND_LIST_PTR;
typedef /* function */ void** RT_UDP_SEND_UNCONNECTED_PTR;
typedef /* function */ void** RT_UDP_BROADCAST_PTR;
typedef /* function */ void** RT_UDP_RECV_PTR;
typedef /* function */ void** RT_UDP_PEEK_PTR;
typedef /* function */ void** RT_UDP_LISTEN_PTR;
typedef /* function */ void** RT_UDP_ACCEPT_PTR;
typedef /* function */ void** RT_UDP_DENY_PTR;
typedef /* function */ void** RT_UDP_PRE_ACCEPT_PTR;
typedef /* function */ void** RT_UDP_EVENT_PROCESS_PTR;
typedef /* function */ void** RT_UDP_EVENT_CHECK_PTR;
typedef /* function */ void** RT_UDP_MGR_CREATE_PTR;
typedef /* function */ void** RT_UDP_MGR_DESTROY_PTR;
typedef /* function */ void** RT_UDP_MGR_GET_CHANNEL_REF_PTR;
typedef /* function */ void** RT_UDP_MGR_RELEASE_CHANNEL_REF_PTR;
typedef /* function */ void** RT_UDP_MGR_FIND_CHANNEL_REF_PTR;
typedef /* function */ void** RT_UDP_GET_POOL_USED_PTR;
typedef /* struct */ void* UDP_INTERFACE;
typedef RT_U2BYTE RT_PEER_INDEX;
typedef RT_U1BYTE RT_OVERLAY_INDEX;
typedef RT_U1BYTE RT_SUBSTREAM_INDEX;
typedef enum   RT_PEER_STATUS;
typedef enum   RT_ADDRESS_TYPE;
typedef enum   RT_OVERLAY_TYPE;
typedef enum   RT_IGNORE_TYPE;
typedef RT_IP2P* RT_P2P;
typedef /* function */ void** RT_P2P_CONNECT_CB;
typedef /* function */ void** RT_P2P_DISCONNECT_CB;
typedef /* function */ void** RT_P2P_HOST_CHANGE_CB;
typedef /* function */ void** RT_P2P_SYSTEM_CHANGE_CB;
typedef /* function */ void** RT_P2P_PEER_UPDATE_CB;
typedef /* function */ void** RT_P2P_INCOMING_DATA_CB;
typedef /* function */ void** RT_P2P_OVERLAY_DATA_CB;
typedef /* function */ void** RT_P2P_BROADCAST_UPDATE_CB;
typedef /* function */ void** RT_P2P_TOKEN_DATA_CB;
typedef /* function */ void** RT_P2P_HOST_TOKEN_DATA_CB;
typedef /* function */ void** RT_P2P_TOKEN_NOTIFY_CB;
typedef /* struct */ void* RT_P2P_CREATE_INFO;
typedef /* struct */ void* RT_P2P_PEER_INFO;
typedef /* struct */ void* RT_P2P_LATENCY_INFO;
typedef /* function */ void** RT_P2P_CREATE_PTR;
typedef /* function */ void** RT_P2P_DESTROY_PTR;
typedef /* function */ void** RT_P2P_GET_CURRENT_ADDRESS_TYPE_PTR;
typedef /* function */ void** RT_P2P_GET_PEER_ADDRESS_PTR;
typedef /* function */ void** RT_P2P_GET_MY_ADDRESS_PTR;
typedef /* function */ void** RT_P2P_GET_MY_PEER_INDEX_PTR;
typedef /* function */ void** RT_P2P_GET_HOST_INDEX_PTR;
typedef /* function */ void** RT_P2P_GET_VIRTUAL_PORT_PTR;
typedef /* function */ void** RT_P2P_GET_BUFFER_STATS_PTR;
typedef /* function */ void** RT_P2P_GET_PEER_BUFFER_STATS_PTR;
typedef /* function */ void** RT_P2P_SET_SEND_AGGREGATION_PTR;
typedef /* function */ void** RT_P2P_HOST_PTR;
typedef /* function */ void** RT_P2P_INCOMING_PEER_PTR;
typedef /* function */ void** RT_P2P_CONNECT_PTR;
typedef /* function */ void** RT_P2P_DISCONNECT_PTR;
typedef /* function */ void** RT_P2P_TICK_PTR;
typedef /* function */ void** RT_P2P_UPDATE_PTR;
typedef /* function */ void** RT_P2P_SEND_PTR;
typedef /* function */ void** RT_P2P_SEND_LIST_PTR;
typedef /* function */ void** RT_P2P_RECEIVE_BROADCASTS_PTR;
typedef /* function */ void** RT_P2P_SEND_TO_PTR;
typedef /* function */ void** RT_P2P_GET_MAX_PEERS_PTR;
typedef /* function */ void** RT_P2P_SET_MAX_PEERS_PTR;
typedef /* function */ void** RT_P2P_SET_OVERLAY_TYPE_PTR;
typedef /* function */ void** RT_P2P_JOIN_OVERLAY_PTR;
typedef /* function */ void** RT_P2P_QUIT_OVERLAY_PTR;
typedef /* function */ void** RT_P2P_QUIT_ALL_OVERLAYS_PTR;
typedef /* function */ void** RT_P2P_IGNORE_PEER_IN_OVERLAY_PTR;
typedef /* function */ void** RT_P2P_GET_OVERLAY_PEER_COUNT_PTR;
typedef /* function */ void** RT_P2P_IS_PEER_IN_OVERLAY_PTR;
typedef /* function */ void** RT_P2P_SEND_OVERLAY_PTR;
typedef /* function */ void** RT_P2P_SEND_TOKEN_MSG_PTR;
typedef /* function */ void** RT_P2P_SEND_TOKEN_LIST_MSG_PTR;
typedef /* function */ void** RT_P2P_TOKEN_EVENT_NOTIFY_PTR;
typedef /* function */ void** RT_P2P_GET_LATENCY_INFO_PTR;
typedef /* struct */ void* P2P_INTERFACE;
typedef RT_COMM_CHANNEL_DATA* RT_COMM_CHANNEL_ID;
typedef RT_U4BYTE RT_COMM_PORT;
// warning: multiple differing types with the same name, only one recovered
typedef enum   RT_COMM_CHANNEL_TYPE;
// warning: multiple differing types with the same name, only one recovered
typedef /* struct */ void* RT_COMM_CHANNEL_INFO;
// warning: multiple differing types with the same name, only one recovered
typedef /* struct */ void* RT_COMM_CHANNEL_OPTIONS;
// warning: multiple differing types with the same name, only one recovered
typedef /* struct */ void* RT_COMM_METRIC;
// warning: multiple differing types with the same name, only one recovered
typedef /* struct */ void* RT_COMM_METRIC_DATA;
// warning: multiple differing types with the same name, only one recovered
typedef /* struct */ void* RT_COMM_LOOKUP_RESPONSE;
typedef /* function */ void** RT_COMM_LOOKUP_CB;
// warning: multiple differing types with the same name, only one recovered
typedef /* struct */ void* RT_COMM_LOOKUP_PARAMS;
typedef /* function */ void** RT_COMM_ECHO_CALLBACK;
// warning: multiple differing types with the same name, only one recovered
typedef /* struct */ void* RT_COMM_ECHO_OPTIONS;
typedef RT_4BYTE CONNECTION_INDEX;
typedef RT_4BYTE CLIENT_INDEX;
typedef RT_U1BYTE CLIENT_INDEX_IN_PACKET;
typedef enum   DmePacketTypes;
typedef enum   NetEchoStatus;
typedef enum   NetPingType;
typedef /* struct */ void* NetTypePingInfo;
typedef /* struct */ void* NetTypeClientInfo;

// warning: multiple differing types with the same name, only one recovered
struct NetTypeConnectionInfo {
	/*   0 */ NetTypeClientInfo* ppClientInfo[256];
	/* 400 */ NetTypeClientInfo* pMyClientInfo;
	/* 404 */ CLIENT_INDEX MyClientIndex;
	/* 408 */ CLIENT_INDEX SessionMasterClientIndex;
	/* 40c */ struct RT_TOKEN_SYSTEM_INFO* pLocalTokenSystem;
	/* 410 */ RT_LINKADDRESS ServerIP;
	/* 418 */ RT_U1BYTE ServerVersion[16];
	/* 428 */ NetTypeConnectCallback NetLocalConnectCallback;
	/* 42c */ __builtin_va_list NetLocalConnectCallbackData;
	/* 430 */ NetTypeConnectCallback NetLocalDisconnectCallback;
	/* 434 */ __builtin_va_list NetLocalDisconnectCallbackData;
	/* 438 */ NetTypeClientConnectCallback NetRemoteClientConnectCallback;
	/* 43c */ __builtin_va_list NetRemoteClientConnectCallbackData;
	/* 440 */ NetTypeClientConnectCallback NetRemoteClientDisconnectCallback;
	/* 444 */ __builtin_va_list NetRemoteClientDisconnectCallbackData;
	/* 448 */ NetTypeSystemStatusCallback NetSystemStatusCallback;
	/* 44c */ __builtin_va_list NetSystemStatusCallbackData;
	/* 450 */ NetSystemStatus SystemStatus;
	/* 454 */ NetConnectStatus ConnectStatus;
	/* 458 */ RT_4BYTE WorldID;
	/* 45c */ RT_U4BYTE WaitingForInfoCount;
	/* 460 */ RT_4BYTE MaxClients;
	/* 464 */ RT_4BYTE UserSpecified;
	/* 468 */ NetConnectionType ConnectionType;
	/* 46c */ RT_U4BYTE nDmeConnectionID;
	/* 470 */ RT_MSG_CLIENT_ID_CONNECTION nMsgConnectionID;
	/* 474 */ RT_P2P pP2P;
	/* 478 */ NetTypeOwnershipUpdateCallback pfOwnershipUpdateCallback;
	/* 47c */ __builtin_va_list pOwnershipUpdateCallbackData;
	/* 480 */ NetTypeOwnershipRequestCallback pfOwnershipRequestCallback;
	/* 484 */ __builtin_va_list pOwnershipRequestCallbackData;
	/* 488 */ NetTypeStreamMediaInfo* pStreamMediaInfo;
	/* 48c */ RT_BOOLEAN bWaitP2PDisconnect;
	/* 490 */ RT_TIME_STAMP P2PDisconnectTS;
	/* 498 */ NetTokenParams TokenParams;
	/* 4a4 */ int bUseTimeBase;
	/* 4a8 */ int bTokenSystemStarted;
};

typedef /* struct */ void* DME_GLOBAL_STRUCT;
typedef /* struct */ void* TypeFieldUpdatePacket;
typedef /* struct */ void* TypeArrayElementUpdatePacket;
typedef /* struct */ void* NetTypeDataStreamPacket;
typedef /* struct */ void* TypeDataStreamEndPacket;
typedef /* struct */ void* TypeAcceptClientPacket;
typedef /* struct */ void* TypeRequestOwnershipPacket;
typedef /* struct */ void* TypeGrantOwnershipPacket;
typedef /* struct */ void* TypeReleaseOwnershipPacket;
typedef /* struct */ void* TypeClientUpdatePacket;
typedef /* struct */ void* TypePingPacket;
typedef /* struct */ void* TypeClientConnectPacket;
typedef /* struct */ void* TypeServerVersionPacket;
typedef /* struct */ void* TypeClientLeavesPacket;
typedef /* struct */ void* TypeRequestServersPacket;
typedef /* struct */ void* TypeServerResponsePacket;
typedef /* struct */ void* TypeArbitrateJoinPacket;
typedef /* struct */ void* TypeUpdateClientStatusPacket;
typedef /* struct */ void* TypeSMMigrateOrderPacket;
typedef /* struct */ void* TypeStreamMediaClientInfoPacket;
typedef /* struct */ void* TypeStreamMediaIndexInfoPacket;
typedef /* struct */ void* TypeStreamMediaBufferInfoPacket;
typedef /* struct */ void* TypeStreamMediaHostPacket;
typedef /* struct */ void* TypeObjectFullUpdatePacket;
typedef /* struct */ void* TypeDeleteNetObjectPacket;
// warning: multiple differing types with the same name, only one recovered
typedef /* struct */ void* RT_CIRC_BUF;
typedef enum   NetStatus;
typedef /* struct */ void* NetTypeStreamChannel;
typedef /* struct */ void* NetTypeObjectFilterInfo;

// warning: multiple differing types with the same name, only one recovered
struct NetTypeObjectInfo {
	/*   0 */ RT_U4BYTE Index;
	/*   4 */ NetStatus Status;
	/*   8 */ NetTypeObject Obj;
	/*  4c */ struct NetTypeObjectInfo* next;
};

typedef /* function */ void** NETIDATASTREAMBYTESFREE_PTR;
typedef /* function */ void** NETIADDTODATASTREAM_PTR;
typedef /* function */ void** NETCLIENTLEAVES_PTR;
typedef /* function */ void** MYCLIENTJOINS_PTR;
typedef /* function */ void** NETCLIENTJOINS_PTR;
typedef /* function */ void** NETIENDDATASTREAM_PTR;
typedef /* function */ void** NETIOPENDATASTREAM_PTR;
typedef /* function */ void** SENDCLIENTNETOBJECTUPDATES_PTR;
typedef /* function */ void** ELECTSESSIONMASTER_PTR;
typedef /* function */ void** SENDCLIENTDATASTREAMS_PTR;
typedef /* function */ void** NETCOMPLETEJOIN_PTR;
typedef /* function */ void** NETIFREEALLOBJECTS_PTR;
typedef /* function */ void** ACCEPTCLIENTINTOGAME_PTR;
typedef /* function */ void** FIELDUPDATEPACKETHANDLER_PTR;
typedef /* function */ void** NETOBJECTFULLUPDATEPACKETHANDLER_PTR;
typedef /* function */ void** DATASTREAMENDPACKETHANDLER;
typedef /* function */ void** ACCEPTCLIENTPACKETHANDLER;
typedef /* function */ void** DELETENETOBJECTPACKETHANDLER;
typedef /* function */ void** REQUESTOWNERSHIPPACKETHANDLER;
typedef /* function */ void** GRANTOWNERSHIPPACKETHANDLER;
typedef /* function */ void** RELEASEOWNERSHIPPACKETHANDLER;
typedef /* function */ void** DATASTREAMUPDATEPACKETHANDLER;
typedef /* function */ void** ARBITRATEJOINPACKETHANDLER;
typedef /* function */ void** SMMIGRATEORDERPACKETHANDLER;
typedef /* function */ void** STREAMMEDIACLIENTINFOPACKETHANDLER;
typedef /* function */ void** NETILEAVE_PTR;
typedef /* function */ void** NETIREGISTERDATASTREAM_PTR;
typedef /* function */ void** NETIGETOBJECT_PTR;
typedef /* function */ void** NETIREGISTEROBJECTSTART;
typedef /* function */ void** NETIOBJECTFIELD;
typedef /* function */ void** NETIREGISTERSTRUCTURE;
typedef /* function */ void** NETIREGISTERREMOTEOBJECTCALLBACK;
typedef /* function */ void** NETIREGISTEROBJECTFILTER;
typedef /* function */ void** NETICREATEOBJECT;
typedef /* function */ void** NETIREQUESTCREATEREMOTENAMEDOBJECT;
typedef /* function */ void** NETISENDOBJECTFULLUPDATE;
typedef /* function */ void** NETIGETOBJECT;
typedef /* function */ void** NETISETMYCLIENTOBJECT;
typedef /* function */ void** NETIFREEOBJECT;
typedef /* function */ void** NETIFREEALLOBJECTS;
typedef /* function */ void** NETIREQUESTOBJECTPRIVATEOWNERSHIP;
typedef /* function */ void** NETIRELEASEOBJECTPRIVATEOWNERSHIP;
typedef /* function */ void** NETGETMYPERSISTANTOBJECTCOUNT;
typedef /* function */ void** NETIJOIN_PTR;
typedef /* function */ void** NETIGETSESSIONMASTERCLIENTINDEX_PTR;
typedef /* function */ void** NETIGETDATASTREAM_PTR;
typedef /* function */ void** NETFREEREMOTEOBJECT_PTR;
typedef /* function */ void** REMOTEOBJECTUPDATE_PTR;
typedef /* function */ void** GETFREENETOBJECTBLOCK_PTR;
typedef /* function */ void** NETSETSESSIONMASTERCLIENTINDEX_PTR;
typedef /* function */ void** NETIGETCLIENT_PTR;
typedef /* function */ void** NETISENDFIELDUPDATES_PTR;
typedef /* function */ void** NETINITIALIZECLIENTS_PTR;
typedef /* function */ void** NETCREATECLIENT_PTR;
typedef /* function */ void** NETFREECLIENT_PTR;
typedef /* function */ void** NETFREEALLCLIENTS_PTR;
typedef /* function */ void** NETFREECLIENTS_PTR;
typedef /* function */ void** NETFREECLIENTPOINTERS_PTR;
typedef /* function */ void** NETFINDCLIENTBYIPADDRESS_PTR;
typedef /* function */ void** NETISENDMYCLIENTUPDATE_PTR;
typedef /* function */ void** NETIGETCLIENTSTATUS_PTR;
typedef /* function */ void** CLIENTLEAVESPACKETHANDLER_PTR;
typedef /* function */ void** CLIENTUPDATEPACKETHANDLER_PTR;
typedef /* function */ void** CREATEGLOBALOBJECTINFO_PTR;
typedef /* function */ void** DESTROYGLOBALOBJECTINFO_PTR;
typedef /* struct */ void* OBJECT_INTERFACE;
typedef /* function */ void** NETSTREAMMEDIASETDEFAULTPARAMS_PTR;
typedef /* function */ void** NETSTREAMMEDIAUPDATE_PTR;
typedef /* function */ void** NETSTREAMMEDIAENABLEONCONNECTION_PTR;
typedef /* function */ void** NETSTREAMMEDIADISABLEONCONNECTION_PTR;
typedef /* function */ void** NETSTREAMMEDIASETCLIENTINDEX_PTR;
typedef /* function */ void** NETSTREAMMEDIAISENABLEDONCONNECTION_PTR;
typedef /* function */ void** NETSTREAMMEDIAHOST_PTR;
typedef /* function */ void** NETSTREAMMEDIAREMOTECLIENTCONNECTS_PTR;
typedef /* function */ void** NETSTREAMMEDIAREMOTECLIENTDISCONNECTS_PTR;
typedef /* function */ void** NETISTREAMMEDIAJOINCHANNEL_PTR;
typedef /* function */ void** NETISTREAMMEDIAQUITCHANNEL_PTR;
typedef /* function */ void** NETISTREAMMEDIAGETCHANNELINFO_PTR;
typedef /* function */ void** NETISTREAMMEDIAGETCLIENTINFO_PTR;
typedef /* function */ void** NETISTREAMMEDIAENDRECORDING_PTR;
typedef /* function */ void** NETISTREAMMEDIAGETCURRENTCHANNELSTATE_PTR;
typedef /* function */ void** NETISTREAMMEDIASETIGNORESTATE_PTR;
typedef /* function */ void** NETSTREAMMEDIASENDMYINDEXINFO_PTR;
typedef /* function */ void** NETSTREAMMEDIASETMYPEERINDEX_PTR;
typedef /* function */ void** NETSTREAMMEDIAGETMYPEERINDEX_PTR;
typedef /* function */ void** STREAMMEDIACLIENTINFOPACKETHANDLER_PTR;
typedef /* function */ void** STREAMMEDIAHOSTINFOPACKETHANDLER_PTR;
typedef /* function */ void** STREAMMEDIAINDEXINFOPACKETHANDLER_PTR;
typedef /* function */ void** STREAMMEDIAINDEXINFORESPONSE_PTR;
typedef /* function */ void** STREAMMEDIABUFFERREQUESTHANDLER_PTR;
typedef /* function */ void** STREAMMEDIABUFFERGRANTEDHANDLER_PTR;
typedef /* function */ void** STREAMMEDIABUFFERRELEASEHANDLER_PTR;
typedef /* function */ void** STREAMMEDIASENDHOSTQUERY_PTR;
typedef /* function */ void** STREAMMEDIAHOSTQUERYHANDLER_PTR;
typedef /* function */ void** STREAMMEDIAHOSTRESPONSEHANDLER_PTR;
typedef /* function */ void** P2P_OVERLAY_DATA_CB_PTR;
typedef /* function */ void** NETSTREAMMEDIADISCONNECT_PTR;
typedef /* struct */ void* STREAM_MEDIA_INTERFACE;
typedef /* struct */ void* NetLANFindExchangeCallbackInArgs;
typedef /* struct */ void* NetLANFindExchangeCallbackOutArgs;
typedef /* function */ void** NetLANFindExchangeCallback;
typedef /* struct */ void* xNetApplicationName;
typedef /* struct */ void* xNetAddress;
typedef /* struct */ void* xNetLocalizationParams;
typedef /* struct */ void* TypeOC_LANFIND;
typedef /* struct */ void* TypeOC_LANFINDReply;
typedef /* struct */ void* LANFinder;
typedef __builtin_va_list CODEC_HANDLE;
typedef /* function */ void** CODEC_CREATE_FUNC;
typedef /* function */ void** CODEC_INIT_FUNC;
typedef /* function */ void** CODEC_DESTROY_FUNC;
typedef /* function */ void** ENCODE_FRAME_FUNC;
typedef /* function */ void** DECODE_FRAME_FUNC;
typedef /* struct */ void* ACODEC_INTERFACE;
typedef enum   EBLOCKTYPE;

// warning: multiple differing types with the same name, only one recovered
struct DCT_BLOCK {
	/*   0 */ RT_2BYTE data[64];
};

// warning: multiple differing types with the same name, only one recovered
struct COLOR_ARRAY {
	/*   0 */ int cbSize;
	/*   4 */ int lineSize;
	/*   8 */ int xsize;
	/*   c */ int ysize;
	/*  10 */ char data[16];
};

typedef enum   ARRAY_TYPE;
typedef RT_4BYTE RGB_RESULT;

// warning: multiple differing types with the same name, only one recovered
struct RGB_ARRAY {
	/*   0 */ int cbSize;
	/*   4 */ int lineSize;
	/*   8 */ int xsize;
	/*   c */ int ysize;
	/*  10 */ RT_U4BYTE data[16];
};

typedef /* function */ void** JPEG_ENCODE_PTR;
typedef /* function */ void** JPEG_DECODE_PTR;
typedef /* function */ void** JPEG_CREATECOLORARRAY_PTR;
typedef /* function */ void** JPEG_DESTROYCOLORARRAY_PTR;
typedef /* function */ void** JPEG_CREATERGBARRAY_PTR;
typedef /* function */ void** JPEG_YUV2RGB_PTR;
typedef /* function */ void** JPEG_DESTROYRGBARRAY_PTR;
typedef /* struct */ void* VCODEC_JPEG_INTERFACE;
typedef RT_4BYTE RT_COMM_INTERFACE_ID;
typedef /* function */ void** RT_COMM_PLATFORM_STARTUP_PTR;
typedef /* function */ void** RT_COMM_PLATFORM_SHUTDOWN_PTR;
typedef /* function */ void** RT_COMM_PLATFORM_CREATE_PTR;
typedef /* function */ void** RT_COMM_PLATFORM_DESTROY_PTR;
typedef /* function */ void** RT_COMM_PLATFORM_SEND_PTR;
typedef /* function */ void** RT_COMM_PLATFORM_VSEND_PTR;
typedef /* function */ void** RT_COMM_PLATFORM_SEND_TO_PTR;
typedef /* function */ void** RT_COMM_PLATFORM_VSEND_TO_PTR;
typedef /* function */ void** RT_COMM_PLATFORM_SEND_ECHO_PTR;
typedef /* function */ void** RT_COMM_PLATFORM_RECEIVE_PTR;
typedef /* function */ void** RT_COMM_PLATFORM_RECEIVE_FROM_PTR;
typedef /* function */ void** RT_COMM_PLATFORM_RECEIVE_ECHO_PTR;
typedef /* function */ void** RT_COMM_PLATFORM_GET_AVAIL_BYTES_TO_READ_PTR;
typedef /* function */ void** RT_COMM_PLATFORM_GET_LOCAL_IP_PTR;
typedef /* function */ void** RT_COMM_PLATFORM_GET_BROADCAST_IP_PTR;
typedef /* function */ void** RT_COMM_PLATFORM_GET_HOST_BY_NAME_PTR;
typedef /* function */ void** RT_COMM_PLATFORM_GET_REMOTE_IP_PTR;
typedef /* function */ void** RT_COMM_PLATFORM_DISPLAY_STATE_PTR;
typedef /* function */ void** RT_COMM_PLATFORM_IS_CONNECTED_PTR;
typedef /* function */ void** RT_COMM_PLATFORM_UPDATE_PTR;
typedef /* function */ void** RT_COMM_PLATFORM_LINKADDRESS_SETNULL;
typedef /* function */ void** RT_COMM_PLATFORM_LINKADDRESS_ISNULL;
typedef /* function */ void** RT_COMM_PLATFORM_LINKADDRESS_ISEQUAL;
typedef /* function */ void** RT_COMM_PLATFORM_LINKADDRESS_TOSTR;
typedef /* function */ void** RT_COMM_PLATFORM_LINKADDRESS_TOEXT;
typedef /* function */ void** RT_COMM_PLATFORM_LINKADDRESS_TOINT;
typedef /* function */ void** RT_COMM_PLATFORM_GET_DNS_SERVERS;
typedef /* struct */ void* COMM_PLATFORM_INTERFACE;
typedef /* struct */ void* TimebaseQueryInfo;
typedef /* function */ void** RT_PARSE_PRE_EXECUTE_CALLBACK;
typedef /* function */ void** RT_PARSE_EXECUTE_CALLBACK;
typedef /* function */ void** RT_PARSE_MODIFY_CALLBACK;
typedef /* function */ void** RT_PARSE_FRAGMENT_CALLBACK;

// warning: multiple differing types with the same name, only one recovered
struct NetIAddress {
	/*   0 */ NetAddressType AddressType;
	/*   4 */ RT_LINKADDRESS IP;
	/*   c */ RT_U4BYTE Port;
};

// warning: multiple differing types with the same name, only one recovered
struct NetIAddressList {
	/*   0 */ NetIAddress aAddressList[2];
};

typedef /* struct */ void* LatencyMetrics;
typedef /* struct */ void* NetTypeEchoInfo;
typedef /* struct */ void* NetTypeMessageEvent;
typedef /* struct */ void* NetTypeClientPingInfo;
typedef /* struct */ void* NetFragCallbackData;

// warning: multiple differing types with the same name, only one recovered
struct RT_COMM_CHANNEL_DATA {
	/*   0 */ RT_BOOL bValid;
	/*   4 */ RT_BOOL bInUse;
	/*   8 */ RT_COMM_INTERFACE_ID InterfaceID;
	/*   c */ RT_COMM_CHANNEL_OPTIONS Options;
	/*  1c */ RT_COMM_PORT Port;
	/*  20 */ RT_BOOL bConnected;
};

typedef /* struct */ void* RT_COMM_LOOKUP_DATA;
typedef /* struct */ void* RT_COMM_CLIENT_ECHO_INFO;
typedef enum   RT_TYPE_ID;
typedef RT_1BYTE RT_CSTRING;
typedef /* struct */ void* RT_1BYTE_CONSTRAINT;
typedef /* struct */ void* RT_U1BYTE_CONSTRAINT;
typedef /* struct */ void* RT_2BYTE_CONSTRAINT;
typedef /* struct */ void* RT_U2BYTE_CONSTRAINT;
typedef /* struct */ void* RT_4BYTE_CONSTRAINT;
typedef /* struct */ void* RT_U4BYTE_CONSTRAINT;
typedef /* struct */ void* RT_8BYTE_CONSTRAINT;
typedef /* struct */ void* RT_U8BYTE_CONSTRAINT;
typedef /* struct */ void* RT_4BYTE_FP_CONSTRAINT;
typedef /* struct */ void* RT_8BYTE_FP_CONSTRAINT;
typedef /* struct */ void* RT_CSTRING_CONSTRAINT;
typedef /* function */ void** rt_constraint_check;
typedef /* struct */ void* RT_CONSTRAINT;

// warning: multiple differing types with the same name, only one recovered
struct RSA_BLOCK {
	/*   0 */ RT_U4BYTE data[16];
};

// warning: multiple differing types with the same name, only one recovered
struct SHA_CTX {
	/*   0 */ RT_U4BYTE data[16];
	/*  40 */ RT_U4BYTE digest[5];
	/*  54 */ RT_U4BYTE bIsBigEndian;
	/*  58 */ RT_U4BYTE countLo;
	/*  5c */ RT_U4BYTE countHi;
};

// warning: multiple differing types with the same name, only one recovered
struct lint {
	/*   0 */ RT_U4BYTE data[128];
};

typedef /* struct */ void* NetLANSendTextMessageInParams;
typedef /* struct */ void* NetLANSendRawMessageInParams;
typedef /* struct */ void* NetLanTextMessageCallbackParams;
typedef /* struct */ void* NetLanRawMessageCallbackParams;
typedef /* function */ void** NET_LAN_TEXT_MESSAGE_CALLBACK;
typedef /* function */ void** NET_LAN_RAW_MESSAGE_CALLBACK;
typedef /* struct */ void* NetEnableLanMessagingInParams;
typedef /* struct */ void* LAN_MESSAGE_MANAGER;

struct mallinfo {
	/*   0 */ int arena;
	/*   4 */ int ordblks;
	/*   8 */ int smblks;
	/*   c */ int hblks;
	/*  10 */ int hblkhd;
	/*  14 */ int usmblks;
	/*  18 */ int fsmblks;
	/*  1c */ int uordblks;
	/*  20 */ int fordblks;
	/*  24 */ int keepcost;
};

typedef __builtin_va_list voidp;
typedef /* struct */ void* MTPRNG;
typedef long int daddr_t;
typedef short unsigned int ino_t;
typedef short int dev_t;
typedef long int off_t;
typedef short unsigned int uid_t;
typedef short unsigned int gid_t;
typedef int pid_t;
typedef long int key_t;
typedef unsigned int mode_t;
typedef short unsigned int nlink_t;
typedef long int fd_mask;

// warning: multiple differing types with the same name, only one recovered
struct _types_fd_set {
	/*   0 */ fd_mask fds_bits[1];
};

typedef /* struct */ void* tT_COUNT;
typedef /* struct */ void* tT_MODE;
typedef /* struct */ void* tT_COMP;
typedef /* struct */ void* tT_HOLD;
typedef /* struct */ void* tIPU_CMD_write;
typedef /* struct */ void* tIPU_CMD_read;
typedef /* struct */ void* tIPU_TOP;
typedef /* struct */ void* tIPU_CTRL;
typedef /* struct */ void* tIPU_BP;
typedef /* struct */ void* tGIF_CTRL;
typedef /* struct */ void* tGIF_MODE;
typedef /* struct */ void* tGIF_STAT;
typedef /* struct */ void* tGIF_TAG0;
typedef /* struct */ void* tGIF_TAG1;
typedef /* struct */ void* tGIF_TAG2;
typedef /* struct */ void* tGIF_TAG3;
typedef /* struct */ void* tGIF_CNT;
typedef /* struct */ void* tGIF_P3CNT;
typedef /* struct */ void* tGIF_P3TAG;
typedef /* struct */ void* tVIF0_STAT;
typedef /* struct */ void* tVIF0_FBRST;
typedef /* struct */ void* tVIF0_ERR;
typedef /* struct */ void* tVIF_MARK;
typedef /* struct */ void* tVIF_CYCLE;
typedef /* struct */ void* tVIF_MODE;
typedef /* struct */ void* tVIF0_NUM;
typedef /* struct */ void* tVIF_MASK;
typedef /* struct */ void* tVIF_CODE;
typedef /* struct */ void* tVIF_ITOPS;
typedef /* struct */ void* tVIF_ITOP;
typedef /* struct */ void* tVIF_R0;
typedef /* struct */ void* tVIF_R1;
typedef /* struct */ void* tVIF_R2;
typedef /* struct */ void* tVIF_R3;
typedef /* struct */ void* tVIF_C0;
typedef /* struct */ void* tVIF_C1;
typedef /* struct */ void* tVIF_C2;
typedef /* struct */ void* tVIF_C3;
typedef /* struct */ void* tVIF1_STAT;
typedef /* struct */ void* tVIF1_FBRST;
typedef /* struct */ void* tVIF1_ERR;
typedef /* struct */ void* tVIF1_NUM;
typedef /* struct */ void* tVIF1_BASE;
typedef /* struct */ void* tVIF1_OFST;
typedef /* struct */ void* tVIF1_TOPS;
typedef /* struct */ void* tVIF1_TOP;
typedef /* struct */ void* tD_MADR;
typedef /* struct */ void* tD_QWC;
typedef /* struct */ void* tD_TADR;
typedef /* struct */ void* tD_ASR0;
typedef /* struct */ void* tD_ASR1;
typedef /* struct */ void* tD_SADR;
typedef /* struct */ void* tD_CTRL;
typedef /* struct */ void* tD_STAT;
typedef /* struct */ void* tD_PCR;
typedef /* struct */ void* tD_SQWC;
typedef /* struct */ void* tD_RBSR;
typedef /* struct */ void* tD_RBOR;
typedef /* struct */ void* tD_STADR;
typedef /* struct */ void* tD_ENABLER;
typedef /* struct */ void* tD_ENABLEW;
typedef /* struct */ void* tGS_DISPFB1;
typedef /* struct */ void* tGS_DISPLAY1;
typedef /* struct */ void* tGS_EXTBUF;
typedef /* struct */ void* tGS_EXTDATA;
typedef /* struct */ void* tGS_EXTWRITE;
typedef /* struct */ void* tGS_CSR;
typedef /* struct */ void* tGS_IMR;
typedef /* struct */ void* tGS_BUSDIR;
typedef /* struct */ void* tGS_SIGLBLID;
typedef enum   RT_PACK_MODE;
typedef /* struct */ void* RT_PACK_BUFFER;
typedef /* struct */ void* RT_FRAG_HDR;
typedef /* struct */ void* RT_FRAG_MSG;
typedef /* function */ void** CdlCB;
typedef /* struct */ void* sceCdlLOCCD;
typedef /* struct */ void* sceCdStmInit;
typedef /* struct */ void* sceScfT10kConfig;
// warning: multiple differing types with the same name, only one recovered
typedef enum   sceFsRWTYPE;
// warning: multiple differing types with the same name, only one recovered
typedef /* struct */ void* sceFsDevctlBlkIO;

// warning: multiple differing types with the same name, only one recovered
enum SceStdioFunc {
	SCE_STDIO_FUNC_ANYTHING = 0
};

// warning: multiple differing types with the same name, only one recovered
typedef /* struct */ void* sceExecData;
typedef /* function */ void** sceSifRebootNotifyHandler;
// warning: multiple differing types with the same name, only one recovered
typedef /* struct */ void* sceSifRebootNotifyData;
typedef /* struct */ void* RT_TIME_STAMP_PLATFORM;
typedef /* function */ void** APP_UPDATE_FUNC;

// warning: multiple differing types with the same name, only one recovered
struct PTREE {
	/*   0 */ struct PTREE* p0;
	/*   4 */ struct PTREE* p1;
	/*   8 */ unsigned int code;
};

// warning: multiple differing types with the same name, only one recovered
struct RC4_CTX {
	/*   0 */ unsigned char state[256];
	/* 100 */ unsigned char x;
	/* 101 */ unsigned char y;
};

// warning: multiple differing types with the same name, only one recovered
struct MD2_CTX {
	/*   0 */ unsigned char state[16];
	/*  10 */ unsigned char checksum[16];
	/*  20 */ unsigned char buffer[16];
	/*  30 */ unsigned int count;
};

// warning: multiple differing types with the same name, only one recovered
struct MD4_CTX {
	/*   0 */ unsigned int state[4];
	/*  10 */ unsigned int count[2];
	/*  18 */ unsigned char buffer[64];
};

// warning: multiple differing types with the same name, only one recovered
struct MD5_CTX {
	/*   0 */ RT_U4BYTE state[4];
	/*  10 */ RT_U4BYTE count[2];
	/*  18 */ RT_U1BYTE buffer[64];
	/*  58 */ RT_U1BYTE padding[8];
};

// warning: multiple differing types with the same name, only one recovered
struct RT_LIST_NODE {
	/*   0 */ RT_U4BYTE nDataSize;
	/*   4 */ struct RT_LIST_NODE* next;
};

typedef /* struct */ void* RT_LIST_BUF_POOL;
typedef /* struct */ void* RT_LIST_BUF;
typedef enum   RT_PEER_STATE;
typedef enum   RT_P2P_DISCONECT_REASON;
typedef /* struct */ void* RT_PEER_INFO;
typedef /* struct */ void* RT_OVERLAY_EDGE;
typedef /* struct */ void* RT_OVERLAY_INFO;
typedef /* struct */ void* RT_BACKLOG_INFO;

// warning: multiple differing types with the same name, only one recovered
struct RT_IP2P {
	/*   0 */ RT_UDP_CHANNEL channel;
	/*   4 */ RT_BACKLOG_INFO backlog[32];
	/* 184 */ RT_PEER_INFO* PeerInfo;
	/* 188 */ RT_OVERLAY_INFO* OverlayInfo;
	/* 18c */ RT_OVERLAY_INDEX OverlayToJoin;
	/* 190 */ RT_PEER_INFO** pPeerDestList;
	/* 194 */ RT_UDP_CONNECT* pDestList;
	/* 198 */ RT_1BYTE* pGrid;
	/* 19c */ RT_PEER_INDEX MaxPeers;
	/* 19e */ RT_PEER_INDEX ConnectedPeers;
	/* 1a0 */ RT_PEER_INDEX CoordinatedPeers;
	/* 1a2 */ RT_PEER_INDEX HostPeerIndex;
	/* 1a4 */ RT_PEER_INDEX MyPeerIndex;
	/* 1a8 */ RT_U4BYTE nBroadcastTestSends;
	/* 1ac */ RT_TIME_STAMP BroadcastTimeStamp;
	/* 1b4 */ RT_BOOL bReadReady;
	/* 1b8 */ RT_BOOL bBroadcastsEnabled;
	/* 1bc */ RT_BOOL bUseBroadcastComms;
	/* 1c0 */ RT_BOOL bUseTimeBase;
	/* 1c4 */ RT_BOOL bHostMigratedReady;
	/* 1c8 */ RT_BOOL bLAN;
	/* 1cc */ RT_U2BYTE nVirtualPort;
	/* 1d0 */ RT_U4BYTE nSendBufSize;
	/* 1d4 */ RT_U4BYTE nRecvBufSize;
	/* 1d8 */ RT_U4BYTE MaxOverlays;
	/* 1dc */ RT_OVERLAY_TYPE DefaultOverlayType;
	/* 1e0 */ RT_U2BYTE nLastPeerOrdinal;
	/* 1e2 */ RT_U2BYTE nLastCoordinatedOrdinal;
	/* 1e4 */ RT_BOOL bEnabDisconnectFwd;
	/* 1e8 */ RT_BOOL bUseHostTimeBase;
	/* 1ec */ RT_P2P_OVERLAY_DATA_CB pfOverlayDataCB;
	/* 1f0 */ RT_P2P_CONNECT_CB pfConnectCB;
	/* 1f4 */ RT_P2P_DISCONNECT_CB pfDisconnectCB;
	/* 1f8 */ RT_P2P_HOST_CHANGE_CB pfHostChangeCB;
	/* 1fc */ RT_P2P_PEER_UPDATE_CB pfPeerUpdateCB;
	/* 200 */ RT_P2P_INCOMING_DATA_CB pfIncomingDataCB;
	/* 204 */ RT_P2P_BROADCAST_UPDATE_CB pfBroadcastUpdateCB;
	/* 208 */ RT_P2P_TOKEN_DATA_CB pfTokenDataCB;
	/* 20c */ RT_P2P_HOST_TOKEN_DATA_CB pfHostTokenDataCB;
	/* 210 */ RT_P2P_TOKEN_NOTIFY_CB pfTokenNotifyCB;
	/* 214 */ RT_P2P_SYSTEM_CHANGE_CB pfSystemChangeCB;
	/* 218 */ __builtin_va_list pUserData;
};

typedef enum   RT_P2P_INTERNAL_MSG_TYPE;
typedef /* struct */ void* RT_P2P_NEW_PEER;
typedef /* struct */ void* RT_P2P_CONNECT_COMPLETE;
typedef /* struct */ void* RT_P2P_BROADCAST_UPDATE;
typedef /* struct */ void* RT_P2P_BROADCAST_DISCONNECT;
typedef /* struct */ void* RT_P2P_CONNECTION_DETACHED;
typedef /* struct */ void* RT_P2P_LOCAL_BROADCAST_TEST;
typedef /* struct */ void* RT_P2P_OVERLAY_TYPE;
typedef /* struct */ void* RT_P2P_JOIN_OVERLAY;
typedef /* struct */ void* RT_P2P_JOIN_RESPONSE;
typedef /* struct */ void* RT_P2P_QUIT_OVERLAY;
typedef /* struct */ void* RT_P2P_IGNORE_UPDATE;
typedef /* struct */ void* RT_P2P_APP_DATA;
typedef /* struct */ void* RT_P2P_GRID_DATA;
typedef /* struct */ void* RT_P2P_RELAY_DATA;
typedef /* struct */ void* RT_P2P_GAME_SESSION_KEY;
typedef /* struct */ void* RT_P2P_PEER_HOST_QUERY;
typedef /* function */ void** RT_P2P_HANDLE_EVENT_FUNC;
typedef enum   RT_UPNP_XML_PARSER_TYPE;
typedef /* struct */ void* RT_UPNP_XML_IGD;
typedef /* struct */ void* RT_UPNP_XML_WAN_IP_CONN;
typedef /* struct */ void* RT_UPNP_XML_WAN_PPP_CONN;
typedef /* struct */ void* RT_UPNP_XML_SOAP_QUERY_RESPONSE;
typedef /* struct */ void* RT_UPNP_XML_SOAP_ACTION_RESPONSE;
typedef __builtin_va_list RT_UPNP_XML_PARSER;
typedef RT_U4BYTE RT_UPNP_SERVICE_TYPE;
typedef enum   RT_UPNP_CONNECT_STATUS;
typedef __builtin_va_list RT_UPNP_IGD;
typedef /* function */ void** RT_UPNP_DISCOVERY_CB;
typedef /* function */ void** RT_UPNP_DESCRIPTION_CB;
typedef /* function */ void** RT_UPNP_SERVICE_DESCRIPTION_CB;
typedef /* function */ void** RT_UPNP_CONNECT_STATUS_CB;
typedef /* function */ void** RT_UPNP_EXTERNAL_IP_CB;
typedef /* function */ void** RT_UPNP_PORT_MAPPING_SEARCH_CB;
typedef /* function */ void** RT_UPNP_ADD_PORT_MAPPING_CB;
typedef /* function */ void** RT_UPNP_VERIFY_PORT_MAPPING_CB;
typedef /* function */ void** RT_UPNP_DELETE_PORT_MAPPING_CB;
typedef /* function */ void** RT_UPNP_RESOLVE_ADDRESS_CB;
typedef /* function */ void** RT_UPNP_UBER_RESOLVE_CB;
typedef enum   RT_UDP_ICONNECT_STATE;
typedef enum   SECURITY_MODE;
typedef /* struct */ void* RT_UDP_ACK_LIST;

// warning: multiple differing types with the same name, only one recovered
struct RT_UDP_ICONNECTION {
	/*   0 */ RT_UDP_ICONNECT_STATE State;
	/*   4 */ RT_RESULT Error;
	/*   8 */ RT_LINKADDRESS DestAddress;
	/*  10 */ RT_UDP_PORT DestPort;
	/*  14 */ RT_LIST_BUF SendBuf;
	/*  24 */ RT_LIST_BUF RecvBuf;
	/*  34 */ RT_TIME_STAMP LastRecvTime;
	/*  3c */ RT_TIME_STAMP LastSendTime;
	/*  44 */ RT_U4BYTE InactivityTimeout;
	/*  48 */ RT_U4BYTE RTTVAR;
	/*  4c */ RT_U4BYTE SRTT;
	/*  50 */ RT_U4BYTE HRTT;
	/*  54 */ RT_U4BYTE LRTT;
	/*  58 */ RT_U4BYTE RTO;
	/*  5c */ RT_U2BYTE VirtualPort;
	/*  5e */ RT_U2BYTE SessionID;
	/*  60 */ RT_U4BYTE BroadcastSessionID;
	/*  64 */ RT_U2BYTE SendCriticalSequenceID;
	/*  66 */ RT_U2BYTE RecvSequenceID;
	/*  68 */ RT_U2BYTE RecvCriticalSequenceID;
	/*  6c */ RT_U4BYTE nLatencyCritical;
	/*  70 */ RT_U4BYTE nPeerID;
	/*  74 */ RT_U4BYTE nKeyIndex;
	/*  78 */ RT_BOOL SendPeerKey;
	/*  7c */ RT_UDP_DATA_CALLBACK pfDataCB;
	/*  80 */ RT_UDP_EVENT_CALLBACK pfEventCB;
	/*  84 */ RT_UDP_ACK_LIST* pAckList;
	/*  88 */ __builtin_va_list UserData;
	/*  8c */ RT_UDP_ICONNECTION* next;
};

// warning: multiple differing types with the same name, only one recovered
struct RT_UDP_ICHANNEL {
	/*   0 */ RT_COMM_CHANNEL_ID iChannel;
	/*   4 */ SECURITY_MODE Security;
	/*   8 */ RT_UDP_ICONNECTION* iConnection;
	/*   c */ RT_UDP_ICONNECTION* pConnList;
	/*  10 */ RT_UPNP_IGD igd;
	/*  14 */ RT_LIST_BUF_POOL BufferPool;
	/*  2c */ RT_LIST_BUF UnconnectedRecvBuf;
	/*  3c */ RT_LIST_BUF BroadcastSendBuf;
	/*  4c */ RT_TIME_STAMP LastBroadcastTime;
	/*  54 */ RT_BOOL BroadcastLatencyCriticalPending;
	/*  58 */ RT_U1BYTE* pScratchBuf;
	/*  5c */ RT_U1BYTE* pRecvBuf;
	/*  60 */ RT_U4BYTE nConnections;
	/*  64 */ RT_U4BYTE nSendBufSize;
	/*  68 */ RT_U4BYTE nRecvBufSize;
	/*  6c */ RT_U4BYTE nMaxMsgSize;
	/*  70 */ RT_U4BYTE AggregateMsecs;
	/*  74 */ RT_U4BYTE nUPnPMaxAllocSize;
	/*  78 */ RT_U4BYTE BroadcastSessionID;
	/*  7c */ RT_U2BYTE SendSequenceID;
	/*  80 */ RT_BOOL bListening;
	/*  84 */ RT_BOOL bResolving;
	/*  88 */ RT_BOOL bUseRefMgr;
	/*  8c */ RT_LINKADDRESS BroadcastIP;
	/*  94 */ RT_LINKADDRESS LocalIP;
	/*  9c */ RT_UDP_PORT BindPort;
	/*  a0 */ RT_UDP_UNCONNECTED_CALLBACK pfUnconnectedDataCB;
	/*  a4 */ RT_UDP_EVENT_CALLBACK pfDefaultEventCB;
	/*  a8 */ RT_UDP_DATA_CALLBACK pfDefaultDataCB;
	/*  ac */ __builtin_va_list pUserData;
	/*  b0 */ RT_UDP_RESOLVE_CALLBACK pfResolveCB;
	/*  b4 */ __builtin_va_list pResolveUserData;
};

typedef /* struct */ void* RT_UDP_HEADER;
typedef /* struct */ void* RT_UDP_SUB_HEADER;
typedef /* struct */ void* RT_UDP_SUB_HEADER_AND_SEQUENCE;
typedef /* struct */ void* RT_UDP_SEND_HEADER;
typedef /* struct */ void* RT_UDP_EMPTY_PACKET;
typedef RT_UDP_EMPTY_PACKET RT_UDP_UNCONNECTED_HEADER;
typedef RT_UDP_EMPTY_PACKET RT_UDP_RST_PACKET_HEADER;
typedef /* struct */ void* RT_UDP_ACK_ONLY_PACKET_HEADER;
typedef /* struct */ void* RT_UDP_RECV_HEADER;
typedef /* struct */ void* RT_UDP_VEX_DATA;
typedef /* struct */ void* RT_UDP_MGR_GLOBALS;
typedef /* struct */ void* RT_UDP_VIRTUAL_PORT;
typedef enum   RT_UPNP_STATE;
typedef /* struct */ void* RT_UPNP_NATSERVICE_INFO;
typedef /* struct */ void* RT_UPNP_INTERNAL_IGD;
typedef /* struct */ void* sceSifCmdHdr;
typedef /* function */ void** sceSifCmdHandler;
typedef /* struct */ void* sceSifCmdData;
typedef /* struct */ void* sceSifCmdCSData;
typedef /* struct */ void* sceSifCmdSRData;
typedef /* struct */ void* sceSifCmdResetData;
typedef /* struct */ void* RT_MSG_HEADER;
typedef enum   RT_MSG_CLIENT_STATE;
typedef enum   RT_MSG_CLIENT_CHANNEL_TYPE;
typedef /* struct */ void* RT_MSG_CLIENT_LAST_MSG;
typedef /* struct */ void* RT_MSG_CLIENT_CHANNEL_INFO;
typedef /* struct */ void* RT_MSG_CLIENT_CONNECTION_INFO;
typedef /* function */ void** PROCESS_MSG_FUNC;
typedef enum   CODEC_MODE;
typedef RT_4BYTE JPEG_RESULT;
typedef enum   VIDEO_BLOCK_TYPE;
typedef /* struct */ void* NetTypeAudioBuffer;
typedef /* struct */ void* NetTypeVideoBuffer;

// warning: multiple differing types with the same name, only one recovered
struct NetTypeStreamMediaInfo {
	/*   0 */ RT_U4BYTE MaxClients;
	/*   4 */ RT_BOOL bInUse;
	/*   8 */ NetStreamMediaParams Params;
	/*  78 */ RT_OVERLAY_INDEX CurrentChannel;
	/*  7c */ RT_BOOL bOwnAudioBuffer;
	/*  80 */ RT_TIME_STAMP LastSendTime;
	/*  88 */ RT_PEER_INDEX* aChannelOwners;
	/*  8c */ RT_PEER_INDEX* pPeerIndex;
	/*  90 */ NetTypeAudioBuffer* pAudioStreams;
	/*  94 */ RT_U1BYTE* pScratchBuf;
	/*  98 */ RT_U4BYTE nScratchBufSize;
	/*  9c */ CODEC* pEncode;
	/*  a0 */ COLOR_ARRAY* pYData;
	/*  a4 */ COLOR_ARRAY* pCrData;
	/*  a8 */ COLOR_ARRAY* pCbData;
	/*  ac */ RGB_ARRAY* pRGBArray;
	/*  b0 */ NetTypeVideoBuffer* pVideoStreams;
};

typedef RT_2BYTE gsm_signal;
typedef RT_U1BYTE gsm_byte;
typedef LPC10 LPC10;
typedef LPC LPC;

// warning: multiple differing types with the same name, only one recovered
struct CODEC {
	/*   0 */ NetStreamMediaAudioType eMedia;
	/*   4 */ CODEC_MODE eMode;
	/*   8 */ RT_4BYTE nBytesPerFrame;
	/*   c */ RT_4BYTE nBytesEncodedFrame;
	/*  10 */ RT_4BYTE nEncodeBytesPerUpdate;
	/*  14 */ RT_4BYTE nDecodeBytesPerUpdate;
	/*  18 */ RT_4BYTE nEncodeBytesLast;
	/*  1c */ RT_4BYTE nDecodeBytesLast;
	/*  20 */ CODEC_INIT_FUNC initFunc;
	/*  24 */ CODEC_DESTROY_FUNC destroyFunc;
	/*  28 */ ENCODE_FRAME_FUNC encodeFunc;
	/*  2c */ DECODE_FRAME_FUNC decodeFunc;
	/*  30 */ RT_4BYTE m_RawSizeBytes;
	/*  34 */ RT_4BYTE m_EncodedBytes;
	/*  38 */ CODEC_HANDLE hCodec;
	/*  3c */ RT_U1BYTE m_Encoded[480];
	/* 21c */ RT_U1BYTE m_RawBuff[2048];
};

typedef enum   THRESHOLD;

// warning: multiple differing types with the same name, only one recovered
struct SEQBLOCK {
	/*   0 */ RT_U4BYTE nSequence;
	/*   4 */ RT_U4BYTE nSize;
	/*   8 */ RT_U1BYTE data[248];
};

// warning: multiple differing types with the same name, only one recovered
struct CSequence {
	/*   0 */ THRESHOLD m_eThreshold;
	/*   4 */ NetStreamMediaAudioType m_eMedia;
	/*   8 */ RT_U4BYTE m_iNext;
	/*   c */ RT_U4BYTE m_nBlockCount;
	/*  10 */ SEQBLOCK m_Blocks[64];
};

// warning: multiple differing types with the same name, only one recovered
struct VSEQBLOCK {
	/*   0 */ RT_U4BYTE nSequence;
	/*   4 */ RT_U4BYTE nSize;
	/*   8 */ RT_U1BYTE data[504];
};

// warning: multiple differing types with the same name, only one recovered
struct CVSequence {
	/*   0 */ RT_U4BYTE m_iNext;
	/*   4 */ RT_U4BYTE m_iLast;
	/*   8 */ RT_U4BYTE m_nBlockCount;
	/*   c */ VSEQBLOCK m_Blocks[64];
};

typedef enum   MediusBool;
typedef enum   MediusExceptionExtent;
typedef unsigned int MediusTransactionId;
typedef enum   MediusBillingBSPType;
typedef enum   MediusCharacterEncodingType;
typedef enum   MediusClanPlayerStatus;
typedef enum   MediusComparisonOperator;
typedef enum   MediusDeviceType;
typedef enum   MediusFindWorldType;
typedef enum   MediusGameListFilterField;
typedef enum   MediusGenerateRandomSelection;
typedef enum   MediusJoinType;
typedef enum   MediusLanguageType;
typedef enum   MediusMessageType;
typedef enum   MediusPlayerSearchType;
typedef enum   MediusPolicyType;
typedef enum   MediusSCETerritory;
typedef enum   MediusSortOrder;
typedef enum   MediusStoredConfirmationType;
typedef enum   MediusTextFilterType;
typedef enum   MediusUserAction;
typedef enum   MediusWorldAttributesType;
typedef /* struct */ void* MediusExceptionEvent;
typedef /* struct */ void* MediusAccountGetIDRequest;
typedef /* struct */ void* MediusAccountGetProfileRequest;
typedef /* struct */ void* MediusAccountLoginRequest;
typedef /* struct */ void* MediusAccountLogoutRequest;
typedef /* struct */ void* MediusAccountRegistrationRequest;
typedef /* struct */ void* MediusAccountUpdatePasswordRequest;
typedef /* struct */ void* MediusAccountUpdateProfileRequest;
typedef /* struct */ void* MediusAccountUpdateStats_OpenAccessRequest;
typedef /* struct */ void* MediusAddPlayerToClanResponse;
typedef /* struct */ void* MediusAddPlayerToClan_ByClanOfficerRequest;
typedef /* struct */ void* MediusAddPlayerToClan_ByClanOfficerResponse;
typedef /* struct */ void* MediusAddToBuddyListConfirmationRequest;
typedef /* struct */ void* MediusAddToBuddyListConfirmationResponse;
typedef /* struct */ void* MediusAddToBuddyListFwdConfirmationResponse;
typedef /* struct */ void* MediusAddToBuddyListRequest;
typedef /* struct */ void* MediusAddToIgnoreListRequest;
typedef /* struct */ void* MediusAnonymousLoginRequest;
typedef /* struct */ void* MediusBanPlayerRequest;
typedef /* struct */ void* MediusBanPlayerResponse;
typedef /* struct */ void* MediusChannelInfoRequest;
typedef /* struct */ void* MediusChannelList_ExtraInfoRequest;
typedef /* struct */ void* MediusChannelListRequest;
typedef /* struct */ void* MediusChannelListResponse;
typedef /* struct */ void* MediusGenericChatMessage;
typedef /* struct */ void* MediusBinaryMessage;
typedef /* struct */ void* MediusGenericChatSetFilterRequest;
typedef /* struct */ void* MediusCheckMyClanInvitationsRequest;
typedef /* struct */ void* MediusClanLadderListRequest;
typedef /* struct */ void* MediusClanLadderPositionRequest;
typedef /* struct */ void* MediusClearGameListFilterRequest;
typedef /* struct */ void* MediusClearStoredAccountInfoRequest;
typedef /* struct */ void* MediusClearStoredAccountInfoResponse;
typedef /* struct */ void* MediusConfirmClanTeamChallengeRequest;
typedef /* struct */ void* MediusCreateChannelRequest;
typedef /* struct */ void* MediusCreateClanRequest;
typedef /* struct */ void* MediusCreateGameRequest;
typedef /* struct */ void* MediusCreateGameResponse;
typedef /* struct */ void* MediusDeleteClanMessageRequest;
typedef /* struct */ void* MediusDisbandClanRequest;
typedef enum   MediusDnasCategory;
typedef /* struct */ void* MediusDnasSignaturePost;
typedef /* struct */ void* MediusFindPlayerRequest;
typedef /* struct */ void* MediusFindWorldByNameRequest;
typedef /* struct */ void* MediusGameInfoRequest;
typedef /* struct */ void* MediusGameList_ExtraInfoRequest;
typedef /* struct */ void* MediusGameListRequest;
typedef /* struct */ void* MediusGameListResponse;
typedef /* struct */ void* MediusGameWorldPlayerListRequest;
typedef /* struct */ void* MediusGetAllAnnouncementsRequest;
typedef /* struct */ void* MediusGetAllClanMessagesRequest;
typedef /* struct */ void* MediusGetAnnouncementsRequest;
typedef /* struct */ void* MediusGetBuddyInvitationsRequest;
typedef /* struct */ void* MediusGetBuddyInvitationsResponse;
typedef /* struct */ void* MediusGetBuddyList_ExtraInfoRequest;
typedef /* struct */ void* MediusGetBuddyListRequest;
typedef /* struct */ void* MediusGetBuddyListResponse;
typedef /* struct */ void* MediusGetIgnoreListRequest;
typedef /* struct */ void* MediusGetClanByIDRequest;
typedef /* struct */ void* MediusGetClanByNameRequest;
typedef /* struct */ void* MediusGetClanInvitationsSentRequest;
typedef /* struct */ void* MediusGetClanMemberList_ExtraInfoRequest;
typedef /* struct */ void* MediusGetClanMemberListRequest;
typedef /* struct */ void* MediusGetClanMemberListResponse;
typedef /* struct */ void* MediusGetClanTeamChallengeHistoryRequest;
typedef /* struct */ void* MediusGetClanTeamChallengesRequest;
typedef /* struct */ void* MediusGetGameListFilterRequest;
typedef /* struct */ void* MediusGetGameListFilterResponse;
typedef /* struct */ void* MediusGetLobbyPlayerNames_ExtraInfoRequest;
typedef /* struct */ void* MediusGetLobbyPlayerNamesRequest;
typedef /* struct */ void* MediusGetLobbyPlayerNamesResponse;
typedef /* struct */ void* MediusGetLocationsRequest;
typedef /* struct */ void* MediusGetMyClanMessagesRequest;
typedef /* struct */ void* MediusGetMyClansRequest;
typedef /* struct */ void* MediusGetPolicyRequest;
typedef /* struct */ void* MediusGetServerTimeRequest;
typedef /* struct */ void* MediusGetStoredAccountInfoRequest;
typedef /* struct */ void* MediusGetStoredAccountInfoResponse;
typedef /* struct */ void* MediusGetStoredAccountListRequest;
typedef /* struct */ void* MediusGetStoredAccountListResponse;
typedef /* struct */ void* MediusGetTotalChannelsRequest;
typedef /* struct */ void* MediusGetTotalChannelsResponse;
typedef /* struct */ void* MediusGetTotalGamesRequest;
typedef /* struct */ void* MediusGetTotalGamesResponse;
typedef /* struct */ void* MediusGetTotalRankingsRequest;
typedef /* struct */ void* MediusGetTotalUsersRequest;
typedef /* struct */ void* MediusGetTotalUsersResponse;
typedef /* struct */ void* MediusGetWorldSecurityLevelRequest;
typedef /* struct */ void* MediusInitializeStorageRequest;
typedef /* struct */ void* MediusInitializeStorageResponse;
typedef /* struct */ void* MediusInvitePlayerToClan_ByNameRequest;
typedef /* struct */ void* MediusInvitePlayerToClanRequest;
typedef /* struct */ void* MediusJoinChannelFwdRequest;
typedef /* struct */ void* MediusJoinChannelFwdResponse;
typedef /* struct */ void* MediusJoinChannelRequest;
typedef /* struct */ void* MediusJoinGameRequest;
typedef /* struct */ void* MediusLadderList_ExtraInfoRequest;
typedef /* struct */ void* MediusLadderPosition_ExtraInfoRequest;
typedef /* struct */ void* MediusLadderPositionFastRequest;
typedef /* struct */ void* MediusLadderPositionFastResponse;
typedef /* struct */ void* MediusLobbyWorldPlayerListRequest;
typedef /* struct */ void* MediusLobbyWorldPlayerListResponse;
typedef /* struct */ void* MediusModifyClanMessageRequest;
typedef /* struct */ void* MediusPickLocationRequest;
typedef /* struct */ void* MediusRemoveFromBuddyListRequest;
typedef /* struct */ void* MediusRemoveFromIgnoreListRequest;
typedef /* struct */ void* MediusRemovePlayerFromClanRequest;
typedef /* struct */ void* MediusRequestClanTeamChallengeRequest;
typedef /* struct */ void* MediusRespondToClanInvitationRequest;
typedef /* struct */ void* MediusRespondToClanTeamChallengeRequest;
typedef /* struct */ void* MediusRevokeClanInvitationRequest;
typedef /* struct */ void* MediusRevokeClanTeamChallengeRequest;
typedef /* struct */ void* MediusSetAutoChatHistoryRequest;
typedef /* struct */ void* MediusSendClanMessageRequest;
typedef /* struct */ void* MediusSessionBeginRequest;
typedef /* struct */ void* MediusSessionEndRequest;
typedef /* struct */ void* MediusSetGameListFilterRequest;
typedef /* struct */ void* MediusSetLobbyWorldFilterRequest;
typedef /* struct */ void* MediusSetLocalizationParamsRequest;
typedef /* struct */ void* MediusSetMessageAsReadRequest;
typedef /* struct */ void* MediusSetStoredAccountInfoRequest;
typedef /* struct */ void* MediusSetStoredAccountInfoResponse;
typedef /* struct */ void* MediusTextFilterRequest;
typedef /* struct */ void* MediusTransferClanLeadershipRequest;
typedef /* struct */ void* MediusUpdateClanLadderStatsWide_DeltaRequest;
typedef /* struct */ void* MediusUpdateUserState;
typedef /* struct */ void* MediusVersionServerRequest;
typedef enum   MediusUniverseAvailability;
typedef enum   MediusUniverseInformationType;
typedef /* struct */ void* MediusGetUniverseInformationRequest;
typedef /* struct */ void* MediusUniverseSvoURLResponse;
typedef /* struct */ void* MediusPostDebugInfoRequest;
typedef /* struct */ void* MediusPostDebugInfoResponse;
typedef /* struct */ void* MediusExtendedSessionBeginRequest;
typedef enum   MediusTokenCategoryType;
typedef enum   MediusTokenActionType;
typedef /* struct */ void* MediusTokenRequest;
typedef enum   MediusVoteActionType;
typedef enum   MediusBanReasonType;
typedef /* struct */ void* MediusVoteToBanPlayerRequest;
typedef enum   mbill_Response;
typedef enum   mbill_AccountFormatType;
typedef enum   mbill_PaymentType;
typedef enum   mbill_PurchaseType;
typedef enum   mbill_ProductStatus;
typedef enum   mbill_PurchaseStatus;
typedef enum   mbill_TokenStatus;
typedef enum   mbill_Result;
typedef /* struct */ void* mbill_String;
typedef /* struct */ void* mbill_Date;
typedef /* struct */ void* mbill_ID;
typedef /* struct */ void* mbill_Rates;
typedef /* struct */ void* mbill_Token;
typedef mbill_ID mbill_ProviderID;
typedef mbill_ID mbill_AgreementID;
typedef mbill_ID mbill_ProductID;
typedef mbill_ID mbill_PaymentID;
typedef mbill_ID mbill_PurchaseID;
typedef mbill_ID mbill_UniverseID;
typedef unsigned int mbill_TitleID;
typedef unsigned int mbill_DetailFilter;
typedef unsigned int mbill_PaymentFilter;
typedef unsigned int mbill_PaymentMethod;
typedef /* struct */ void* mbill_Credentials;
typedef /* struct */ void* mbill_ProviderInfo;
typedef /* struct */ void* mbill_Agreement;
typedef /* struct */ void* mbill_Product;
typedef mbill_Product* mbill_ProductList;
typedef /* struct */ void* mbill_Payment;
typedef /* struct */ void* mbill_Purchase;
typedef mbill_Purchase* mbill_PurchaseList;
typedef /* struct */ void* mbill_ListControl;
typedef /* struct */ void* mbill_Preferences;
typedef enum   mbill_State;
typedef /* struct */ void* mbill_ProviderInfoResponse;
typedef /* function */ void** MediusBillingProviderInfoCallback;

// warning: multiple differing types with the same name, only one recovered
struct mbill_TokenResponse {
	/*   0 */ mbill_TokenStatus Status;
};

typedef /* function */ void** MediusBillingLoginCallback;
typedef /* function */ void** MediusBillingLogoutCallback;
typedef /* struct */ void* mbill_ProductListResponse;
typedef /* function */ void** MediusBillingProductListCallback;
typedef /* struct */ void* mbill_ProductDetailResponse;
typedef /* function */ void** MediusBillingProductDetailCallback;
typedef /* struct */ void* mbill_PurchaseListResponse;
typedef /* function */ void** MediusBillingPurchaseListCallback;
typedef /* struct */ void* mbill_ProductPurchaseResponse;
typedef /* function */ void** MediusBillingProductPurchaseCallback;
typedef /* struct */ void* mbill_PurchaseVerifyResponse;
typedef /* function */ void** MediusBillingPurchaseVerifyCallback;
typedef /* struct */ void* mbill_PurchaseDetailResponse;
typedef /* function */ void** MediusBillingPurchaseDetailCallback;
typedef /* function */ void** MediusTypeAccountGetProfileCallback;
typedef /* function */ void** MediusTypeAccountLogoutCallback;
typedef /* function */ void** MediusTypeAccountUpdateProfileCallback;
typedef /* function */ void** MediusTypeAccountUpdatePasswordCallback;
typedef /* function */ void** MediusTypeAccountUpdateStatsCallback;
typedef /* function */ void** MediusTypeAnonymousLoginCallback;
typedef /* function */ void** MediusTypeAddToBuddyListFwdConfirmationRequestCallback;
typedef /* function */ void** MediusTypeBuddyGetPermissionCallback;
typedef /* function */ void** MediusTypeChannelListCallback;
typedef /* function */ void** MediusTypeCreateGameCallback;
typedef /* function */ void** MediusTypeReassignGameMediusWorldIDCallback;
typedef /* function */ void** MediusTypeGameListCallback;
typedef /* function */ void** MediusTypeGetBuddyListCallback;
typedef /* function */ void** MediusTypeGetGameListFilterCallback;
typedef /* function */ void** MediusTypeGetMyIPCallback;
typedef /* function */ void** MediusTypeLobbyWorldPlayerListCallback;
typedef /* function */ void** MediusTypeBanPlayerCallback;
typedef /* function */ void** MediusTypeLadderPositionFastCallback;
typedef /* function */ void** MediusTypeGetTotalGamesCallback;
typedef /* function */ void** MediusTypeGetTotalChannelsCallback;
typedef /* function */ void** MediusTypeGetTotalUsersCallback;
typedef /* function */ void** MediusTypeGetLobbyPlayerNamesCallback;
typedef /* function */ void** MediusTypeSetLocalizationParamsCallback;
typedef /* function */ void** MediusTypeSetMessageAsReadCallback;
typedef /* function */ void** MediusTypeGetLadderStatsWideCallback;
typedef /* function */ void** MediusTypeUpdateLadderStatsCallback;
typedef /* function */ void** MediusTypeGetBuddyInvitationsCallback;
typedef /* function */ void** MediusTypePostDebugInfoCallback;
typedef /* function */ void** MediusTypeTokenCallback;
typedef /* function */ void** MediusTypeSetAutoChatHistoryCallback;
typedef /* function */ void** MediusTypeAccountUpdateStats_OpenAccessCallback;
typedef NetTypeSystemMessageCallback MediusTypeSystemMessageCallback;
typedef /* function */ void** MediusTypeClearStoredAccountInfoCallback;
typedef /* function */ void** MediusTypeGetStoredAccountInfoCallback;
typedef /* function */ void** MediusTypeGetStoredAccountListCallback;
typedef /* function */ void** MediusTypeInitializeStorageCallback;
typedef /* function */ void** MediusTypeSetStoredAccountInfoCallback;
typedef enum   MediusCallTypeCode;
typedef /* struct */ void* MediusConnectInParams;
typedef /* struct */ void* MediusConnectOutParams;
typedef /* struct */ void* MediusDisconnectParams;
typedef /* struct */ void* MediusInitializeInParams;
typedef /* struct */ void* MediusInitializeOutParams;
typedef /* struct */ void* MediusInitializeBareInParams;
typedef /* struct */ void* MediusInitializeBareOutParams;
typedef mbill_Response mbpEnumResponse;
typedef mbill_TokenStatus mbpEnumTokenStatus;
typedef mbill_ProductStatus mbpEnumProductStatus;
typedef mbill_PurchaseStatus mbpEnumPurchaseStatus;
typedef mbill_PurchaseType mbpEnumPurchaseType;
typedef mbill_PaymentType mbpEnumPaymentType;
typedef mbill_AccountFormatType mbpEnumAccountFormatType;
typedef unsigned int mbpTypeDetailFilter;
typedef unsigned int mbpTypePaymentFilter;
typedef enum   mbpEnumAuthStage;
typedef enum   mbpEnumInfoType;
typedef enum   mbpEnumItemType;
typedef enum   mbpEnumTunnelAddress;
typedef /* struct */ void* mbpTypeServiceInfoRequest;
typedef /* struct */ void* mbpTypeServiceInfoResponse;
typedef /* struct */ void* mbpTypeAccountLoginRequest;
typedef /* struct */ void* mbpTypeAccountLoginRequest_v150;
typedef /* struct */ void* mbpTypeAccountLoginResponse;
typedef /* struct */ void* mbpTypeAccountLoginResponse_v150;
typedef /* struct */ void* mbpTypeBillingListRequest;
typedef /* struct */ void* mbpTypeBillingListResponse;
typedef /* struct */ void* mbpTypeBillingDetailRequest;
typedef /* struct */ void* mbpTypeBillingDetailResponse;
typedef /* struct */ void* mbpTypeProductDetailResponse;
typedef /* struct */ void* mbpTypePurchaseDetailResponse;
typedef /* struct */ void* mbpTypeProductPurchaseRequest;
typedef /* struct */ void* mbpTypeProductPurchaseResponse;
typedef /* struct */ void* mbpTypeBillingTunnelRequest;
typedef /* struct */ void* mbpTypeBillingTunnelResponse;
typedef /* function */ void** MediusTypeBillingInfoCallback;
typedef /* function */ void** MediusTypeBillingLoginCallback;
typedef /* function */ void** MediusTypeBillingListCallback;
typedef /* function */ void** MediusTypeBillingDetailCallback;
typedef /* function */ void** MediusTypeProductPurchaseCallback;
typedef /* function */ void** MediusTypeBillingTunnelCallback;
typedef /* function */ void** MediusTypeAddPlayerToClanCallback;
typedef /* function */ void** MediusTypeAddPlayerToClan_ByClanOfficerCallback;
typedef /* function */ void** MediusTypeGetClanMemberListCallback;
typedef /* function */ void** MediusTypeUpdateClanStatsCallback;
typedef /* function */ void** MediusTypeUpdateClanLadderStatsWide_DeltaCallback;

struct MediusFileAttributes_tag {
	/*   0 */ unsigned char Description[256];
	/* 100 */ unsigned int LastChangedTimeStamp;
	/* 104 */ unsigned int LastChangedByUserID;
	/* 108 */ unsigned int NumberAccesses;
	/* 10c */ unsigned int StreamableFlag;
	/* 110 */ unsigned int StreamingDataRate;
};

typedef struct MediusFileAttributes_tag MediusFileAttributes;

struct MediusFileMetaData_tag {
	/*   0 */ unsigned char Key[56];
	/*  38 */ unsigned char Value[256];
};

typedef struct MediusFileMetaData_tag MediusFileMetaData;

struct MediusFileChecksum_tag {
	/*   0 */ unsigned char* pucData;
	/*   4 */ unsigned int uiSize;
	/*   8 */ unsigned char Checksum[16];
};

typedef struct MediusFileChecksum_tag MediusFileChecksum;

struct MediusFileCreateRequest_tag {
	/*   0 */ MediusFile MediusFileToCreate;
	/*  ac */ MediusFileAttributes MediusFileCreateAttributes;
	/* 1c0 */ char MessageID[21];
};

typedef struct MediusFileCreateRequest_tag MediusFileCreateRequest;

struct MediusFileUploadRequest_tag {
	/*   0 */ MediusFile MediusFileInfo;
	/*  ac */ unsigned char* pucDataStart;
	/*  b0 */ unsigned int uiDataSize;
	/*  b4 */ char MessageID[21];
};

typedef struct MediusFileUploadRequest_tag MediusFileUploadRequest;

struct MediusFileUploadServerReq_tag {
	/*   0 */ int iReqStartByteIndex;
	/*   4 */ int iPacketNumber;
	/*   8 */ int iXferStatus;
	/*   c */ MediusCallbackStatus StatusCode;
	/*  10 */ char MessageID[21];
};

typedef struct MediusFileUploadServerReq_tag MediusFileUploadServerReq;

struct MediusFileCloseRequest_tag {
	/*   0 */ MediusFile MediusFileInfo;
	/*  ac */ char MessageID[21];
};

typedef struct MediusFileCloseRequest_tag MediusFileCloseRequest;

struct MediusFileDownloadRequest_tag {
	/*   0 */ MediusFile MediusFileInfo;
	/*  ac */ char MessageID[21];
};

typedef struct MediusFileDownloadRequest_tag MediusFileDownloadRequest;

struct MediusFileDownloadStreamRequest_tag {
	/*   0 */ MediusFile MediusFileInfo;
	/*  ac */ char MessageID[21];
};

typedef struct MediusFileDownloadStreamRequest_tag MediusFileDownloadStreamRequest;

struct MediusFileDownloadStreamResponse_tag {
	/*   0 */ unsigned char Data[464];
	/* 1d0 */ int iStartByteIndex;
	/* 1d4 */ int iDataSize;
	/* 1d8 */ int iPacketNumber;
	/* 1dc */ int iXferStatus;
	/* 1e0 */ MediusCallbackStatus StatusCode;
	/* 1e4 */ char MessageID[21];
};

typedef struct MediusFileDownloadStreamResponse_tag MediusFileDownloadStreamResponse;

struct MediusFileDeleteRequest_tag {
	/*   0 */ MediusFile MediusFileInfo;
	/*  ac */ char MessageID[21];
};

typedef struct MediusFileDeleteRequest_tag MediusFileDeleteRequest;

struct MediusFileListRequest_tag {
	/*   0 */ unsigned char FilenameBeginsWith[128];
	/*  80 */ unsigned int FilesizeGreaterThan;
	/*  84 */ unsigned int FilesizeLessThan;
	/*  88 */ unsigned int OwnedByID;
	/*  8c */ unsigned int NewerThanTimestamp;
	/*  90 */ unsigned int StartingEntryNumber;
	/*  94 */ unsigned int PageSize;
	/*  98 */ char MessageID[21];
};

typedef struct MediusFileListRequest_tag MediusFileListRequest;

struct MediusFileUpdateAttributesRequest_tag {
	/*   0 */ MediusFile MediusFileInfo;
	/*  ac */ MediusFileAttributes MediusFileUpdatedAttributes;
	/* 1c0 */ char MessageID[21];
};

typedef struct MediusFileUpdateAttributesRequest_tag MediusFileUpdateAttributesRequest;

struct MediusFileUpdateAttributesResponse_tag {
	/*   0 */ MediusFile MediusFileInfo;
	/*  ac */ MediusCallbackStatus StatusCode;
	/*  b0 */ char MessageID[21];
};

typedef struct MediusFileUpdateAttributesResponse_tag MediusFileUpdateAttributesResponse;

struct MediusFileGetAttributesRequest_tag {
	/*   0 */ MediusFile MediusFileInfo;
	/*  ac */ char MessageID[21];
};

typedef struct MediusFileGetAttributesRequest_tag MediusFileGetAttributesRequest;

struct MediusFileGetAttributesResponse_tag {
	/*   0 */ MediusFile MediusFileInfo;
	/*  ac */ MediusFileAttributes MediusFileAttributesResponse;
	/* 1c0 */ MediusCallbackStatus StatusCode;
	/* 1c4 */ char MessageID[21];
};

typedef struct MediusFileGetAttributesResponse_tag MediusFileGetAttributesResponse;

struct MediusFileUpdateMetaDataRequest_tag {
	/*   0 */ MediusFile MediusFileInfo;
	/*  ac */ MediusFileMetaData MediusUpdateMetaData;
	/* 1e4 */ char MessageID[21];
};

typedef struct MediusFileUpdateMetaDataRequest_tag MediusFileUpdateMetaDataRequest;

struct MediusFileUpdateMetaDataResponse_tag {
	/*   0 */ MediusFile MediusFileInfo;
	/*  ac */ MediusCallbackStatus StatusCode;
	/*  b0 */ char MessageID[21];
};

// warning: multiple differing types with the same name, only one recovered
typedef struct MediusFileUpdateMetaDataResponse_tag MediusFileUpdateMetaDataResponse;

struct MediusFileGetMetaDataRequest_tag {
	/*   0 */ MediusFile MediusFileInfo;
	/*  ac */ MediusFileMetaData MediusMetaDataRequestedKey;
	/* 1e4 */ char MessageID[21];
};

typedef struct MediusFileGetMetaDataRequest_tag MediusFileGetMetaDataRequest;

struct MediusFileGetMetaDataResponse_tag {
	/*   0 */ MediusFile MediusFileInfo;
	/*  ac */ MediusFileMetaData MediusMetaDataResponse;
	/* 1e4 */ MediusCallbackStatus StatusCode;
	/* 1e8 */ char MessageID[21];
	/* 1fd */ char EndOfList;
};

typedef struct MediusFileGetMetaDataResponse_tag MediusFileGetMetaDataResponse;

struct MediusFileSearchByMetaDataRequest_tag {
	/*   0 */ MediusFileMetaData MediusMetaDataRequestedKey;
	/* 138 */ char MessageID[21];
};

typedef struct MediusFileSearchByMetaDataRequest_tag MediusFileSearchByMetaDataRequest;

struct MediusFileSearchByMetaDataResponse_tag {
	/*   0 */ MediusFile MediusFileInfo;
	/*  ac */ MediusFileMetaData MediusMetaDataResponse;
	/* 1e4 */ MediusCallbackStatus StatusCode;
	/* 1e8 */ char MessageID[21];
	/* 1fd */ char EndOfList;
};

typedef struct MediusFileSearchByMetaDataResponse_tag MediusFileSearchByMetaDataResponse;

struct MediusFileCancelOperationRequest_tag {
	/*   0 */ MediusFile MediusFileInfo;
	/*  ac */ char MessageID[21];
};

typedef struct MediusFileCancelOperationRequest_tag MediusFileCancelOperationRequest;

struct MediusFileCancelOperationResponse_tag {
	/*   0 */ MediusCallbackStatus StatusCode;
	/*   4 */ char MessageID[21];
};

typedef struct MediusFileCancelOperationResponse_tag MediusFileCancelOperationResponse;
typedef /* function */ void** MediusFileTypeDownloadStreamCallback;
typedef /* function */ void** MediusFileTypeUpdateAttributesCallback;
typedef /* function */ void** MediusFileTypeGetAttributesCallback;
typedef /* function */ void** MediusFileTypeUpdateMetaDataCallback;
typedef /* function */ void** MediusFileTypeGetMetaDataCallback;
typedef /* function */ void** MediusFileTypeSearchByMetaDataCallback;
typedef /* function */ void** MediusFileTypeCancelOperationCallback;
typedef enum   MediusUtilTypeWorldPersistence;
typedef enum   MediusUtilTypeEvent;
typedef enum   MediusUtilTypeEntity;
typedef /* struct */ void* MediusUtilAddLobbyWorldRequest;
typedef /* struct */ void* MediusUtilAddGameWorldRequest;
typedef /* struct */ void* MediusUtilAddWorldResponse;
typedef /* struct */ void* MediusUtilUpdateLobbyWorldRequest;
typedef /* struct */ void* MediusUtilUpdateGameWorldRequest;
typedef /* struct */ void* MediusUtilGetServerVersionRequest;
typedef /* struct */ void* MediusUtilGetServerVersionResponse;
typedef /* struct */ void* MediusUtilEventMsg;
typedef /* function */ void** MediusUtilTypeGetServerVersionCallback;
typedef /* function */ void** MediusUtilTypeAddLobbyWorldCallback;
typedef /* function */ void** MediusUtilTypeAddGameWorldCallback;
typedef /* function */ void** MediusUtilTypeUpdateLobbyWorldCallback;
typedef /* function */ void** MediusUtilTypeUpdateGameWorldCallback;
typedef /* function */ void** MediusUtilTypeEventMsgCallback;
typedef enum   MediusChatToggle;
typedef /* struct */ void* MediusAddToBuddyListFwdConfirmationRequest0;
typedef /* struct */ void* MediusChannelList_ExtraInfoResponse0;
typedef /* struct */ void* MediusChannelList_ExtraInfoResponse1;
typedef /* struct */ void* MediusChatFwdMessage;
typedef /* struct */ void* MediusChatMessage;
typedef /* struct */ void* MediusChatToggleRequest;
typedef /* struct */ void* MediusChatToggleResponse;
typedef /* struct */ void* MediusCreateChannelRequest0;
typedef /* struct */ void* MediusCreateChannelRequest1;
typedef /* struct */ void* MediusCreateGameOnSelfRequest;
typedef /* struct */ void* MediusCreateGameOnSelfResponse;
typedef /* struct */ void* MediusCreateGameRequest0;
typedef /* struct */ void* MediusCreateGameRequest1;
typedef /* struct */ void* MediusGetLadderStatsRequest;
typedef /* struct */ void* MediusGetLadderStatsResponse;
typedef /* struct */ void* MediusJoinGameRequest0;
typedef /* struct */ void* MediusLadderList_ExtraInfoResponse0;
typedef /* struct */ void* MediusLadderListRequest;
typedef /* struct */ void* MediusLadderListResponse;
typedef /* struct */ void* MediusLadderPositionRequest;
typedef /* struct */ void* MediusLadderPositionResponse;
typedef /* struct */ void* MediusMachineSignaturePost;
typedef /* struct */ void* MediusUpdateLadderStatsRequest;
typedef /* struct */ void* MediusUniverseStatusListResponse;
typedef /* struct */ void* MediusGetUniverse_ExtraInfoRequest;
typedef /* struct */ void* MediusUniverseStatusList_ExtraInfoResponse;
typedef /* struct */ void* MediusClearGameListFilterRequest0;
typedef /* struct */ void* MediusGetGameListFilterResponse0;
typedef /* struct */ void* MediusSetGameListFilterRequest0;
typedef /* struct */ void* MediusSetGameListFilterResponse0;
typedef /* struct */ void* MediusWorldReport0;
typedef /* struct */ void* MediusAddToBuddyListConfirmationRequest0;
typedef /* struct */ void* MediusAddToBuddyListFwdConfirmationResponse0;
typedef /* struct */ void* MediusGetLadderStatsWide_wIDArray_Request;
typedef /* struct */ void* MediusGetLadderStatsWide_wIDArray_Response;
typedef /* struct */ void* MediusUpdateGameRequest;
typedef /* struct */ void* MediusUpdateGameResponse;
typedef /* struct */ void* MediusGameInfoResponse0;
typedef /* struct */ void* MediusGameList_ExtraInfoResponse0;
typedef enum   MediusProcessingState;
typedef /* struct */ void* MediusFilterMask;
typedef /* struct */ void* MEDIUS_FUNCTION_POINTER;
typedef enum   StringManagerStatus;
typedef /* struct */ void* mbill_TypeCacheHashKey;

struct MediusFileUpdateMetaDataResponset_tag {
	/*   0 */ MediusFile MediusFileInfo;
	/*  ac */ MediusCallbackStatus StatusCode;
	/*  b0 */ char MessageID[21];
};

struct MediusFileReturn_tag {
	/*   0 */ int softError;
	/*   4 */ MediusFile fileInfo;
};

typedef struct MediusFileReturn_tag MediusFileReturn;
typedef unsigned int TypeId;
typedef enum   MediusTransactionState;

// warning: multiple differing types with the same name, only one recovered
struct MediusTransactionHeader {
	/*   0 */ MediusTransactionId transactionId;
	/*   4 */ unsigned int clientContextId;
};

// warning: multiple differing types with the same name, only one recovered
struct MediusMessageDest {
	/*   0 */ int worldId;
	/*   4 */ int sourceClientIndex;
	/*   8 */ int msgClass;
	/*   c */ int msgType;
	/*  10 */ MediusTransactionId transactionId;
	/*  14 */ unsigned int clientContextId;
};

struct MediusMessage_ {
	/*   0 */ RT_PACK_BUFFER buffer;
	/*  14 */ RT_PACK_BUFFER save;
	/*  28 */ unsigned char version;
	/*  2c */ unsigned int length;
	/*  30 */ unsigned char transactionState;
	/*  34 */ MediusTransactionId transactionId;
	/*  38 */ unsigned int clientContextId;
	/*  3c */ MediusCallbackStatus status;
	/*  40 */ MediusExceptionEvent exceptionEvent;
};

// warning: multiple differing types with the same name, only one recovered
typedef struct MediusMessage_ MediusMessage;

struct MediusMessageInterface_ {
	/*   0 */ /* function */ void** constructIn;
	/*   4 */ /* function */ void** constructOut;
	/*   8 */ /* function */ void** send_;
	/*   c */ /* function */ void** sendRequest;
	/*  10 */ /* function */ void** sendResponse;
	/*  14 */ /* function */ void** sendResult;
	/*  18 */ /* function */ void** sendException;
	/*  1c */ /* function */ void** getObjectSize;
};

typedef struct MediusMessageInterface_ MediusMessageInterface;
typedef enum   MediusDTypeEnum;
typedef /* struct */ void* MediusDFieldSpec;
typedef /* struct */ void* MediusDFieldMap;
typedef short unsigned int MediusDFieldId;
typedef unsigned int MediusDTypeId;
typedef MediusDMetaType_ MediusDMetaType;
typedef MediusDType_ MediusDType;

struct MediusDTypeInterface_ {
	/*   0 */ /* function */ void** create;
	/*   4 */ /* function */ void** destroy;
	/*   8 */ /* function */ void** getNumFields;
	/*   c */ /* function */ void** getObjectDataSize;
	/*  10 */ /* function */ void** printType;
	/*  14 */ /* function */ void** printMetaType;
};

typedef struct MediusDTypeInterface_ MediusDTypeInterface;
typedef short unsigned int MediusDFieldIndex;
typedef unsigned int MediusDFieldMask;
typedef /* struct */ void* MediusDFieldIdList;
typedef MediusDFieldDef_ MediusDFieldDef;
typedef /* struct */ void* MediusDField;

struct MediusDFieldInterface_ {
	/*   0 */ /* function */ void** getFieldId;
	/*   4 */ /* function */ void** getTypeId;
	/*   8 */ /* function */ void** getSize;
	/*   c */ /* function */ void** copy;
	/*  10 */ /* function */ void** get;
	/*  14 */ /* function */ void** set;
	/*  18 */ /* function */ void** print;
};

typedef struct MediusDFieldInterface_ MediusDFieldInterface;
typedef enum   MediusDInterestId;
typedef enum   MediusDListId;
typedef enum   MediusDListAction;
typedef enum   MediusDListServiceLevel;
typedef unsigned int MediusDListFilterId;
typedef unsigned int MediusDRowId;
typedef MediusDListSubscription_ MediusDListSubscription;
typedef MediusDInterestCallback_ MediusDInterestCallback;
typedef MediusDArgList_ MediusDArgList;
typedef /* function */ void** MediusDListActionCallback;

struct MediusDListInterface_ {
	/*   0 */ /* function */ void** subscribe;
	/*   4 */ /* function */ void** unsubscribe;
	/*   8 */ /* function */ void** setInterestCB;
	/*   c */ /* function */ void** associateInterestCB;
	/*  10 */ /* function */ void** refresh;
	/*  14 */ /* function */ void** setLevel;
	/*  18 */ /* function */ void** printSubscription;
	/*  1c */ /* function */ void** popRowData;
	/*  20 */ /* function */ void** printArgList;
};

typedef struct MediusDListInterface_ MediusDListInterface;
typedef MediusDRow_ MediusDRow;

struct MediusDRowInterface_ {
	/*   0 */ /* function */ void** isDirty;
	/*   4 */ /* function */ void** getId;
	/*   8 */ /* function */ void** getField;
	/*   c */ /* function */ void** findField;
	/*  10 */ /* function */ void** getNumFields;
	/*  14 */ /* function */ void** getData;
	/*  18 */ /* function */ void** print;
};

typedef struct MediusDRowInterface_ MediusDRowInterface;

struct MediusDRow_ {
	/*   0 */ MediusDType* pRowType;
	/*   4 */ unsigned int dirty;
	/*   5 */ char data[0];
};

struct MediusDRowNetInterface_ {
	/*   0 */ /* function */ void** construct;
	/*   4 */ /* function */ void** destruct;
	/*   8 */ /* function */ void** update;
};

typedef struct MediusDRowNetInterface_ MediusDRowNetInterface;
typedef unsigned int MediusDFieldIdListIndex;
typedef /* function */ void** rt_pack_fn;

struct MediusDFieldDef_ {
	/*   0 */ MediusDFieldId fieldId;
	/*   4 */ /* struct */ void* constraint;
	/*  10 */ unsigned int size;
	/*  14 */ rt_pack_fn pack;
	/*  18 */ unsigned int numElem;
};

typedef MediusDMetaType_ MediusMetaType;

struct MediusDType_ {
	/*   0 */ MediusDMetaType* pMetaType;
	/*   4 */ MediusDFieldMask mask;
	/*   8 */ short unsigned int numFields;
	/*   a */ short unsigned int objectSize;
	/*   c */ MediusDFieldSpec fieldSpec[0];
};

struct MediusDTypePInterface_ {
	/*   0 */ /* function */ void** create;
	/*   4 */ /* function */ void** destroy;
	/*   8 */ /* function */ void** getField;
	/*   c */ /* function */ void** findField;
	/*  10 */ /* function */ void** getThisField;
	/*  14 */ /* function */ void** getFieldId;
	/*  18 */ /* function */ void** getFieldIndex;
	/*  1c */ /* function */ void** getNumFields;
	/*  20 */ /* function */ void** getObjectSize;
	/*  24 */ /* function */ void** getObjectDataSize;
	/*  28 */ /* function */ void** getMask;
	/*  2c */ /* function */ void** getMaskFromList;
	/*  30 */ /* function */ void** createMask;
	/*  34 */ /* function */ void** getMetaType;
	/*  38 */ /* function */ void** getMetaMask;
	/*  3c */ /* function */ void** printType;
	/*  40 */ /* function */ void** printMetaType;
};

typedef struct MediusDTypePInterface_ MediusDTypePInterface;
// warning: multiple differing types with the same name, only one recovered
typedef struct MediusMessage_ MediusMessage__;

struct MediusDArgListInterface_ {
	/*   0 */ /* function */ void** construct;
	/*   4 */ /* function */ void** destruct;
	/*   8 */ /* function */ void** getTopFieldId;
	/*   c */ /* function */ void** getTopTypeId;
	/*  10 */ /* function */ void** popField;
	/*  14 */ /* function */ void** popFieldData;
	/*  18 */ /* function */ void** pushField;
	/*  1c */ /* function */ void** pushRowData;
	/*  20 */ /* function */ void** popRowData;
	/*  24 */ /* function */ void** rewind;
	/*  28 */ /* function */ void** flush;
	/*  2c */ /* function */ void** getNumArguments;
	/*  30 */ /* function */ void** getObjectSize;
	/*  34 */ /* function */ void** print;
};

typedef struct MediusDArgListInterface_ MediusDArgListInterface;

struct MediusDMetaTypeInterface_ {
	/*   0 */ /* function */ void** create;
	/*   4 */ /* function */ void** destroy;
	/*   8 */ /* function */ void** getThisField;
};

typedef struct MediusDMetaTypeInterface_ MediusDMetaTypeInterface;

struct MediusDMetaType_ {
	/*   0 */ MediusDTypeId metaTypeId;
	/*   4 */ short unsigned int numFields;
	/*   8 */ MediusDFieldDef_** fieldDef;
	/*   c */ MediusDFieldMask fieldMask;
};

struct MediusDArgList_ {
	/*   0 */ RT_PACK_BUFFER* buffer;
	/*   4 */ MediusDMetaType* pMetaType;
	/*   8 */ unsigned int shadowMask;
	/*   c */ unsigned int fieldMask;
	/*  10 */ MediusDFieldId firstId;
};

struct MediusDListSubscribe_ {
	/*   0 */ RT_U4BYTE fieldMask;
	/*   4 */ RT_U4BYTE instanceId;
	/*   8 */ RT_U4BYTE relationId;
	/*   c */ RT_U4BYTE filterId;
	/*  10 */ RT_U2BYTE listId;
	/*  12 */ RT_U1BYTE level;
};

typedef struct MediusDListSubscribe_ MediusDListSubscribe;
typedef enum   MediusDListRequestId;

struct MediusDListRequest_ {
	/*   0 */ RT_U4BYTE fieldMask;
	/*   4 */ RT_U2BYTE listId;
	/*   8 */ RT_U4BYTE instanceId;
	/*   c */ RT_U1BYTE request;
};

typedef struct MediusDListRequest_ MediusDListRequest;

struct MediusDListUpdate_ {
	/*   0 */ MediusCallbackStatus error;
	/*   4 */ RT_U4BYTE fieldMask;
	/*   8 */ RT_U4BYTE timeStamp;
	/*   c */ RT_U4BYTE assocMask;
	/*  10 */ RT_U4BYTE subscriptionMask;
	/*  14 */ RT_U1BYTE action;
	/*  15 */ RT_U1BYTE numRows;
};

typedef struct MediusDListUpdate_ MediusDListUpdate;
typedef unsigned int MediusDAssocMask;
typedef enum   MediusDPLayerListFields;

struct MediusDInterestCallback_ {
	/*   0 */ MediusDListActionCallback pUserCallback;
	/*   4 */ __builtin_va_list pUserData;
	/*   8 */ MediusDType* pUserType;
	/*   c */ MediusDFieldMask fieldMask;
	/*  10 */ MediusDListServiceLevel serviceLevel;
};

struct MediusDList_ {
	/*   0 */ unsigned int dirty;
};

typedef MediusDList MediusDList;

struct MediusDListSubscription_ {
	/*   0 */ MediusDListId listId;
	/*   4 */ MediusDListRequestId pendingRequestId;
	/*   8 */ MediusTransactionId pendingTransactionId;
	/*   c */ unsigned int instanceId;
	/*  10 */ unsigned int relationId;
	/*  14 */ MediusDListFilterId filterId;
	/*  18 */ MediusDListActionCallback pUserCallback;
	/*  1c */ __builtin_va_list pUserData;
	/*  20 */ MediusDType* pRowType;
	/*  24 */ unsigned int serviceLevel;
	/*  28 */ MediusDInterestCallback* pInterestCallback;
	/*  2c */ MediusDList* pList;
};

typedef enum   MediusDAuxPLayerListFields;
typedef _RT_HASH_TABLE_DESC RT_HASH_TABLE_DESC;
typedef _RT_HASH_TABLE_DATA_DESC RT_HASH_TABLE_DATA_DESC;
typedef _RT_HASH_TABLE_IFACE RT_HASH_TABLE_IFACE;
typedef _RT_HASH_TABLE_ RT_HASH_TABLE;
typedef _RT_HASH_TABLE_STATS RT_HASH_TABLE_STATS;
typedef _RT_HASH_ITERATOR_ RT_HASH_ITERATOR;
typedef _RT_HASH_ITERATOR_IFACE RT_HASH_ITERATOR_IFACE;
typedef _RT_HASH_SEEK_POS RT_HASH_SEEK_POS;
typedef _RT_HASH_BUFFER RT_HASH_BUFFER;
typedef _RT_HASH_CRC32_EXT RT_HASH_CRC32_EXT;
typedef __builtin_va_list RT_HASH_DATA;
typedef __builtin_va_list RT_HASH_KEY;

enum _RT_HASH_RVAL {
	RT_HASH_RVAL_SUCCESS = 0,
	RT_HASH_RVAL_INVALID_ARG = 1,
	RT_HASH_RVAL_MEMORY = 2,
	RT_HASH_RVAL_DOES_NOT_EXIST = 3,
	RT_HASH_RVAL_END = 4,
	RT_HASH_RVAL_WOULD_BLOCK = 6,
	RT_HASH_RVAL_INTERNAL_FAILURE = 7,
	RT_HASH_RVAL_BUFFER_TO_SMALL = 8,
	RT_HASH_RVAL_DUPLICATE_SORT_IDX = 9,
	RT_HASH_RVAL_NOT_SUPPORTED = 10,
	RT_HASH_RVAL_EXTRA = -1
};

typedef enum _RT_HASH_RVAL RT_HASH_RVAL;

enum _RT_HASH_ITERATOR_TYPE {
	RT_HASH_ITERATOR_TYPE_TABLE = 1,
	RT_HASH_ITERATOR_TYPE_BUCKET = 2,
	RT_HASH_ITERATOR_TYPE_MAX = 3,
	RT_HASH_ITERATOR_TYPE_EXTRA = -1
};

typedef enum _RT_HASH_ITERATOR_TYPE RT_HASH_ITERATOR_TYPE;
typedef /* function */ void* RT_HASH_HASH_FNC;
typedef /* function */ void* RT_HASH_EQUAL_FNC;
typedef /* function */ void* RT_HASH_KEY_FNC;
typedef /* function */ void* RT_HASH_DESTROY_FNC;
typedef /* function */ void* RT_HASH_DATA_ITEM_COPY_FNC;
typedef /* function */ void* RT_HASH_GET_TABLE_INFO_FNC;
typedef /* function */ void* RT_HASH_SET_HASH_FNC_FNC;
typedef /* function */ void* RT_HASH_SET_DESTROY_FNC_FNC;
typedef /* function */ void* RT_HASH_GET_STATS_FNC;
typedef /* function */ void* RT_HASH_RELEASE_FNC;
typedef /* function */ void* RT_HASH_ADD_ITEM_FNC;
typedef /* function */ void* RT_HASH_ADD_SORT_ITEM_FNC;
typedef /* function */ void* RT_HASH_REMOVE_ITEM_FNC;
typedef /* function */ void* RT_HASH_REMOVE_ALL_ITEMS_FNC;
typedef /* function */ void* RT_HASH_GET_ITEM_DATA_FNC;
typedef /* function */ void* RT_HASH_CRC32_FNC;
typedef /* function */ void* RT_HASH_FLATTEN_FNC;
typedef /* function */ void* RT_HASH_CREATE_ITERATOR_FNC;
typedef /* function */ void* RT_HASH_ATTACH_TABLE_FNC;
typedef /* function */ void* RT_HASH_ITERATOR_RELEASE_FNC;
typedef /* function */ void* RT_HASH_ITERATOR_NEXT_FNC;
typedef /* function */ void* RT_HASH_ITERATOR_PREV_FNC;
typedef /* function */ void* RT_HASH_ITERATOR_SEEK_FNC;
typedef /* function */ void* RT_HASH_ITERATOR_GET_ITEM_FNC;
typedef /* function */ void* RT_HASH_ITERATOR_REMOVE_ITEM_FNC;

struct _RT_HASH_TABLE_IFACE {
	/*   0 */ RT_HASH_GET_TABLE_INFO_FNC* GetTableInfo;
	/*   4 */ RT_HASH_SET_HASH_FNC_FNC* SetHashFnc;
	/*   8 */ RT_HASH_SET_DESTROY_FNC_FNC* SetDestroyFnc;
	/*   c */ RT_HASH_GET_STATS_FNC* GetStats;
	/*  10 */ RT_HASH_RELEASE_FNC* Release;
	/*  14 */ RT_HASH_ADD_ITEM_FNC* AddItem;
	/*  18 */ RT_HASH_ADD_SORT_ITEM_FNC* AddSortItem;
	/*  1c */ RT_HASH_REMOVE_ITEM_FNC* RemoveItem;
	/*  20 */ RT_HASH_REMOVE_ALL_ITEMS_FNC* RemoveAllItems;
	/*  24 */ RT_HASH_GET_ITEM_DATA_FNC* GetItemData;
	/*  28 */ RT_HASH_CRC32_FNC* Crc32;
	/*  2c */ RT_HASH_FLATTEN_FNC* Flatten;
	/*  30 */ RT_HASH_CREATE_ITERATOR_FNC* CreateIterator;
	/*  34 */ RT_HASH_ATTACH_TABLE_FNC* AttachTable;
};

struct _RT_HASH_TABLE_DESC {
	/*   0 */ RT_U4BYTE TableSize;
	/*   4 */ RT_U4BYTE DataSize;
	/*   8 */ RT_U4BYTE KeySize;
	/*   c */ RT_HASH_HASH_FNC* HashFnc;
	/*  10 */ RT_HASH_EQUAL_FNC* EqualFnc;
	/*  14 */ RT_HASH_KEY_FNC* KeyFnc;
};

struct _RT_HASH_TABLE_DATA_DESC {
	/*   0 */ RT_U4BYTE ItemCnt;
	/*   4 */ RT_U4BYTE DataSize;
};

struct _RT_HASH_TABLE_STATS {
	/*   0 */ RT_U4BYTE DataItemCnt;
	/*   4 */ RT_U4BYTE DataItemSize;
};

struct _RT_HASH_SEEK_POS {
	union  {
		/*   0 */ RT_U4BYTE uiPos;
		/*   0 */ __builtin_va_list Key;
	} ;
};

struct _RT_HASH_BUFFER {
	/*   0 */ RT_U4BYTE Size;
	/*   4 */ __builtin_va_list Data;
	/*   8 */ RT_HASH_DATA_ITEM_COPY_FNC* CopyFnc;
	/*   c */ __builtin_va_list UserData;
};

struct _RT_HASH_CRC32_EXT {
	/*   0 */ RT_U4BYTE Size;
	/*   4 */ RT_HASH_DATA_ITEM_COPY_FNC* CopyFnc;
	/*   8 */ __builtin_va_list UserData;
};

struct _RT_HASH_ITERATOR_IFACE {
	/*   0 */ RT_HASH_ITERATOR_RELEASE_FNC* release;
	/*   4 */ RT_HASH_ITERATOR_NEXT_FNC* next;
	/*   8 */ RT_HASH_ITERATOR_PREV_FNC* prev;
	/*   c */ RT_HASH_ITERATOR_SEEK_FNC* seek;
	/*  10 */ RT_HASH_ITERATOR_GET_ITEM_FNC* get_item;
	/*  14 */ RT_HASH_ITERATOR_REMOVE_ITEM_FNC* remove_item;
};

typedef _RT_HASH_BUCKET RT_HASH_BUCKET;
typedef _RT_HASH_ITEM RT_HASH_ITEM;
typedef _RT_HASH_ITEM_POOL RT_HASH_ITEM_POOL;

struct _RT_HASH_TABLE_ {
	/*   0 */ RT_HASH_TABLE_IFACE Iface;
	/*  38 */ RT_U4BYTE Flags;
	/*  3c */ RT_U4BYTE TableSize;
	/*  40 */ RT_U4BYTE DataSize;
	/*  44 */ RT_U4BYTE KeySize;
	/*  48 */ RT_HASH_BUCKET* Buckets;
	/*  4c */ RT_HASH_HASH_FNC* HashFnc;
	/*  50 */ RT_HASH_EQUAL_FNC* EqualFnc;
	/*  54 */ RT_HASH_KEY_FNC* KeyFnc;
	/*  58 */ RT_U4BYTE DataItemCnt;
	/*  5c */ RT_HASH_ITEM* L1ItemCache;
	/*  60 */ RT_HASH_KEY Key;
	/*  64 */ RT_HASH_ITEM_POOL* ItemDataPool;
	/*  68 */ RT_HASH_TABLE* ParentTbl;
	/*  6c */ RT_HASH_TABLE* AttachedTbl;
};

struct _RT_HASH_BUCKET {
	/*   0 */ RT_U4BYTE ItemCnt;
	/*   4 */ RT_HASH_ITEM* Items;
};

struct _RT_HASH_ITEM {
	/*   0 */ __builtin_va_list Data;
	/*   4 */ RT_HASH_ITEM* Prev;
	/*   8 */ RT_HASH_ITEM* Next;
	/*   c */ RT_U4BYTE SortIndex;
};

struct _RT_HASH_ITERATOR_ {
	/*   0 */ RT_HASH_ITERATOR_IFACE Iface;
	/*  18 */ RT_HASH_TABLE* HashTable;
	/*  1c */ RT_HASH_ITERATOR_TYPE Type;
	/*  20 */ RT_U4BYTE BucketIdx;
	/*  24 */ RT_HASH_ITEM* Item;
	/*  28 */ RT_HASH_ITEM* TempNext;
	/*  2c */ RT_HASH_ITEM* TempPrev;
};

struct _RT_HASH_ITEM_POOL {
	/*   0 */ RT_U4BYTE ItemCnt;
	/*   4 */ RT_U4BYTE ItemSize;
	/*   8 */ RT_U4BYTE DataSize;
	/*   c */ RT_U4BYTE DataPoolSize;
	/*  10 */ RT_HASH_ITEM* Items;
	/*  14 */ RT_HASH_ITEM* ItemsNew;
	/*  18 */ RT_HASH_DESTROY_FNC* DestroyFnc;
};

// warning: multiple differing types with the same name, only one recovered
struct cipher_spec3 {
	/*   0 */ unsigned char a[2];
};

// warning: multiple differing types with the same name, only one recovered
union cypher_spec {
	/*   0 */ unsigned char a[3];
	struct spec3 {
		/*   0 */ unsigned char zerobyte;
		/*   1 */ cipher_spec3 cipher;
	} spec3;
};

// warning: multiple differing types with the same name, only one recovered
typedef enum   SSL_STATE;
// warning: multiple differing types with the same name, only one recovered
typedef enum   SSL_RESULT;
typedef SSL* HSSL;

// warning: multiple differing types with the same name, only one recovered
struct SSL_CALLBACK_PARAMS {
	/*   0 */ SSL_STATE eState;
	/*   4 */ unsigned int nUnixTime;
	/*   8 */ unsigned int nInXData;
	/*   c */ unsigned int nOutXData;
	/*  10 */ unsigned char* pNetInData;
	/*  14 */ unsigned int nNetInSize;
	/*  18 */ unsigned char* pAppInData;
	/*  1c */ unsigned int nAppInSize;
	/*  20 */ unsigned char* pNetOutData;
	/*  24 */ unsigned int nNetOutSize;
	/*  28 */ unsigned char* pAppOutData;
	/*  2c */ unsigned int nAppOutSize;
};

typedef /* function */ void** SSL_MALLOC;
typedef /* function */ void** SSL_FREE;
typedef /* function */ void** SSL_RANDOM;
typedef /* function */ void** SSL_CALLBACK;
typedef enum   SSL_CIPHER;

// warning: multiple differing types with the same name, only one recovered
struct CLIENT_HELLO {
	/*   0 */ unsigned char MSG_CLIENTHELLO;
	/*   1 */ unsigned char VER_MAJOR;
	/*   2 */ unsigned char VER_MINOR;
	/*   3 */ unsigned char cypher_spec_len[2];
	/*   5 */ unsigned char session_id_len[2];
	/*   7 */ unsigned char challenge_len[2];
	/*   9 */ cypher_spec specs[1];
	/*   c */ unsigned char challenge[16];
};

// warning: multiple differing types with the same name, only one recovered
struct SERVER_HELLO {
	/*   0 */ unsigned char MSG_SERVERHELLO;
	/*   1 */ unsigned char MSG_LEN[3];
	/*   4 */ unsigned char VER_MAJOR;
	/*   5 */ unsigned char VER_MINOR;
	/*   6 */ unsigned char serverRandom[32];
	/*  26 */ unsigned char session_id_len;
	/*  27 */ unsigned char session_id[32];
	/*  47 */ unsigned char pending_cypher_suite[2];
	/*  49 */ unsigned char msg_end;
};

// warning: multiple differing types with the same name, only one recovered
struct SSL {
	/*   0 */ SSL_STATE eState;
	/*   4 */ SSL_CIPHER ePendingCipher;
	/*   8 */ SSL_CIPHER eClientCipher;
	/*   c */ SSL_CIPHER eServerCipher;
	/*  10 */ unsigned int serverMsgOff;
	/*  14 */ unsigned int serverMsgLen;
	/*  18 */ unsigned int nNetOutSize;
	/*  1c */ unsigned int nAppOutSize;
	/*  20 */ unsigned int clientSequenceL;
	/*  24 */ unsigned int clientSequenceH;
	/*  28 */ unsigned int serverSequenceL;
	/*  2c */ unsigned int serverSequenceH;
	/*  30 */ SSL_RESULT eLastError;
	/*  34 */ TBSCERTIFICATE* pServerCert;
	/*  38 */ unsigned int nStartTime;
	/*  3c */ unsigned int nCurrentTime;
	/*  40 */ SSL_MALLOC pMallocFunc;
	/*  44 */ SSL_FREE pFreeFunc;
	/*  48 */ SSL_RANDOM pRandomFunc;
	/*  4c */ unsigned int nSessionIDLen;
	/*  50 */ unsigned char sessionID[32];
	/*  70 */ unsigned char clientRandom[32];
	/*  90 */ unsigned char serverRandom[32];
	/*  b0 */ unsigned char preMasterSecret[48];
	/*  e0 */ unsigned char masterSecret[48];
	/* 110 */ unsigned char clientMacSecret[16];
	/* 120 */ unsigned char serverMacSecret[16];
	/* 130 */ unsigned char clientWriteKey[16];
	/* 140 */ unsigned char serverWriteKey[16];
	/* 150 */ SHA_CTX sha1Hash;
	/* 1b0 */ MD5_CTX md5Hash;
	/* 210 */ RC4_CTX clientCipher;
	/* 312 */ RC4_CTX serverCipher;
	/* 414 */ unsigned int uiServerMessageSize;
	/* 418 */ unsigned int uiAppoutMessageSize;
	/* 41c */ unsigned char* serverMsg;
	/* 420 */ unsigned char* appoutMsg;
	/* 424 */ unsigned char netoutMsg[2048];
};

typedef enum   CERT_STATUS;
typedef /* function */ void** CERT_MALLOC;
typedef /* function */ void** CERT_FREE;
typedef enum   OID;

// warning: multiple differing types with the same name, only one recovered
struct OIDDATA {
	/*   0 */ OID oid;
	/*   4 */ unsigned int nDataSize;
	/*   8 */ unsigned char data[16];
};

struct ASN1_ITEM {
	/*   0 */ unsigned int nType;
	/*   4 */ unsigned int iClass;
	/*   8 */ unsigned int iForm;
	/*   c */ unsigned int iTag;
	/*  10 */ unsigned int nSize;
};

typedef struct ASN1_ITEM ASN1ITEM;

// warning: multiple differing types with the same name, only one recovered
struct X509NAME {
	/*   0 */ unsigned char md5digest[16];
	/*  10 */ char CommonName[64];
};

// warning: multiple differing types with the same name, only one recovered
struct DATETIME {
	/*   0 */ unsigned int second;
	/*   4 */ unsigned int day;
};

// warning: multiple differing types with the same name, only one recovered
struct TBSCERTIFICATE {
	/*   0 */ struct TBSCERTIFICATE* prev;
	/*   4 */ struct TBSCERTIFICATE* next;
	/*   8 */ struct TBSCERTIFICATE* pRootCert;
	/*   c */ CERT_FREE pFreeFunc;
	/*  10 */ unsigned int version;
	/*  14 */ unsigned int status;
	/*  18 */ unsigned int hashAlgorithm;
	/*  1c */ unsigned int serialLen;
	/*  20 */ unsigned int pubKeyLen;
	/*  24 */ unsigned int pubExp;
	/*  28 */ unsigned int receiveTime;
	/*  2c */ unsigned int validTime;
	/*  30 */ DATETIME enableTime;
	/*  38 */ DATETIME expireTime;
	/*  40 */ unsigned char serialNum[20];
	/*  54 */ unsigned char digest[20];
	/*  68 */ X509NAME name;
	/*  b8 */ X509NAME issuer;
	/* 108 */ unsigned char pubKey[256];
	/* 208 */ unsigned char signature[256];
};

/*   0 */ __int128_t;

/*   0 */ __uint128_t;

enum PluginEventEnum {
	cPluginEvent_UNSET = -1,
	cPluginEvent_XBUTTON = 0,
	cPluginEvent_TRIANGLEBUTTON = 1,
	cPluginEvent_SQUAREBUTTON = 2,
	cPluginEvent_CIRCLEBUTTON = 3,
	cPluginEvent_R1BUTTON = 4,
	cPluginEvent_R2BUTTON = 5,
	cPluginEvent_L1BUTTON = 6,
	cPluginEvent_L2BUTTON = 7,
	cPluginEvent_CURSOR_SELECT = 8,
	cPluginEvent_CURSOR_DESELECT = 9,
	cPluginEvent_TEXT_ENTERED = 10,
	cPluginEvent_NEW_PAGE = 11,
	cPluginEvent_REGISTER_JABBER_ROSTER = 12,
	cPluginEvent_REGISTER_JABBER_CHAT_WINDOW = 13,
	cPluginEvent_REGISTER_JABBER_INPUT_WINDOW = 14,
	cMaxPluginEvents = 15
};

enum PluginUpdateTypeEnum {
	cPluginUpdateType_DRAW_INPUT = 0,
	cPluginUpdateType_DRAW = 1,
	cPluginUpdateType_INPUT = 2,
	cPluginUpdateType_NOTSET = 3
};

typedef int SVBOOL;

enum eURLSource {
	eURLSourceNotSet = 0,
	eURLSourceConfig = 1,
	eURLSourcePersistent = 2,
	eURLSourcePassedIn = 3,
	eURLSourceMax = 2147483647
};

enum BrowserUpdateTypeEnum {
	cBrowserUpdateType_DRAW_INPUT = 0,
	cBrowserUpdateType_DRAW = 1,
	cBrowserUpdateType_INPUT = 2,
	cBrowserUpdateType_NO_INPUT_NO_DRAW = 3
};

struct TextFieldInfo {
	/*   0 */ int maxLenBytes;
	/*   4 */ int maxLenUTF8Chars;
	/*   8 */ char text[12288];
	/* 3008 */ unsigned int cursorPos;
	/* 300c */ SVBOOL isPassword;
};

struct DownloadThrobberInfo {
	/*   0 */ unsigned int tagid;
	/*   4 */ float x;
	/*   8 */ float y;
	/*   c */ float width;
	/*  10 */ float height;
	/*  14 */ char* tagClass;
};

struct CAllContextData_t {
	/*   0 */ CDrawContextBase* drawContext;
	/*   4 */ CInputContextBase* inputContext;
	/*   8 */ CMemoryContextBase* memoryContext;
	/*   c */ CAudioContextBase* audioContext;
	/*  10 */ CSystemContextBase* systemContext;
	/*  14 */ CPage* pMain;
};

struct SVLoginInfo {
	/*   0 */ char MediusUserName[32];
	/*  20 */ char MediusPassWord[32];
	/*  40 */ char ExternalIP[16];
	/*  50 */ int MediusAccountID;
};

struct SVServerInfo {
	/*   0 */ char serverName[257];
	/* 101 */ char firstPage[257];
	/* 204 */ int port;
};

enum SVTargetTypeEnum {
	TARGET_TYPE_NONE = 0,
	TARGET_TYPE_DNAS_CONSOLE_ID = 1,
	TARGET_TYPE_DNAS_DISK_ID = 2,
	TARGET_TYPE_PSP_HARDWARE_ID = 3,
	TARGET_TYPE_END = 4
};

struct SVTargetInfo {
	/*   0 */ enum SVTargetTypeEnum targetType;
	/*   4 */ char targetSpecialID[65];
	/*  48 */ unsigned int targetAppID;
};

// warning: multiple differing types with the same name, only one recovered
struct SVInitializeParams {
	/*   0 */ struct SVTargetInfo* targetInfo;
	/*   4 */ struct CAllContextData_t* mainContextData;
	/*   8 */ struct CAllContextData_t* altContextData;
	/*   c */ enum eURLSource eURL;
	/*  10 */ struct SVServerInfo* serverInfo;
	/*  14 */ SVPersistentData* a_pPersistentData;
	/*  18 */ char* headerVersion;
	/*  1c */ SVButtonMap* defaultButtonMap;
	/*  20 */ unsigned int downloadBufferSize;
	/*  24 */ int iShouldListenForAuthoringToolPort;
};

enum SVTournamentUpdateState {
	SV_TOURNAMENT_STATE_BEGIN = 0,
	SV_TOURNAMENT_STATE_DUMMY1 = 1,
	SV_TOURNAMENT_STATE_DUMMY2 = 2,
	SV_TOURNAMENT_STATE_DUMMY3 = 3,
	SV_TOURNAMENT_STATE_END = 4
};

// warning: multiple differing types with the same name, only one recovered
struct SVBrowser {
	static char* m_targetTypeStrings[4];
	/*   0 */ struct DownloadThrobberInfo m_downloadThrobberInfo;
	/*  18 */ SVBOOL m_bOkToNavigate;
	/*  1c */ SVBOOL m_bIsActive;
	/*  20 */ SVBOOL m_bLogout;
	/*  24 */ SVBOOL m_bShowVKB;
	/*  28 */ SVBOOL m_bIsXMPPActive;
	/*  2c */ struct SVTargetInfo m_targetInfo;
	/*  78 */ CDrawContextBase* m_pDrawContext;
	/*  7c */ CDrawContextBase* m_pVKBDrawContext;
	/*  80 */ CInputContextBase* m_pInputContext;
	/*  84 */ CMemoryContextBase* m_pMemoryContext;
	/*  88 */ CAudioContextBase* m_pAudioContext;
	/*  8c */ CSystemContextBase* m_pSystemContext;
	/*  90 */ CDrawContextBase* m_pAltDrawContext;
	/*  94 */ CInputContextBase* m_pAltInputContext;
	/*  98 */ CMemoryContextBase* m_pAltMemoryContext;
	/*  9c */ CAudioContextBase* m_pAltAudioContext;
	/*  a0 */ CSystemContextBase* m_pAltSystemContext;
	/*  a4 */ CPage* m_pMainPage;
	/*  a8 */ CPage* m_pPopupPage;
	/*  ac */ SVDownloadManager* m_pDownloadManager;
	/*  b0 */ struct TextFieldInfo m_textFieldInfo;
	/* 30c0 */ TextEditableTag* m_pCurTextEditableTag;
	/* 30c4 */ URIStore* m_pURIStore;
	/* 30c8 */ FileDownloadQueue* m_pFileDownloadQueue;
	/* 30cc */ SVBOOL m_bUseDownloadManger;
	/* 30d0 */ CPluginManager* m_pluginMgr;
	/* 30d4 */ SVBOOL m_createGameRequested;
	/* 30d8 */ SVChronograph* m_createGameTimer;
	/* 30dc */ struct SVLoginInfo m_loginInfo;
	/* 3130 */ JabberClient* m_xmppClient;
	/* 3134 */ int gTickCount;
	/* 3138 */ unsigned int m_printfSeverityFilter;
	/* 313c */ unsigned int m_printfCategoryFilter;
	static struct SVBrowser* s_instance;
};

enum InetErrorCode {
	INET_NO_ERROR = 0,
	OPEN_CONN_TIMEOUT = 1,
	GET_PAGE_TIMEOUT = 2,
	NO_NETWORK_ADAPTER = 3,
	UNABLE_TO_LOAD_IRX = 4,
	LIB_IRX_VERSION_CONFLICT = 5,
	RTC_FAILURE = 6,
	CONFIGURATION_LOAD_FAILURE = 7,
	CONFIGURATION_LOAD_FAILURE_NO_CARD = 8,
	PAGE_NONEXISTENT = 9,
	EZNET_ERROR = 10,
	MAGIC_ERROR = 11,
	NO_CONFIGS_ERROR = 12,
	UNFORMATTED_CARD = 13,
	LOGOUT_REQUEST = 14,
	CONNECTION_FAILED = 15,
	CONFIGURATION_LOAD_NO_HW = 16,
	CABLE_PULLED_OUT = 17,
	DNS_REQUEST_FAILURE = 18,
	FIREWALL_PROBLEM = 19,
	NETWORK_SEND_ERROR = 20,
	NETWORK_READ_ERROR = 21,
	UNKNOWN_NETWORK_ERROR = 22,
	NETWORK_TIMEOUT = 23,
	INIT_NO_CONN_ERROR = 24,
	SVO_CREATE_GAME_FAILED = 25,
	SVO_CREATE_SOCKET_FAILED = 26,
	SVO_CONNECT_SOCKET_FAILED = 27,
	SVO_SOCKET_ERROR = 28,
	SVO_BAD_RESPONSE_FROM_SERVER = 29,
	SVO_DOWNLOAD_MGR_ERROR = 30,
	SVO_DOWNLOAD_MGR_NOT_INITIALIZED = 31,
	SCHEMA_NOT_SUPPORTED = 32,
	RTCOMMSOCK_SEND_BUFFER_FULL = 33,
	OUT_OF_MEMORY = 34,
	SVO_HEADER_LIB_VERSION_MISMATCH = 35,
	DNS_RESPONSE_FAILURE = 36,
	HTTPS_CERTIFICATE_UNVERIFIED = 37,
	NON_BLOCKING_CONNECT_FAILED = 38,
	PAD_VALUE = -1
};

struct CError {
	static char errorStr[512];
	static int gRTimeErrorCode;
	static int m_errorCode;
};

enum SV_MSG_SEVERITY_LEVEL {
	SV_SEV_DEBUG = 1,
	SV_SEV_INFO = 2,
	SV_SEV_ANOMALY = 4,
	SV_SEV_ERROR = 8,
	SV_SEV_CRITICAL = 16,
	SV_SEV_NONE = 0,
	SV_SEV_ALL = 255
};

enum SV_MSG_CATEGORY {
	SV_CAT_UNCLASSIFIED = 1,
	SV_CAT_PLUGIN = 2,
	SV_CAT_COMM = 4,
	SV_CAT_CPAGE = 8,
	SV_CAT_HTTP = 16,
	SV_CAT_HTTPS = 32,
	SV_CAT_ENCRYPT = 64,
	SV_CAT_STARTUP = 128,
	SV_CAT_NONE = 0,
	SV_CAT_ALL = 65535
};

enum MemCardFile {
	SV_NULL_MEMCARD_ID = 0,
	SV_STATS_FILE = 1,
	SV_MEM_CARD_FILE_ENUM_PAD_VALUE = -1
};

enum MemCardReadReturnCode {
	SV_FILE_READ_OK = 0,
	SV_FILE_NOT_FOUND = 1,
	SV_MEM_CARD_READ_RETURN_CODE_PAD_VALUE = -1
};

struct CMemWatch {
	/*   0 */ char knownID[4];
};

struct CMemChunk {
	/*   0 */ int FreeCnt;
	/*   4 */ __builtin_va_list memPtr;
	/*   8 */ int size;
	/*   c */ char idStr[32];
	/*  2c */ int alignSize;
	/*  30 */ int id;
	static int id_count;
};

typedef /* function */ void** MemCardReadCallback;

enum CURI_SOCKET {
	CURI_SOCKET_UNSET = 0,
	CURI_SOCKET_REGULAR = 1,
	CURI_SOCKET_SYNCHRONOUS = 2,
	CURI_SOCKET_LAST = 3,
	MAX_CURI_SOCKET = 2147483647
};

enum CURIContentType {
	SV_CURI_CONTENT_NOTSET = 0,
	SV_CURI_CONTENT_SVML = 1,
	SV_CURI_CONTENT_XML = 2,
	SV_CURI_CONTENT_HTML = 3,
	SV_CURI_CONTENT_BINARY_SMALL = 4,
	SV_CURI_CONTENT_IMAGE = 5,
	SV_CURI_CONTENT_BINARY = 6,
	SV_CURI_CONTENT_UNKNOWN = 7,
	SV_CURI_CONTENT_LAST = 8,
	SV_CURI_CONTENT_MAX = -1
};

struct DownloadBuffer {
	/*   0 */ char* data;
	/*   4 */ unsigned int length;
	/*   8 */ __builtin_va_list context;
};

// warning: multiple differing types with the same name, only one recovered
struct URIRequest {
	/*   0 */ char* scheme;
	/*   4 */ char* host;
	/*   8 */ int port;
	/*   c */ char* filePath;
	/*  10 */ CQueryParamList* params;
	/*  14 */ int methodType;
	/*  18 */ char* httpCommand;
	/*  1c */ __builtin_va_list context;
};

struct sProviderEntry {
	/*   0 */ IURISchemeProvider* provider;
	/*   4 */ char* scheme;
};

struct CURISchemeMgr {
	/*   0 */ struct sProviderEntry m_providers[8];
};

enum BrowserLoginResultEnum {
	SV_LOGIN_SUCCESS = 0,
	SV_LOGIN_FAILED = 1,
	SV_LOGIN_STATUS_END = 2
};

enum BrowserJoinGameResultEnum {
	SV_GAME_JOIN_SUCCESS = 0,
	SV_GAME_JOIN_FAILED = 1,
	SV_GAME_JOIN_STATUS_END = 2
};

enum BrowserCreateGameResultEnum {
	SV_GAME_CREATE_SUCCESS = 0,
	SV_GAME_CREATE_FAILED = 1,
	SV_GAME_NAME_ALREADY_EXISTS = 2,
	SV_GAME_PLAYER_INVALID = 3,
	SV_GAME_PLAYER_NOT_CREATED = 4,
	SV_GAME_ATTR_INVALID = 5,
	SV_GAME_ATTR_NOT_CREATED = 6,
	SV_GAME_FINISH_SUCCESS = 7,
	SV_GAME_FINISH_FAILED = 8,
	SV_GAME_DOESNT_EXIST = 9,
	SV_GAME_PLAYER_DOESNT_EXIST = 10,
	SV_NOT_VALID_TIMEFRAME = 11,
	SV_POST_STATS_ALREADY_EXIST = 12,
	SV_GAME_MODE_INVALID = 13,
	SV_RETURN_GAME_STATE_INVALID = 14,
	SV_GAME_ID_INVALID = 15,
	SV_HOST_PLAYER_LIST_INVALID = 16,
	SV_REMOTE_PLAYER_LIST_INVALID = 17,
	SV_TIME_PER_DIVISION_INVALID = 18,
	SV_NUM_DIVISIONS_INVALID = 19,
	SV_SCERT_GAME_ID_INVALID = 20,
	SV_GAME_NAME_INVALID = 21,
	SV_NOT_YET_HEARD_FROM_SERVER = 22,
	SV_GAME_CREATE_STATUS_END = 23
};

enum BrowserCreateGameModeEnum {
	SV_CREATE_GAME_MODE_1 = 1,
	SV_CREATE_GAME_MODE_2 = 2,
	SV_CREATE_GAME_MODE_3 = 3,
	SV_CREATE_GAME_MODE_4 = 4,
	SV_CREATE_GAME_MODE_5 = 5,
	SV_CREATE_GAME_MODE_6 = 6
};

struct CTagInfo {
	/*   0 */ char* tagName;
	/*   4 */ char* tagTypeName;
	/*   8 */ char* tagClass;
	/*   c */ unsigned int tagID;
	/*  10 */ SVTag* tagPtr;
};

enum SVPartialFileDownloadInfo {
	SV_DOWNLOAD_COMPLETE = 0,
	SV_DOWNLOAD_PARTIAL = 1,
	SV_DOWNLOAD_FAILED = 2
};

struct CFileDownloadInfo {
	/*   0 */ char* name;
	/*   4 */ char* fileID;
	/*   8 */ /* error: null type */ void** pData;
	/*   c */ int dataLen;
	/*  10 */ enum SVPartialFileDownloadInfo partialDownloadInfo;
	/*  14 */ int entireDataLen;
	/*  18 */ int curTotalDataLen;
};

struct SVChronograph {
	/*   0 */ int start;
	/*   4 */ int stop;
	/*   8 */ int lastlap;
	/*   c */ CSystemContextBase* m_pSystemContext;
};

struct CQueryParam {
	/*   0 */ char* key;
	/*   4 */ char* value;
};

struct CQueryParamList {
	/*   0 */ struct CQueryParam m_params[128];
	/* 400 */ int m_iIndex;
};

enum HTTP_SOCKET {
	HTTP_SOCKET_UNSET = 0,
	HTTP_SOCKET_REGULAR = 1,
	HTTP_SOCKET_SYNCHRONOUS = 2,
	HTTP_SOCKET_LAST = 3,
	MAX_HTTP_SOCKET = 2147483647
};

enum HTTP_STATES {
	STATE_HTTP_NOTSET = 0,
	STATE_HTTP_IDLE_ON_ENTER = 1,
	STATE_HTTP_IDLE_ON_UPDATE = 2,
	STATE_HTTP_GET_HOST_BY_NAME_ON_ENTER = 3,
	STATE_HTTP_GET_HOST_BY_NAME_ON_UPDATE = 4,
	STATE_HTTP_CONNECT_WAIT_ON_ENTER = 5,
	STATE_HTTP_CONNECT_WAIT_ON_UPDATE = 6,
	STATE_HTTP_SECURE_CONNECTING_ON_ENTER = 7,
	STATE_HTTP_SECURE_CONNECTING_ON_UPDATE1 = 8,
	STATE_HTTP_SECURE_CONNECTING_ON_UPDATE2 = 9,
	STATE_HTTP_SEND_ON_ENTER = 10,
	STATE_HTTP_SEND_ON_UPDATE = 11,
	STATE_HTTP_RECV_ON_ENTER = 12,
	STATE_HTTP_RECV_ON_UPDATE = 13,
	MAX_STATE_HTTP_SECURE = 2147483647
};

enum sockErr_t {
	SOCK_OK = 0,
	SOCK_UNKNOWN_ERROR = 1,
	SOCK_UNINITIALIZED = 2,
	SOCK_BAD_ARGUMENTS = 3,
	SOCK_DNS_ERROR = 4,
	SOCK_ALREADY_OPEN = 5
};

typedef /* function */ void** SSL_INITIALIZE;
typedef /* function */ void** SSL_ADDROOTCERTIFICATE;
typedef /* function */ void** SSL_ADDCRL;
typedef /* function */ void** SSL_CREATE;
typedef /* function */ void** SSL_DESTROY;
typedef /* function */ void** SSL_CLEANUP;

struct HTTPS_INTERFACE {
	/*   0 */ SSL_INITIALIZE initialize;
	/*   4 */ SSL_ADDROOTCERTIFICATE addrootcert;
	/*   8 */ SSL_ADDCRL addcrl;
	/*   c */ SSL_CREATE create;
	/*  10 */ SSL_DESTROY destroy;
	/*  14 */ SSL_CALLBACK callback;
	/*  18 */ SSL_CLEANUP cleanup;
};

struct HttpSecure : /* 0 */ Http {
	static struct RT_TIME_STAMP m_rtTimeStamp;
	static RT_U4BYTE m_secondsSinceEpoch;
	/* 8ac4 */ HSSL m_pSSLEngine;
	/* 8ac8 */ enum SSL_STATE m_eState;
	/* 8acc */ struct SSL_CALLBACK_PARAMS m_stDownload;
	/* 8afc */ RT_U1BYTE m_u1SendBuffer[4096];
	/* 9afc */ RT_U4BYTE m_u4SendBufferIndex;
};

typedef ikstack_struct ikstack;
typedef /* function */ void** malloc_func;
typedef /* function */ void** free_func;

enum ikstype {
	IKS_NONE = 0,
	IKS_TAG = 1,
	IKS_ATTRIBUTE = 2,
	IKS_CDATA = 3
};

typedef iks_struct iks;

enum ikserror {
	IKS_OK = 0,
	IKS_NOMEM = 1,
	IKS_BADXML = 2,
	IKS_HOOK = 3
};

enum ikstagtype {
	IKS_OPEN = 0,
	IKS_CLOSE = 1,
	IKS_SINGLE = 2
};

typedef /* function */ void* iksTagHook;
typedef /* function */ void* iksCDataHook;
typedef /* function */ void* iksDeleteHook;
typedef iksparser_struct iksparser;

enum iksfileerror {
	IKS_FILE_NOFILE = 4,
	IKS_FILE_NOACCESS = 5,
	IKS_FILE_RWERR = 6
};

enum iksneterror {
	IKS_NET_NODNS = 4,
	IKS_NET_NOSOCK = 5,
	IKS_NET_NOCONN = 6,
	IKS_NET_RWERR = 7,
	IKS_NET_NOTLS = 8
};

enum iksnodetype {
	IKS_NODE_START = 0,
	IKS_NODE_NORMAL = 1,
	IKS_NODE_ERROR = 2,
	IKS_NODE_STOP = 3
};

typedef /* function */ void* iksStreamHook;
typedef /* function */ void* iksLogHook;

struct iksid_struct {
	/*   0 */ char* user;
	/*   4 */ char* server;
	/*   8 */ char* resource;
	/*   c */ char* partial;
	/*  10 */ char* full;
};

typedef struct iksid_struct iksid;

enum ikspaktype {
	IKS_PAK_NONE = 0,
	IKS_PAK_MESSAGE = 1,
	IKS_PAK_PRESENCE = 2,
	IKS_PAK_IQ = 3,
	IKS_PAK_S10N = 4
};

enum iksubtype {
	IKS_TYPE_NONE = 0,
	IKS_TYPE_ERROR = 1,
	IKS_TYPE_CHAT = 2,
	IKS_TYPE_GROUPCHAT = 3,
	IKS_TYPE_HEADLINE = 4,
	IKS_TYPE_GET = 5,
	IKS_TYPE_SET = 6,
	IKS_TYPE_RESULT = 7,
	IKS_TYPE_SUBSCRIBE = 8,
	IKS_TYPE_SUBSCRIBED = 9,
	IKS_TYPE_UNSUBSCRIBE = 10,
	IKS_TYPE_UNSUBSCRIBED = 11,
	IKS_TYPE_PROBE = 12,
	IKS_TYPE_AVAILABLE = 13,
	IKS_TYPE_UNAVAILABLE = 14
};

enum ikshowtype {
	IKS_SHOW_UNAVAILABLE = 0,
	IKS_SHOW_AVAILABLE = 1,
	IKS_SHOW_CHAT = 2,
	IKS_SHOW_AWAY = 3,
	IKS_SHOW_XA = 4,
	IKS_SHOW_DND = 5
};

struct ikspak_struct {
	/*   0 */ iks* x;
	/*   4 */ iksid* from;
	/*   8 */ iks* query;
	/*   c */ char* ns;
	/*  10 */ char* id;
	/*  14 */ enum ikspaktype type;
	/*  18 */ enum iksubtype subtype;
	/*  1c */ enum ikshowtype show;
};

typedef struct ikspak_struct ikspak;

enum iksfilterret {
	IKS_FILTER_PASS = 0,
	IKS_FILTER_EAT = 1
};

typedef /* function */ void* iksFilterHook;
typedef iksfilter_struct iksfilter;
typedef iksrule_struct iksrule;
typedef iksha_struct iksha;

struct CCookieJar {
	static struct CCookieJar* s_instance;
	/*   0 */ char m_cookies[127][16];
	/* 7f0 */ CMemoryContextBase* m_memory;
};

struct SVTagModuleList {
	/*   0 */ SVTagModule* m_modules[128];
	static struct SVTagModuleList* s_instance;
	/* 200 */ int m_nextTagUID;
};

struct CNavInfo {
	/*   0 */ char* up;
	/*   4 */ char* down;
	/*   8 */ char* left;
	/*   c */ char* right;
};

enum scanTagActionType {
	ST_NO_ACTION_SET = 0,
	ST_ACTION_DL_PRE = 1,
	ST_ACTION_DL_POST = 2,
	ST_ACTION_BST_DL_PAGE = 3,
	ST_ACTION_MAX = -1
};

struct CScanTagAction {
	/*   0 */ enum scanTagActionType type;
	/*   4 */ __builtin_va_list ptr;
};

struct CTagModuleActions {
	/*   0 */ struct CScanTagAction action[2];
};

struct PageHistory {
	/*   0 */ char m_history[257][32];
	/* 2020 */ int m_next_index;
};

enum GraphicZval {
	SV_BROWSER_MAIN_ZVAL_FLOOR = 100000,
	SV_BROWSER_MAIN_ZVAL_CEILING = 199999,
	SV_BROWSER_POPUP_ZVAL_FLOOR = 200000,
	SV_BROWSER_POPUP_ZVAL_CEILING = 299999,
	SV_MAX_BROWSER_ZVAL = -1
};

enum GraphicEffectStyle {
	SV_GFX_EFFECT_NO_EFFECT = 0,
	SV_GFX_EFFECT_PULSING = 1,
	SV_GFX_EFFECT_SLOW_ANIMATE = 2,
	SV_GFX_EFFECT_MEDIUM_ANIMATE = 3,
	SV_GFX_EFFECT_FAST_ANIMATE = 4,
	SV_GFX_EFFECT_FADE_IN = 5,
	SV_MAX_GFX_EFFECT = -1
};

enum Align {
	SV_ALIGN_LEFT = 0,
	SV_ALIGN_CENTER = 1,
	SV_ALIGN_RIGHT = 2,
	SV_MAX_ALIGN = -1
};

enum TickerType {
	SV_TICKER_TYPE_START = 0,
	SV_TICKER_SCROLL = 0,
	SV_TICKER_FADE = 1,
	SV_TICKER_TYPE_END = 2,
	SV_MAX_TICKER = -1
};

enum TransitionState {
	SV_TRANSITIONING = 0,
	SV_TRANSITION_DONE = 1,
	SV_MAX_TRANSITION = -1
};

typedef unsigned int svo_listbox_handle;

enum FormMethodType {
	methodType_NORMAL = 0,
	methodType_LOGIN = 1
};

struct HTTPEntity {
	/*   0 */ char* str;
	/*   4 */ char val;
};

struct SVPath {
	/*   0 */ char* m_scheme;
	/*   4 */ char* m_server;
	/*   8 */ short unsigned int& m_port;
	/*   c */ char* m_path;
	/*  10 */ unsigned int m_pathMaxLength;
};

struct CHttpUtils {
	static int gTimeoutFrameDuration;
	static char* gInvalidChars;
	static struct HTTPEntity gEntityMap[0];
};

typedef /* function */ void** DownloadCallback;

enum tBrowserState {
	BST_ERROR = -1,
	BST_IDLE = 0,
	BST_DL_PAGE = 1,
	BST_ANI_OUT = 2,
	BST_ANI_IN = 3,
	BST_SUBMIT = 4,
	BST_SUBMIT_FAIL = 5,
	BST_DL_OBJ_WHILE_ANI_IN = 6,
	BST_ANI_OUT_CHECK = 7,
	BST_DL_OBJ_THEN_ANI_IN = 8,
	BST_DL_OBJ_THEN_ANI_OUT = 9,
	BST_DL_OBJ = 10,
	BST_CREATE_PAGE = 11,
	BST_SHUTTING_DOWN = 12,
	BST_WAITING_TO_FREE_DL_BUFFER = 13
};

enum tLinkOption {
	BLO_START = 0,
	BLO_NORMAL = 0,
	BLO_OPEN_STATIC_PAGE = 1,
	BLO_OPEN_POPUP = 2,
	BLO_OPEN_STATIC_POPUP = 3,
	BLO_CLOSE_POPUP = 4,
	BLO_CLOSE_POPUP_REFRESH_MAIN_PAGE = 5,
	BLO_CLOSE_POPUP_LINK_MAIN_PAGE = 6,
	BLO_CLIENT_REDIRECT = 7,
	BLO_SERVER_REDIRECT = 8,
	BLO_END = 9
};

enum CPAGE_BINARY_DOWNLOAD_QUEUE {
	CPAGE_BINARY_DOWNLOAD_QUEUE_NOT_SET = 0,
	CPAGE_BINARY_DOWNLOAD_QUEUE_FIRST = 1,
	CPAGE_BINARY_DOWNLOAD_QUEUE_PRE_OBJECT_CREATION = 1,
	CPAGE_BINARY_DOWNLOAD_QUEUE_POST_OBJECT_CREATION = 2,
	CPAGE_BINARY_DOWNLOAD_QUEUE_LAST = 3,
	MAX_CPAGE_BINARY_DOWNLOAD_QUEUE = 2147483647
};

enum CPAGE_TYPE_ID {
	CPAGE_TYPE_NOTSET = 0,
	CPAGE_TYPE_MAIN = 1,
	CPAGE_TYPE_POPUP = 2,
	MAX_CPAGE_TYPE = 2147483647
};

enum CPAGE_REQUEST {
	CPAGE_REQUEST_SEND_PAGE = 0,
	CPAGE_REQUEST_QUEUE_BINARY = 1,
	CPAGE_REQUEST_SEND_BINARY = 2,
	MAX_CPAGE_REQUEST = 2147483647
};

struct SVDisplayBuffer {
	/*   0 */ iks_struct* svml;
	/*   4 */ iksparser_struct* parser;
	/*   8 */ SVTag* tagList[256];
};

struct StaticArray<DownloadBinary,0,10> {
	/*   0 */ DownloadBinary m_Data[11];
	/* 1a78 */ int m_iElements;
	/* 1a7c */ char m_pcBitArray[32];
};

struct StaticArray<DownloadBinary,0,1> {
	/*   0 */ DownloadBinary m_Data[2];
	/* 4d0 */ int m_iElements;
	/* 4d4 */ char m_pcBitArray[32];
};

// warning: multiple differing types with the same name, only one recovered
struct CPage {
	/*   0 */ struct StaticArray<DownloadBinary,0,10> PreTransitionDownloadBinaryArray;
	/* 1a9c */ struct StaticArray<DownloadBinary,0,10> PostTransitionDownloadBinaryArray;
	/* 3538 */ struct StaticArray<DownloadBinary,0,1> InTransitDownloadBinaryArray;
	/* 3a2c */ SVBOOL m_bIsPopup;
	/* 3a30 */ SVBOOL m_bIsActive;
	/* 3a34 */ iks_struct* m_XML;
	/* 3a38 */ iksparser_struct* m_XMLparser;
	/* 3a3c */ int m_lastHttpStatus;
	/* 3a40 */ enum CURIContentType m_lastCURIContentType;
	static struct CAllContextData_t m_contextData;
	/* 3a44 */ char m_scheme[16];
	/* 3a54 */ short unsigned int m_port;
	/* 3a56 */ char m_serverName[128];
	/* 3ad8 */ struct PageHistory m_history;
	/* 5afc */ struct SVChronograph m_pageRefreshTimer;
	/* 5b0c */ int m_pageRefreshSeconds;
	/* 5b10 */ enum tBrowserState m_state;
	/* 5b14 */ __builtin_va_list m_callbackData;
	/* 5b18 */ TextEditableTag* m_defTextEntryTag;
	/* 5b1c */ TextEditableTag* m_defTextScrollTag;
	/* 5b20 */ IURISchemeProvider* m_pRequestProvider;
	/* 5b24 */ PageRequestListener m_requestListener;
	/* 5b48 */ struct SVDisplayBuffer m_displayBuffers[2];
	/* 6358 */ struct SVDisplayBuffer* m_pFrontDisplayBuffer;
	/* 635c */ struct SVDisplayBuffer* m_pBackDisplayBuffer;
	/* 6360 */ DownloadCallback m_pfSVMLPreTagCreateScanCB;
	/* 6364 */ DownloadCallback m_pfXMLScanCB;
	/* 6368 */ DownloadCallback m_pfSVMLTagCreateCB;
	/* 636c */ DownloadCallback m_pfBinaryDownloadCB;
	/* 6370 */ char* m_pCURIContent;
	/* 6374 */ int m_iCURIContentLength;
	/* 6378 */ SVBOOL m_bPreserveCurrentPage;
};

struct USBKBINFO_t {
	/*   0 */ int max_connect;
	/*   4 */ int now_connect;
	/*   8 */ u_char status[127];
};

struct USBKBDATA_t {
	/*   0 */ u_int led;
	/*   4 */ u_int mkey;
	/*   8 */ int len;
	/*   c */ u_short keycode[62];
};

enum PadAction {
	SV_ACTION_NAV_UP = 0,
	SV_ACTION_NAV_DOWN = 1,
	SV_ACTION_NAV_LEFT = 2,
	SV_ACTION_NAV_RIGHT = 3,
	SV_ACTION_SCROLL_UP = 4,
	SV_ACTION_SCROLL_DOWN = 5,
	SV_ACTION_SCROLL_LEFT = 6,
	SV_ACTION_SCROLL_RIGHT = 7,
	SV_ACTION_SELECT_UP = 8,
	SV_ACTION_SELECT_DOWN = 9,
	SV_ACTION_SELECT_LEFT = 10,
	SV_ACTION_SELECT_RIGHT = 11,
	SV_ACTION_SELECT_PREV_ITEM = 12,
	SV_ACTION_SELECT_NEXT_ITEM = 13,
	SV_ACTION_SELECT_PREV_GROUP = 14,
	SV_ACTION_SELECT_NEXT_GROUP = 15,
	SV_ACTION_ACTIVATE = 16,
	SV_ACTION_BACK = 17,
	SV_ACTION_VKB_ACTIVATE = 18,
	SV_ACTION_VKB_BACKSPACE = 19,
	SV_ACTION_VKB_CANCEL = 20,
	SV_ACTION_VKB_HIDE = 21,
	SV_ACTION_VKB_SHIFT = 22,
	SV_ACTION_VKB_MOVE_CURSOR_LEFT = 23,
	SV_ACTION_VKB_MOVE_CURSOR_RIGHT = 24,
	SV_ACTION_LEAVE_FOCUS_GROUP = 25,
	SV_ACTION_MAX = 26,
	SV_ACTION_PAD = -1
};

struct SVButtonMap {
	/*   0 */ unsigned int navUpButton;
	/*   4 */ unsigned int navDownButton;
	/*   8 */ unsigned int navLeftButton;
	/*   c */ unsigned int navRightButton;
	/*  10 */ unsigned int scrollUpButton;
	/*  14 */ unsigned int scrollDownButton;
	/*  18 */ unsigned int scrollLeftButton;
	/*  1c */ unsigned int scrollRightButton;
	/*  20 */ unsigned int selectUpButton;
	/*  24 */ unsigned int selectDownButton;
	/*  28 */ unsigned int selectLeftButton;
	/*  2c */ unsigned int selectRightButton;
	/*  30 */ unsigned int selectPrevItemButton;
	/*  34 */ unsigned int selectNextItemButton;
	/*  38 */ unsigned int selectPrevGroupButton;
	/*  3c */ unsigned int selectNextGroupButton;
	/*  40 */ unsigned int activateButton;
	/*  44 */ unsigned int backButton;
	/*  48 */ unsigned int vkbActivateButton;
	/*  4c */ unsigned int vkbBackspaceButton;
	/*  50 */ unsigned int vkbCancelButton;
	/*  54 */ unsigned int vkbHideButton;
	/*  58 */ unsigned int vkbShiftButton;
	/*  5c */ unsigned int vkbScrollLeftButton;
	/*  60 */ unsigned int vkbScrollRightButton;
	/*  64 */ unsigned int leaveFocusGroupButton;
};

struct SVPersistentData {
	/*   0 */ char dnsDottedQuad[256];
	/* 100 */ char hostname[128];
	/* 180 */ char scorePostURI[256];
	/* 280 */ char homeURI[256];
	/* 380 */ unsigned int port;
	/* 384 */ char szURIStore[4096];
	/* 1384 */ int SVOGameID;
	/* 1388 */ char cookieData[2032];
	/* 1b78 */ char szMD5Hash[33];
};

struct RadioElementGroup {
	/*   0 */ RadioInputTag* elements[64];
	/* 100 */ char name[64];
	/* 140 */ char value[64];
	/* 180 */ int numElementsInGroup;
};

struct URIEntry {
	/*   0 */ char* m_lookupStr;
	/*   4 */ char* m_valueStr;
};

struct URIStore {
	/*   0 */ struct URIEntry m_entries[64];
	/* 200 */ int m_next_URI_index;
};

typedef /* function */ void** pfCallOnXML;

enum DataTagType_t {
	DATA_TAG_TYPE_START = 0,
	DATA_TAG_TYPE_URI = 0,
	DATA_TAG_TYPE_DATA = 1,
	DATA_TAG_TYPE_FILE = 2,
	DATA_TAG_TYPE_END = 3
};

typedef enum DataTagType_t DataTagType;

struct __exception {
	/*   0 */ int type;
	/*   4 */ char* name;
	/*   8 */ double arg1;
	/*  10 */ double arg2;
	/*  18 */ double retval;
	/*  20 */ int err;
};

struct md5_context {
	/*   0 */ long unsigned int total[2];
	/*  10 */ long unsigned int state[4];
	/*  30 */ unsigned char buffer[64];
};

struct Http : /* 0 */ IURISchemeProvider {
	/*   4 */ enum HTTP_STATES m_HttpState;
	static int gTimeoutFrameDuration;
	/*   8 */ char m_scheme[16];
	/*  18 */ SVBOOL m_bConnectionOpen;
	/*  1c */ /* error: no body */ void* m_addr;
	/*  20 */ SVSock* m_sock;
	/*  24 */ int m_port;
	/*  28 */ int m_headerBytesReceived;
	/*  2c */ int m_bodyBytesReceived;
	/*  30 */ unsigned int m_contentLength;
	/*  34 */ char m_nextLocation[257];
	/* 138 */ CMemoryContextBase* m_memoryContextPtr;
	/* 13c */ CQueryParamList m_QueryParams;
	/* 540 */ SVChronograph m_timer;
	/* 550 */ char m_szFilePath[257];
	/* 654 */ int m_iMethodType;
	/* 658 */ char m_szHostname[64];
	/* 698 */ char m_headerBuf[32768];
	/* 8698 */ SVBOOL m_bDownloadingBody;
	/* 869c */ int m_status;
	/* 86a0 */ int m_timeoutFrameCounter;
	/* 86a4 */ char m_httpCommandStr[5];
	/* 86ac */ CQueryParamList m_savedServerParams;
	/* 8ab0 */ SVBOOL m_serverParamsTooLong;
	/* 8ab4 */ SVBOOL m_bNeedToPost302;
	/* 8ab8 */ enum HTTP_SOCKET m_eSocketType;
	/* 8abc */ /* error: no body */ void* m_pListener;
	/* 8ac0 */ __builtin_va_list m_pListenerContext;
	static /* error: no body */ void* s_inst;
};

struct CDrawContextBase {
	static unsigned int s_tagid;
	static unsigned int s_throbberCnt;
	/*   0 */ __vtbl_ptr_type* $vf170;
};

struct CSystemContextBase {
	/*   0 */ /* function */ void** m_errorCallback;
	/*   4 */ /* function */ void** m_createGameCallback;
	/*   8 */ char m_createGameModeStr[5];
	/*  10 */ __vtbl_ptr_type* $vf221;
};

enum AudioSound {
	SV_CHANGE_SEL_SND = 0,
	SV_SELECT_SND = 1,
	SV_SET_CHECKED_SND = 2,
	SV_SET_UNCHECKED_SND = 3,
	SV_BACK_SND = 4,
	SV_CHANGE_LIST_ITEM_SND = 5,
	SV_ERROR_SND = 6,
	SV_CUSTOM_SND = 7,
	SV_NUM_SOUNDS = 8
};

struct CAudioContextBase {
	/*   0 */ __vtbl_ptr_type* $vf43;
};

struct CInputContextBase {
	/*   0 */ unsigned char specialKeyCode;
	/*   4 */ SVBOOL m_bEnterHit;
	/*   8 */ unsigned int m_defaultButtons[26];
	/*  70 */ unsigned int m_actionButtons[26];
	/*  d8 */ __vtbl_ptr_type* $vf95;
};

struct CConfig {
	/*   0 */ char m_ip[64];
	/*  40 */ int m_port;
	/*  44 */ char m_firstPage[256];
	/* 144 */ SVBOOL m_bFileRead;
};

enum eState {
	STATE_ERROR = -1,
	STATE_IDLE = 0,
	STATE_DL_OBJ = 1,
	STATE_SHUTTING_DOWN = 2,
	STATE_WAITING_TO_FREE_DL_BUFFER = 3
};

struct DLBuffer {
	/*   0 */ unsigned int dataSizeBytes;
	/*   4 */ unsigned int bytesReceived;
	/*   8 */ char* pData;
	/*   c */ SVBOOL bWaitingForSystemOk;
	/*  10 */ SVBOOL bBeingUsedForDownload;
	/*  14 */ unsigned int startPos;
};

struct FileDownloadEntry {
	/*   0 */ char* m_lookupStr;
	/*   4 */ char* m_valueStr;
};

struct FileDownloadQueue {
	/*   0 */ struct FileDownloadEntry m_entries[5];
};

struct PluginMessage {
	/*   0 */ enum PluginEventEnum event;
	/*   4 */ SVTag* sender;
};

struct PluginExpectedMessage {
	/*   0 */ enum PluginEventEnum event;
	/*   4 */ char sender[32];
};

struct CPluginManager {
	/*   0 */ CPluginBase* m_pluginList[10];
	/*  28 */ int m_numPlugins;
	/*  2c */ SVBOOL m_popupRequests[10];
	/*  54 */ int m_curPopupRequest;
};

enum CG_DL_STATUS {
	CG_PARAM_REQUEST_NOT_SENT = 0,
	CG_PARAM_REQUEST_SENT = 1,
	CG_CREATE_REQUEST_NOT_SENT = 2,
	CG_CREATE_REQUEST_SENT = 3,
	CG_NOT_SET = 4
};

struct CMemoryContextBase {
	/*   0 */ int m_TotalBytes;
	/*   4 */ struct CMemChunk m_memChunks[640];
	/* 8204 */ struct CMemChunk bu_memChunk[640];
	/* 10404 */ int m_curMemChunk;
	/* 10408 */ int buCnt;
	/* 1040c */ int pageBeginHighWaterMark;
	/* 10410 */ int m_MaxAllocated;
	/* 10414 */ int m_AllocCounter;
	/* 10418 */ int m_FreeCounter;
	/* 1041c */ __vtbl_ptr_type* $vf167;
};

enum tSVNavDir {
	SV_UP = 0,
	SV_DOWN = 1,
	SV_LEFT = 2,
	SV_RIGHT = 3,
	SV_NOTSET = 4
};

struct TextTag : /* 0 */ SVTag {
	/*  b4 */ int m_fontSize;
	/*  b8 */ int m_align;
	/*  bc */ unsigned int m_textColor;
	/*  c0 */ float m_displayLength;
	/*  c4 */ char m_text[128];
	/* 144 */ char* m_link;
	/* 148 */ unsigned int m_linkOption;
};

struct TextTagModule : /* 0 */ SVTagModule {
	static /* error: no body */ void* s_instance;
};

struct SVTagModule {
	/*   0 */ __vtbl_ptr_type* $vf354;
};

struct SVTag {
	/*   0 */ iks_struct* m_xml;
	/*   4 */ unsigned int m_tagid;
	/*   8 */ SVBOOL m_bSelected;
	/*   c */ SVBOOL m_bIgnoreInput;
	/*  10 */ SVBOOL m_bSelectable;
	/*  14 */ SVBOOL m_bOptional;
	/*  18 */ float m_x;
	/*  1c */ float m_y;
	/*  20 */ float m_z;
	/*  24 */ float m_width;
	/*  28 */ float m_height;
	/*  2c */ unsigned int m_lineColor;
	/*  30 */ unsigned int m_fillColor;
	/*  34 */ char* m_name;
	/*  38 */ char m_tagTypeName[64];
	/*  78 */ char* m_toolTip;
	/*  7c */ char* m_toolTipTagName;
	/*  80 */ struct CAllContextData_t* m_contexts;
	/*  84 */ struct CNavInfo m_navInfo;
	/*  94 */ char* m_info;
	/*  98 */ SVBOOL m_isDefTextEntry;
	/*  9c */ SVBOOL m_isDefTextScroll;
	/*  a0 */ char* m_tagClass;
	/*  a4 */ SVBOOL m_bIsVisible;
	/*  a8 */ SVBOOL m_bNeverSelectable;
	/*  ac */ unsigned char m_ucType;
	/*  b0 */ __vtbl_ptr_type* $vf167;
};

enum tNavPositions {
	SV_NV_LEFT = 0,
	SV_NV_LEFT_CENTER = 1,
	SV_NV_CENTER = 2,
	SV_NV_RIGHT_CENTER = 3,
	SV_NV_RIGHT = 4,
	SV_NV_NUM_POSITIONS = 5
};

struct tPoint {
	/*   0 */ float x;
	/*   4 */ float y;
};

typedef struct tPoint tNavTarget;

enum RTCOMMSOCK_SYNC {
	RTCOMMSOCK_SYNC_UNSET = 0,
	RTCOMMSOCK_SYNC_REGULAR = 1,
	RTCOMMSOCK_SYNC_SYNCHRONOUS = 2,
	RTCOMMSOCK_SYNC_LAST = 3,
	MAX_RTCOMMSOCK_SYNC = 2147483647
};

struct SVO_RT_CIRC_BUF {
	/*   0 */ long unsigned int nStartPos;
	/*   8 */ long unsigned int nEndPos;
	/*  10 */ long unsigned int nSize;
	/*  18 */ long unsigned int nUsed;
	/*  20 */ long unsigned int* pBuf;
	/*  24 */ unsigned char* pScratchBuf;
};

struct SVO_RT_LINKADDRESS {
	/*   0 */ long unsigned int Addr[2];
};

struct Entry {
	/*   0 */ char name[128];
	/*  80 */ struct RT_LINKADDRESS rtIP;
	/*  88 */ int age;
};

struct DNSCache {
	/*   0 */ struct Entry m_entries[8];
};

struct RTCommSock : /* 0 */ /* error: no body */ void* {
	static SVBOOL m_bDNSLookupFinished;
	/*   c */ __builtin_va_list m_rtCommCID;
	/*  10 */ struct SVO_RT_CIRC_BUF m_OutBuffer;
	/*  38 */ char m_szHostnameBeingLookedUp[64];
	/*  78 */ SVBOOL m_bNonBlocking;
	static unsigned int guiRTCommSockSendBufferSize;
	/*  7c */ unsigned char* m_pScratchBuffer;
	/*  80 */ /* error: no body */ void* m_ReturnSVRTCommAddr;
	/*  98 */ enum RTCOMMSOCK_SYNC m_eSynchronous;
};

struct SVRTCommAddr : /* 0 */ /* error: no body */ void* {
	/*   8 */ struct SVO_RT_LINKADDRESS m_sin;
};

// warning: multiple differing types with the same name, only one recovered
struct SVSock {
	/*   0 */ enum sockErr_t m_errNo;
	/*   4 */ CMemoryContextBase* m_pMemoryContext;
	/*   8 */ __vtbl_ptr_type* $vf519;
};

struct SVAddr {
	/*   0 */ __vtbl_ptr_type* $vf523;
};

struct ButtonTag : /* 0 */ SVTag {
	/*  b4 */ int m_fontSize;
	/*  b8 */ int m_align;
	/*  bc */ float m_displayLength;
	/*  c0 */ char* m_link;
	/*  c4 */ SVBOOL m_drawBorder;
	/*  c8 */ unsigned int m_linkOption;
	/*  cc */ unsigned int m_textColor;
	/*  d0 */ unsigned int m_highlightFillColor;
	/*  d4 */ unsigned int m_highlightLineColor;
	/*  d8 */ unsigned int m_highlightTextColor;
	/*  dc */ char m_text[128];
};

struct ButtonTagModule : /* 0 */ SVTagModule {
	static /* error: no body */ void* s_instance;
};

struct RectangleTag : /* 0 */ SVTag {
	/*  b4 */ float m_zVal;
	/*  b8 */ int m_lineThickness;
	/*  bc */ int m_cornerRadius;
	/*  c0 */ unsigned int m_gradientColor[4];
};

struct LineTagModule : /* 0 */ SVTagModule {
	static /* error: no body */ void* s_instance;
};

struct SetVariableTag : /* 0 */ SVTag {
	/*  b4 */ int m_pageRefreshSeconds;
	/*  b8 */ char* m_myExternalIP;
};

struct SetVariableTagModule : /* 0 */ SVTagModule {
	static /* error: no body */ void* s_instance;
};

struct RectangleTagModule : /* 0 */ SVTagModule {
	static /* error: no body */ void* s_instance;
};

struct LineTag : /* 0 */ SVTag {
	/*  b4 */ float m_endX;
	/*  b8 */ float m_endY;
	/*  bc */ float m_thickness;
};

struct QuickLinkTag : /* 0 */ SVTag {
	/*  b4 */ int m_padLinkButton;
	/*  b8 */ char* m_link;
	/*  bc */ unsigned int m_linkOption;
};

struct QuickLinkTagModule : /* 0 */ SVTagModule {
	static /* error: no body */ void* s_instance;
};

struct SelectTag : /* 0 */ SVTag {
	/*  b4 */ int m_fontSize;
	/*  b8 */ int m_align;
	/*  bc */ float m_displayLength;
	/*  c0 */ char* m_text;
	/*  c4 */ int m_numOptions;
	/*  c8 */ int m_currOptionIdx;
	/*  cc */ iks_struct** m_options;
	/*  d0 */ char** m_values;
	/*  d4 */ SVBOOL m_enableGroupSelection;
	/*  d8 */ unsigned int m_textColor;
	/*  dc */ unsigned int m_highlightTextColor;
	/*  e0 */ unsigned int m_highlightLineColor;
	/*  e4 */ unsigned int m_highlightFillColor;
	/*  e8 */ SVBOOL m_bSubmitAsEncryped;
	/*  ec */ SVBOOL m_bRequiredForSubmit;
	/*  f0 */ /* error: no body */ void* m_parentForm;
};

struct SelectTagModule : /* 0 */ SVTagModule {
	static /* error: no body */ void* s_instance;
};

struct ImageTagModule : /* 0 */ SVTagModule {
	static /* error: no body */ void* LastImageTag;
	static /* error: no body */ void* s_instance;
};

struct ImageTag : /* 0 */ SVTag {
	/*  b4 */ int m_align;
	/*  b8 */ float m_displayLength;
	/*  bc */ char m_link[128];
	/* 13c */ unsigned int m_imageType;
	/* 140 */ int m_iID;
	/* 144 */ float m_fu0;
	/* 148 */ float m_fv0;
	/* 14c */ float m_fu1;
	/* 150 */ float m_fv1;
	/* 154 */ int Width;
	/* 158 */ int Height;
	/* 15c */ int PosX;
	/* 160 */ int PosY;
	/* 164 */ float u0;
	/* 168 */ float v0;
	/* 16c */ char* ImageBuf;
};

struct StaticImageTagModule : /* 0 */ SVTagModule {
	static /* error: no body */ void* s_instance;
};

struct StaticImageTag : /* 0 */ SVTag {
	/*  b4 */ char m_link[128];
	/* 134 */ char m_imageName[32];
	/* 154 */ float u0;
	/* 158 */ float v0;
	/* 15c */ int m_imageWidth;
	/* 160 */ int m_imageHeight;
	/* 164 */ int m_imageX;
	/* 168 */ int m_imageY;
	/* 16c */ int m_index;
};

struct LineInfo {
	/*   0 */ short int lineStartIndex;
	/*   2 */ short int lineEndIndex;
	/*   4 */ short unsigned int lineNumber;
	/*   8 */ unsigned int color;
};

struct TextAreaTag : /* 0 */ TextEditableTag {
	/*  b4 */ char* m_text;
	/*  b8 */ int m_maxTextSize;
	/*  bc */ int m_maxTextLines;
	/*  c0 */ struct USBKBDATA_t* m_pKBData;
	/*  c4 */ int m_numKeyboards;
	/*  c8 */ int m_scrollFrame;
	/*  cc */ int m_curParseOffset;
	/*  d0 */ int m_curParseLine;
	/*  d4 */ int m_curEditOffset;
	/*  d8 */ int m_textEndOffset;
	/*  dc */ int m_upArrowOffset;
	/*  e0 */ int m_downArrowOffset;
	/*  e4 */ int m_leftArrowOffset;
	/*  e8 */ int m_rightArrowOffset;
	/*  ec */ int m_numTotalLines;
	/*  f0 */ int m_minDisplayLine;
	/*  f4 */ int m_curLine;
	/*  f8 */ int m_textEndLine;
	/*  fc */ int m_numLinesInDisplay;
	/* 100 */ int m_maxNumViewableLines;
	/* 104 */ float m_cursorX;
	/* 108 */ float m_cursorY;
	/* 10c */ float m_overallLength;
	/* 110 */ float m_maxLineLength;
	/* 114 */ SVBOOL m_firstAppendToChat;
	/* 118 */ struct LineInfo* m_textLines;
	/* 11c */ SVBOOL m_canScrollUp;
	/* 120 */ SVBOOL m_canScrollDown;
	/* 124 */ SVBOOL m_blinkCursor;
	/* 128 */ SVBOOL m_drawCursor;
	/* 12c */ unsigned int m_textColor;
	/* 130 */ unsigned int m_highlightFillColor;
	/* 134 */ unsigned int m_highlightLineColor;
	/* 138 */ unsigned int m_highlightTextColor;
	/* 13c */ SVBOOL m_isEditable;
	/* 140 */ char* m_link;
	/* 144 */ int m_fontSize;
	/* 148 */ int m_node;
	/* 14c */ int m_obj;
	/* 150 */ int m_scrollBarNode;
	/* 154 */ float m_maxScrollBarNodeTranslate;
	/* 158 */ float m_scrollBarWidth;
	/* 15c */ float m_scrollBarHeight;
	/* 160 */ float m_scrollBarPercentage;
	/* 164 */ float m_lineSpacing;
	/* 168 */ float m_opacity;
	/* 16c */ float m_xAxisPadValue;
	/* 170 */ float m_yAxisPadValue;
	/* 174 */ float m_nx;
	/* 178 */ float m_ny;
	/* 17c */ /* error: no body */ void* m_parentForm;
	/* 180 */ int m_tmpCallsToGSW;
	/* 184 */ SVBOOL m_bSubmitAsEncryped;
	/* 188 */ SVBOOL m_bRequiredForSubmit;
	/* 18c */ SVBOOL m_bMultiColorTextArea;
	/* 190 */ SVBOOL m_bSelectedLastFrame;
};

struct TextEditableTag : /* 0 */ SVTag {
};

struct TextAreaTagModule : /* 0 */ SVTagModule {
	static /* error: no body */ void* s_instance;
};

struct TextInputTag : /* 0 */ TextEditableTag {
	/*  b4 */ /* error: no body */ void* m_parentForm;
	/*  b8 */ char m_text[512];
	/* 2b8 */ SVBOOL m_bEditable;
	/* 2bc */ int m_numKeyboards;
	/* 2c0 */ int m_curEditOffset;
	/* 2c4 */ int m_fontSize;
	/* 2c8 */ int m_node;
	/* 2cc */ int m_obj;
	/* 2d0 */ int m_upRightOffset;
	/* 2d4 */ int m_upLeftOffset;
	/* 2d8 */ int m_maxLengthUTF8Chars;
	/* 2dc */ int m_curLeftOffset;
	/* 2e0 */ int m_curRightOffset;
	/* 2e4 */ char m_keyboardInput[512];
	/* 4e4 */ float m_maxWrap;
	/* 4e8 */ float m_opacity;
	/* 4ec */ float m_nx;
	/* 4f0 */ float m_ny;
	/* 4f4 */ SVBOOL m_blinkCursor;
	/* 4f8 */ SVBOOL m_drawCursor;
	/* 4fc */ unsigned int m_textColor;
	/* 500 */ unsigned int m_highlightFillColor;
	/* 504 */ unsigned int m_highlightLineColor;
	/* 508 */ unsigned int m_highlightTextColor;
	/* 50c */ SVBOOL m_bSubmitAsEncryped;
	/* 510 */ SVBOOL m_bRequiredForSubmit;
};

struct TextInputTagModule : /* 0 */ SVTagModule {
	static /* error: no body */ void* s_instance;
};

enum eUTF8CharacterType {
	kTypeStartSingleByte = 0,
	kTypeStartTwoBytes = 1,
	kTypeStartThreeBytes = 2,
	kTypeStartFourBytes = 3,
	kTypeContinuationByte = 4,
	kTypeInvalid = 5
};

struct PasswordInputTag : /* 0 */ TextInputTag {
};

struct PasswordInputTagModule : /* 0 */ SVTagModule {
	static /* error: no body */ void* s_instance;
};

struct RadioInputTag : /* 0 */ SVTag {
	/*  b4 */ int m_fontSize;
	/*  b8 */ SVBOOL m_isChecked;
	/*  bc */ char m_text[100];
	/* 120 */ char m_value[100];
	/* 184 */ unsigned int m_textColor;
	/* 188 */ unsigned int m_highlightColor;
	/* 18c */ /* error: no body */ void* m_parentForm;
	/* 190 */ SVBOOL m_bSubmitAsEncryped;
	/* 194 */ SVBOOL m_bRequiredForSubmit;
};

struct RadioInputTagModule : /* 0 */ SVTagModule {
	static /* error: no body */ void* s_instance;
};

struct CheckboxInputTag : /* 0 */ SVTag {
	/*  b4 */ int m_fontSize;
	/*  b8 */ SVBOOL m_isChecked;
	/*  bc */ char m_text[100];
	/* 120 */ char m_value[100];
	/* 184 */ unsigned int m_textColor;
	/* 188 */ unsigned int m_highlightColor;
	/* 18c */ /* error: no body */ void* m_parentForm;
	/* 190 */ SVBOOL m_bSubmitAsEncryped;
};

struct CheckboxInputTagModule : /* 0 */ SVTagModule {
	static /* error: no body */ void* s_instance;
};

struct FormTag : /* 0 */ SVTag {
	/*  b4 */ int m_numRadioElementGroups;
	/*  b8 */ int m_numCheckboxElements;
	/*  bc */ int m_numTextElements;
	/*  c0 */ int m_numPasswordElements;
	/*  c4 */ int m_numHiddenElements;
	/*  c8 */ int m_numSelectElements;
	/*  cc */ int m_numTextAreaElements;
	/*  d0 */ char m_url[256];
	/* 1d0 */ char m_encType[256];
	/* 2d0 */ enum FormMethodType m_methodType;
	/* 2d4 */ int m_method;
	/* 2d8 */ SVBOOL m_bEncryptionErrorOccurred;
	/* 2dc */ SVBOOL m_bValidationSucceeded;
	/* 2e0 */ SVTag* m_tagThatFailedValidation;
	/* 2e4 */ struct RadioElementGroup m_radioElementGroups[64];
	/* 63e4 */ /* error: no body */ void* m_checkboxElements[64];
	/* 64e4 */ /* error: no body */ void* m_textElements[64];
	/* 65e4 */ /* error: no body */ void* m_passwordElements[64];
	/* 66e4 */ /* error: no body */ void* m_submitElement;
	/* 66e8 */ /* error: no body */ void* m_hiddenElements[64];
	/* 67e8 */ /* error: no body */ void* m_selectElements[64];
	/* 68e8 */ /* error: no body */ void* m_textAreaElements[64];
	/* 69e8 */ FormChildrenInfo_t* m_pChildrenInfoList;
};

struct FormTagModule : /* 0 */ SVTagModule {
	static /* error: no body */ void* s_instance;
	/*   4 */ SVTag** elementList;
};

struct SubmitInputTag : /* 0 */ SVTag {
	/*  b4 */ int m_fontSize;
	/*  b8 */ int m_align;
	/*  bc */ char m_value[128];
	/* 13c */ float m_displayLength;
	/* 140 */ unsigned int m_buttonType;
	/* 144 */ unsigned int m_textColor;
	/* 148 */ unsigned int m_highlightFillColor;
	/* 14c */ unsigned int m_highlightLineColor;
	/* 150 */ unsigned int m_highlightTextColor;
	/* 154 */ /* error: no body */ void* m_parentForm;
};

struct SubmitInputTagModule : /* 0 */ SVTagModule {
	static /* error: no body */ void* s_instance;
};

struct LogoutTag : /* 0 */ SVTag {
};

struct LogoutTagModule : /* 0 */ SVTagModule {
	static /* error: no body */ void* s_instance;
};

struct AddRowStruct {
	/*   0 */ int placeholder;
};

struct AddCellStruct {
	/*   0 */ char* cellText;
};

struct AddRowResultStruct {
	/*   0 */ unsigned int rowTagID;
	/*   4 */ int numOfCellTagIDs;
	/*   8 */ unsigned int* tagIDArray;
};

struct SVGridCell {
	/*   0 */ char* cell_text;
	/*   4 */ char* cell_link;
	/*   8 */ char* cell_tooltip;
	/*   c */ char* cellClass;
	/*  10 */ enum tLinkOption linkOption;
	/*  14 */ unsigned int cell_tagID;
};

struct SVGridColumn {
	/*   0 */ char* colName;
	/*   4 */ char* colHdrLink;
	/*   8 */ char* colTooltip;
	/*   c */ SVBOOL isSelectable;
	/*  10 */ float width;
	/*  14 */ float col_x;
	/*  18 */ enum tLinkOption linkOption;
	/*  1c */ int colAlign;
};

struct SVGridRow {
	/*   0 */ float height;
	/*   4 */ float row_y;
	/*   8 */ char* rowClass;
	/*   c */ unsigned int row_tagID;
};

struct SVMyRecordRow {
	/*   0 */ struct SVGridRow row;
	/*  10 */ struct SVGridCell* cells;
	/*  14 */ unsigned int textColor;
};

struct GridTag : /* 0 */ SVTag {
	/*  b4 */ int m_numVisColumns;
	/*  b8 */ int m_numTotalColumns;
	/*  bc */ int m_numVisRowsWithCells;
	/*  c0 */ int m_origNumVisRows;
	/*  c4 */ int m_numTotalRows;
	/*  c8 */ int m_currTopRow;
	/*  cc */ /* error: no body */ void* m_cells;
	/*  d0 */ struct SVGridColumn* m_columns;
	/*  d4 */ struct SVGridRow* m_rows;
	/*  d8 */ struct SVMyRecordRow* m_myRecordRow;
	/*  dc */ float m_defaultColWidth;
	/*  e0 */ float m_defaultRowHeight;
	/*  e4 */ int m_currCellRowNum;
	/*  e8 */ int m_currCellColNum;
	/*  ec */ int m_numLockedColumns;
	/*  f0 */ int* m_columnIndexes;
	/*  f4 */ int m_headerFontSize;
	/*  f8 */ float m_headerHeight;
	/*  fc */ SVBOOL m_headerSelected;
	/* 100 */ char* m_headerClass;
	/* 104 */ unsigned int m_header_tagID;
	/* 108 */ unsigned int m_headerTextColor;
	/* 10c */ unsigned int m_headerHighlightTextColor;
	/* 110 */ unsigned int m_headerFillColor;
	/* 114 */ unsigned int m_headerHighlightFillColor;
	/* 118 */ unsigned int m_headerLineColor;
	/* 11c */ unsigned int m_headerHighlightLineColor;
	/* 120 */ int m_defCellFontSize;
	/* 124 */ int m_defCellAlign;
	/* 128 */ unsigned int m_defCellTextColor;
	/* 12c */ unsigned int m_defCellLineColor;
	/* 130 */ unsigned int m_defCellFillColor;
	/* 134 */ unsigned int m_highlightCellTextColor;
	/* 138 */ unsigned int m_highlightCellLineColor;
	/* 13c */ unsigned int m_highlightCellFillColor;
	/* 140 */ int m_borderWidth;
	/* 144 */ int m_borderHeight;
	/* 148 */ unsigned int m_borderOutlineColor;
	/* 14c */ unsigned int m_borderFillColor;
	/* 150 */ char* m_borderClass;
	/* 154 */ unsigned int m_border_tagID;
	/* 158 */ unsigned int m_borderHighlightOutlineColor;
	/* 15c */ unsigned int m_borderHighlightFillColor;
	/* 160 */ float m_spaceBetweenLastRowAndMyRecord;
	/* 164 */ float m_vert_sb_width;
	/* 168 */ float m_horz_sb_height;
	/* 16c */ char* m_scrollbar_class;
	/* 170 */ SVBOOL m_bSideWrapAllowed;
	/* 174 */ SVBOOL m_bVerticalWrapAllowed;
	/* 178 */ SVBOOL m_bIsModalGrid;
	/* 17c */ SVBOOL m_bIsClickedIn;
	/* 180 */ struct SVChronograph* m_pTimer;
};

struct GridTagModule : /* 0 */ SVTagModule {
	static /* error: no body */ void* s_instance;
};

struct PopupTag : /* 0 */ SVTag {
};

struct PopupTagModule : /* 0 */ SVTagModule {
	static /* error: no body */ void* s_instance;
};

struct HiddenInputTag : /* 0 */ SVTag {
	/*  b4 */ char m_value[256];
	/* 1b4 */ /* error: no body */ void* m_parentForm;
	/* 1b8 */ SVBOOL m_bSubmitAsEncryped;
};

struct HiddenInputTagModule : /* 0 */ SVTagModule {
	static /* error: no body */ void* s_instance;
};

struct RedirectTag : /* 0 */ SVTag {
	/*  b4 */ char* m_link;
	/*  b8 */ SVBOOL m_alreadyRedirected;
};

struct RedirectTagModule : /* 0 */ SVTagModule {
	static /* error: no body */ void* s_instance;
};

struct DataTag : /* 0 */ SVTag {
	/*  b4 */ DataTagType m_dataTagType;
	/*  b8 */ SVBOOL m_bAllowNavigationDuringDownload;
};

struct DataTagModule : /* 0 */ SVTagModule {
	static /* error: no body */ void* s_instance;
};

struct CPluginBase {
	/*   0 */ struct PluginExpectedMessage m_expectedMessages[32];
	/* 480 */ struct PluginMessage m_messageQueue[32];
	/* 580 */ int m_headIndex;
	/* 584 */ int m_tailIndex;
	/* 588 */ int m_curEvent;
	/* 58c */ SVTag* m_curSender;
	/* 590 */ SVBOOL m_popupIsActive;
	/* 594 */ SVBOOL m_isVisible;
	/* 598 */ char m_popupURI[128];
	/* 618 */ CPluginManager* m_pluginMgr;
	/* 61c */ /* error: no body */ void* m_drawContext;
	/* 620 */ CInputContextBase* m_inputContext;
	/* 624 */ CMemoryContextBase* m_memoryContext;
	/* 628 */ CAudioContextBase* m_audioContext;
	/* 62c */ /* error: no body */ void* m_systemContext;
	/* 630 */ SVBrowser* m_pBrowser;
	/* 634 */ __vtbl_ptr_type* $vf168;
};

struct _ListBoxItem {
	/*   0 */ char* displayStr;
	/*   4 */ char* h_ref;
	/*   8 */ unsigned int linkOption;
	/*   c */ char* tagClass;
	/*  10 */ char* name;
	/*  14 */ char* info;
	/*  18 */ unsigned int tagid;
};

typedef struct _ListBoxItem ListBoxItem;

struct ListBoxTag : /* 0 */ SVTag {
	/*  b4 */ int m_fontSize;
	/*  b8 */ int m_align;
	/*  bc */ float m_displayLength;
	/*  c0 */ /* error: no body */ void* m_items[100];
	/* 250 */ int m_maxNumItems;
	/* 254 */ int m_maxVisibleItems;
	/* 258 */ int m_numItems;
	/* 25c */ int m_selectedIndex;
	/* 260 */ int m_topVisibleIndex;
	/* 264 */ int m_bPopulatedByPage;
	/* 268 */ unsigned int m_selectedItemColor;
	/* 26c */ unsigned int m_defaultItemColor;
	/* 270 */ float m_lineSpacing;
	/* 274 */ float m_buttonHeight;
	/* 278 */ float m_scrollBarPercentage;
	/* 27c */ SVChronograph* m_pTimer;
	/* 280 */ SVBOOL m_turnOffDraw;
	/* 284 */ SVBOOL m_selectFocusAreaMode;
};

struct ListBoxTagModule : /* 0 */ SVTagModule {
	static /* error: no body */ void* s_instance;
};

struct PageIDTagModule : /* 0 */ SVTagModule {
	static /* error: no body */ void* s_instance;
};

struct PageIDTag : /* 0 */ SVTag {
};

struct IURISchemeProvider {
	/*   0 */ __vtbl_ptr_type* $vf189;
};

struct DownloadBinary {
	/*   0 */ char szPath[257];
	/* 104 */ SVBOOL bRequested;
	/* 108 */ enum FormMethodType eMethod;
	/* 10c */ SVBOOL bDestroyWhenRequestSent;
	/* 110 */ int iID;
	/* 114 */ short unsigned int usWidth;
	/* 116 */ short unsigned int usHeight;
	/* 118 */ enum FormMethodType eMethodType;
	/* 11c */ DownloadCallback pDownloadCallback;
	/* 120 */ int m_iUserNameMaxLength;
	/* 124 */ char m_szActionStringParameter[256];
	/* 224 */ char m_szUserNameParameter[32];
	/* 244 */ char m_szAccountIDParameter[32];
	/* 264 */ __vtbl_ptr_type* $vf442;
};

struct LoginTagModule : /* 0 */ SVTagModule {
	static /* error: no body */ void* s_instance;
	/*   4 */ SVBOOL m_bHaveUnhandledLoginResponse;
};

struct ParseXML {
	/*   0 */ __vtbl_ptr_type* $vf200;
};

struct ParseSVMLAddObjects : /* 0 */ ParseXML {
};

struct ParseSVMLForDownloads : /* 0 */ ParseXML {
};

struct ParseXMLInfo : /* 0 */ ParseXML {
};

struct SVDownloadManager : /* 0 */ IRequestListener {
	/*   4 */ char m_fileName[32];
	/*  24 */ char m_scheme[16];
	/*  34 */ char m_serverName[128];
	/*  b4 */ short unsigned int m_port;
	/*  b8 */ Http m_http;
	/* 8b7c */ enum eState m_state;
	/* 8b80 */ SVBOOL m_bRequestInProgress;
	/* 8b84 */ int m_fileStatus;
	/* 8b88 */ unsigned int m_fileContentLength;
	/* 8b8c */ unsigned int m_fileBytesReceived;
	/* 8b90 */ struct DLBuffer m_buffers[2];
	/* 8bc0 */ CPage* m_page;
	/* 8bc4 */ SVChronograph m_timer;
	/* 8bd4 */ char m_fileID[257];
};

// warning: multiple differing types with the same name, only one recovered
struct IRequestListener {
	/*   0 */ __vtbl_ptr_type* $vf819;
};

struct CreateGameTagModule : /* 0 */ SVTagModule {
	static /* error: no body */ void* s_instance;
	/*   4 */ char m_createGameParamNames[257];
	/* 105 */ char m_createGameSubmitBaseURL[257];
	/* 208 */ char** m_createGameParamStrPtrs;
	/* 20c */ int m_createGameNumOfParams;
	/* 210 */ int m_SVOGameID;
};

struct GenericListBoxTag : /* 0 */ SVTag {
	/*  b4 */ unsigned int m_highlightFillColor;
	/*  b8 */ unsigned int m_highlightLineColor;
	/*  bc */ char* m_ListBoxClass;
	/*  c0 */ svo_listbox_handle* m_handles;
	/*  c4 */ int m_maxNumItems;
	/*  c8 */ int m_maxVisibleItems;
	/*  cc */ int m_numItems;
	/*  d0 */ int m_selectedIndex;
	/*  d4 */ int m_topVisibleIndex;
	/*  d8 */ SVChronograph* m_pTimer;
	/*  dc */ SVBOOL m_turnOffDraw;
	/*  e0 */ /* error: no body */ void* m_paEntryTagIDs;
};

struct GenericListBoxTagModule : /* 0 */ SVTagModule {
	static /* error: no body */ void* s_instance;
};

struct TickerTagModule : /* 0 */ SVTagModule {
	static /* error: no body */ void* s_instance;
};

struct TickerTag : /* 0 */ SVTag {
	/*  b4 */ int m_fontSize;
	/*  b8 */ int m_align;
	/*  bc */ float m_displayLength;
	/*  c0 */ char* m_text;
	/*  c4 */ unsigned int m_type;
};

typedef RT_U4BYTE RT_FILE_ID;
typedef RT_U4BYTE RT_FILE_OPTION;

enum RT_FILE_SEEK_OPTION {
	RT_FILE_SEEK_START = 0,
	RT_FILE_SEEK_CURRENT = 1,
	RT_FILE_SEEK_END = 2
};

struct BrowserInitTag : /* 0 */ SVTag {
};

struct BrowserInitTagModule : /* 0 */ SVTagModule {
	static /* error: no body */ void* s_instance;
};

struct PageRequestListener : /* 0 */ IRequestListener {
	/*   4 */ int m_completionStatus;
	/*   8 */ char* m_pBodyData;
	/*   c */ size_t m_bodyDataLength;
	/*  10 */ enum CURIContentType m_bodyContentType;
	/*  14 */ size_t m_bodyDataAmountReceived;
	/*  18 */ CMemoryContextBase* m_pMemoryContext;
	/*  1c */ unsigned int m_downloadBufferLength;
	/*  20 */ SVBOOL m_bFinished;
};

typedef /* function */ void** TypDefCalloc;
typedef /* function */ void** TypDefFree;
typedef /* function */ void** TypDefMemset;
typedef /* function */ void** TypDefMemcpy;
typedef /* function */ void** TypDefCos;
typedef /* function */ void** TypDefSin;
typedef unsigned char NELLYErr;
typedef long long unsigned int u128;
typedef /* struct */ void* sceDmaEnv;

struct tagNciCodecBlock {
	/*   0 */ long unsigned int dwNciChunkID;
	/*   8 */ long unsigned int dwCodecClassID;
	/*  10 */ long unsigned int dwCodecID;
	/*  18 */ unsigned char chEncOrDec;
	/*  1c */ void* hCodecMblk;
	/*  20 */ void* pQuanMemBlk;
	/*  24 */ void* pnemMemBlk;
	/*  28 */ void* pNciCodecIOBlock;
	/*  2c */ void* pScratchBlk;
	/*  30 */ void* pVU0MicroCodeStore;
	/*  34 */ void* pVU0MicroMemStore;
};

typedef struct tagNciCodecBlock NCI_CODEC_BLOCK;
typedef /* struct */ void* SUBFRAME_PARAM_SC;
typedef /* struct */ void* PARAM_SC;

struct tagDecode_mblk {
	/*   0 */ void* hHFRegenMblk;
	/*   4 */ void* m_pBasePtr;
	/*   8 */ void* m_pSprPtr;
	/*   c */ float* pMemoryBlock;
	/*  10 */ float* overlap;
	/*  14 */ float* pfEnv_1;
	/*  18 */ float* pfPhase_1;
	/*  1c */ float* pfMinPhase;
	/*  20 */ float* pfLogAmps;
	/*  24 */ float Pitch_1_mid;
	/*  28 */ float fTFactor;
	/*  2c */ float fPitchWarp;
	/*  30 */ float fPitchOffset;
	/*  34 */ float fSpectrumWarp;
	/*  38 */ short int wSpectrumOffset;
	/*  3a */ short int wSpectrumLedge;
	/*  3c */ float fRoboSquash;
	/*  40 */ float fPvScaleFactor;
	/*  44 */ float fGain;
	/*  48 */ float fActualWarp;
	/*  4c */ float fSynTimeOffset;
	/*  50 */ float fPhaseOffset;
	/*  54 */ int dwVoiceProp;
	/*  58 */ void* hVoiceProperties;
	/*  5c */ short int iNewFrame;
	/*  5e */ short int iSilenceInjectionMode;
	/*  60 */ short int sSilenceNoiseLevel;
	/*  64 */ int lSilenceNoiseSeed;
	/*  68 */ int lUVPhaseRandSeed;
	/*  6c */ SUBFRAME_PARAM_SC PrevSubParam;
};

typedef struct tagDecode_mblk DEC_MEM_BLK;

struct tagVoicePropertiesBlock {
	/*   0 */ float fGain;
	/*   4 */ float fPrediction[12];
	/*  34 */ float fReflection[12];
};

typedef struct tagVoicePropertiesBlock NCI_VOICE_PROPERTIES_BLOCK;
typedef /* struct */ void* C_BUFFER_TYPE;
typedef void* NEM_KEY;
typedef /* struct */ void* VFNT_VOICEFONT_BLOCK;
typedef /* struct */ void* ENC_MEM_BLK;
typedef /* struct */ void* VocalFry_mblk;
typedef /* struct */ void* ONSET_Mblk;
typedef float Uint32;
typedef /* union */ void* UnionFltLng;
typedef /* struct */ void* LD_PDA_MBlk;
typedef /* struct */ void* RS2StageVQ_MBlk;
typedef /* struct */ void* VQ2_MBlk;

struct tagSP_CIRC_BUF {
	/*   0 */ int iLength;
	/*   4 */ int iIndex;
	/*   8 */ float* pfData;
};

typedef struct tagSP_CIRC_BUF SP_CIRC_BUF;
typedef /* struct */ void* PRE_PROC_mblk;

struct tagNEM_AGC_VAD_BLK {
	/*   0 */ void* pCodecBlk;
	/*   4 */ void* pVadBlk;
	/*   8 */ void* pAgcBlk;
	/*   c */ float frameEng;
	/*  10 */ float pv;
	/*  14 */ short int wAGControl;
	/*  16 */ short int wTargetGain;
	/*  18 */ short unsigned int UserTrigLevel;
	/*  1a */ short unsigned int TrigMiliSecond;
	/*  1c */ short unsigned int voicing;
	/*  1e */ unsigned char wAgcSwitch;
};

typedef struct tagNEM_AGC_VAD_BLK NEM_AGC_VAD_BLK;
typedef /* struct */ void* NellyAGC_mblk;
typedef /* struct */ void* NellyVAD_mblk;
typedef /* struct */ void* HFRegenStruct;
typedef /* function */ void* COMPATIBILITY_FUNCTION;

struct tagNCI_PLUS_INFO_BLOCK {
	/*   0 */ short unsigned int wPlusFlags;
	/*   4 */ float dwMinWarp;
	/*   8 */ float dwMaxWarp;
};

typedef struct tagNCI_PLUS_INFO_BLOCK NCI_PLUS_INFO_BLOCK;
